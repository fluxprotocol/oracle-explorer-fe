{"version":3,"sources":["containers/OutcomeStakesOverview/OutcomeStakesOverview.module.scss","containers/RequestInfoCard/RequestInfoCard.module.scss","components/OptionSwitch/OptionSwitch.module.scss","containers/ResolutionWindowAccordion/components/StakerReport/StakerReport.module.scss","containers/UnstakeDialog/UnstakeDialog.module.scss","pages/DataRequestDetailPage/DataRequestDetailPage.module.scss","compositions/TabBar/TabBar.module.scss","compositions/LabeledText/LabeledText.module.scss","containers/AccountDetailsInfoCard/AccountDetailsInfoCard.module.scss","containers/Footer/Footer.module.scss","pages/AccountPage/AccountPage.module.scss","containers/WhitelistInfoCard/WhitelistInfoCard.module.scss","containers/OracleConfigInfoCard/OracleConfigInfoCard.module.scss","containers/StakersReportInfoCard/ResolutionWindowInfoCard.module.scss","containers/ResolutionWindowAccordion/components/OutcomeStakeInfo/OutcomeStakeInfo.module.scss","containers/ResolutionWindowAccordion/ResolutionWindowAccordion.module.scss","containers/HomeHeader/HomeHeader.module.scss","containers/OracleStats/components/StatCard/StatCard.module.scss","containers/InformationRows/InformationRows.module.scss","containers/StorageManagerDialog/StorageManagerDialog.module.scss","containers/Page/Page.module.scss","containers/DataRequestsOverviewFilters/DataRequestsOverviewFilters.module.scss","components/Card/Card.module.scss","components/InfoToolTip/InfoToolTip.module.scss","components/FakeLinkButton/FakeLinkButton.module.scss","components/Button/Button.module.scss","containers/Pagination/Pagination.module.scss","components/ExternalLink/ExternalLink.module.scss","components/Select/Select.module.scss","components/Checkbox/Checkbox.module.scss","containers/OracleStats/OracleStats.module.scss","pages/SearchResultPage/SearchResultPage.module.scss","containers/Menu/Menu.module.scss","components/Card/Card.tsx","compositions/TabBar/TabBar.tsx","components/InfoToolTip/InfoToolTip.tsx","compositions/LabeledText/LabeledText.tsx","containers/InformationRows/InformationRows.tsx","translation/trans.ts","utils/tokenUtils.ts","containers/AccountDetailsInfoCard/AccountDetailsInfoCard.tsx","connectors/AccountDetailsInfoCardConnector/AccountDetailsInfoCardConnector.tsx","components/FakeLinkButton/FakeLinkButton.tsx","components/SearchInput/SearchInput.tsx","containers/SearchForm/SearchForm.tsx","utils/cache.ts","models/DataRequestOutcome.ts","config.ts","services/providers/near/NearService.ts","services/providers/near/NearConnectService.ts","services/providers/near/StorageManagerService.ts","services/providers/ProviderRegistry.ts","services/providers/near/NearProvider.ts","utils/dateUtils.ts","utils/jsonUtils.ts","models/Claim.ts","models/OracleConfig.ts","models/DataRequest.ts","models/UserStakes.ts","models/ResolutionWindow.ts","services/GraphQLService.ts","services/DataRequestService.ts","services/SearchService.ts","connectors/SearchConnector/SearchConnector.tsx","components/Button/Button.tsx","compositions/Dialog/Dialog.tsx","components/Input/Input.tsx","compositions/NumberInput/NumberInput.tsx","containers/StorageManagerDialog/StorageManagerDialog.tsx","containers/StorageManagerDialog/services/createDefaultStorageManagerFormValues.ts","containers/StorageManagerDialog/services/validateStorageManagerFormValues.ts","redux/dialogs/dialogs.ts","connectors/StorageManagerDialogConnector/StorageManagerDialogConnector.tsx","containers/Menu/Menu.tsx","models/WhitelistItem.ts","services/AccountService.ts","models/OutcomeStake.ts","services/UserStakeService.ts","redux/account/account.ts","redux/account/accountActions.ts","redux/appconfig/appconfig.ts","connectors/MenuConnector/MenuConnector.tsx","redux/appconfig/appconfigActions.ts","containers/Footer/Footer.tsx","containers/Page/Page.tsx","containers/Pagination/Pagination.tsx","containers/OutcomeStakesOverview/OutcomeStakesOverview.tsx","connectors/AccountOutcomeStakesConnector/AccountOutcomeStakesConnector.tsx","pages/AccountPage/sub-pages/AccountStakesPage/AccountStakesPage.tsx","containers/DataRequestsOverview/DataRequestsOverview.tsx","connectors/AccountRequestsConnector/AccountRequestsConnector.tsx","pages/AccountPage/sub-pages/AccountRequestsPage/AccountRequestsPage.tsx","connectors/AccountUnclaimedStakesConnector/AccountUnclaimedStakesConnector.tsx","pages/AccountPage/sub-pages/AccountUnclaimedPage/AccountUnclaimedPage.tsx","components/ExternalLink/ExternalLink.tsx","containers/WhitelistInfoCard/WhitelistInfoCard.tsx","connectors/WhitelistInfoCardConnector/WhitelistInfoCardConnector.tsx","containers/OracleConfigInfoCard/OracleConfigInfoCard.tsx","connectors/OracleConfigInfoCardConnector/OracleConfigInfoCardConnector.tsx","services/OracleConfigService.ts","redux/oracleConfig/oracleConfig.ts","containers/AccountStakesInfoCard/AccountStakesInfoCard.tsx","connectors/AccountStakesInfoCardConnector/AccountStakesInfoCardConnector.tsx","containers/CallDataInfoCard/CallDataInfoCard.tsx","connectors/CallDataInfoConnector/CallDataInfoConnector.tsx","compositions/Countdown/Countdown.tsx","containers/DataRequestDetailHeader/DataRequestDetailHeader.tsx","redux/dataRequest/dataRequest.ts","redux/dataRequest/dataRequestAction.ts","connectors/DataRequestDetailHeaderConnector/DataRequestDetailHeaderConnector.tsx","containers/RequestInfoCard/RequestInfoCard.tsx","connectors/RequestInfoConnector/RequestInfoConnector.tsx","components/OptionSwitch/OptionSwitch.tsx","components/Select/Select.tsx","containers/StakeDialog/StakeDialog.tsx","containers/StakeDialog/services/createDefaultStakeFormValues.ts","containers/StakeDialog/services/validateStakeFormValues.ts","connectors/StakeDialogConnector/StakeDialogConnector.tsx","containers/ResolutionWindowAccordion/components/StakerReport/StakerReport.tsx","containers/ResolutionWindowAccordion/components/OutcomeStakeInfo/OutcomeStakeInfo.tsx","containers/ResolutionWindowAccordion/ResolutionWindowAccordion.tsx","containers/StakersReportInfoCard/ResolutionWindowInfoCard.tsx","connectors/ResolutionWindowsInfoConnector/ResolutionWindowsInfoConnector.tsx","containers/UnstakeDialog/UnstakeDialog.tsx","containers/UnstakeDialog/services/createDefaultUnstakeFormValues.ts","containers/UnstakeDialog/services/validateUnstakeFormValues.ts","connectors/UnstakeDialogConnector/UnstakeDialogConnector.tsx","connectors/DataRequestsOverviewConnector/DataRequestsOverviewConnector.tsx","components/Checkbox/Checkbox.tsx","containers/DataRequestsOverviewFilters/DataRequestsOverviewFilters.tsx","connectors/DataRequestsOverviewFiltersConnector/DataRequestsOverviewFiltersConnector.tsx","connectors/HomeDataRequestsConnector/HomeDataRequestsConnector.tsx","containers/HomeHeader/HomeHeader.tsx","connectors/HomeHeaderConnector/HomeHeaderConnector.tsx","containers/OracleStats/components/StatCard/StatCard.tsx","containers/OracleStats/OracleStats.tsx","connectors/OracleStatsConnector/OracleStatsConnector.tsx","services/DashboardService.ts","redux/stats/stats.ts","redux/stats/statsActions.ts","routes.ts","pages/HomePage/HomePage.tsx","pages/SearchResultPage/SearchResultPage.tsx","pages/AccountPage/AccountPage.tsx","pages/DataRequestDetailPage/DataRequestDetailPage.tsx","pages/DataRequestsPage/DataRequestsPage.tsx","pages/ConfigPage/ConfigPage.tsx","redux/oracleConfig/oracleConfigActions.ts","redux/reducers.ts","redux/store.ts","index.tsx","containers/CallDataInfoCard/CallDataInfoCard.module.scss","containers/AccountStakesInfoCard/AccountStakesInfoCard.module.scss","containers/StakeDialog/StakeDialog.module.scss","containers/DataRequestsOverview/DataRequestsOverview.module.scss","compositions/Dialog/Dialog.module.scss","containers/DataRequestDetailHeader/DataRequestDetailHeader.module.scss"],"names":["module","exports","Card","props","className","classnames","s","card","TabBar","items","onTabClick","activeId","variant","tabClassName","Tabs","classes","indicator","root","value","filter","tab","show","map","Tab","onClick","label","id","InfoToolTip","text","Tooltip","title","arrow","infoTooltipWrapper","LabeledText","info","children","tooltip","InformationRows","rows","row","item","trans","key","attributes","uppercaseFirstLetter","result","translations","resultWithAttributes","options","replace","word","undefined","replaceAttributes","charAt","toUpperCase","substring","booleanToYesNo","bool","formatToken","amount","decimals","dp","denominator","Big","pow","div","round","toFixed","toToken","mul","AccountDetailsInfoCard","account","appConfig","accountInfo","CardContent","titleWrapper","balance","stakeTokenDecimals","stakeTokenSymbol","activeStaking","totalStaked","totalClaimed","nativeToken","nativeTokenSymbol","storageUsed","nativeTokenDecimals","storageAvailable","AccountDetailsInfoCardConnector","accountDetail","useSelector","store","appconfig","FakeLinkButton","button","SearchInput","onChange","handleChange","useCallback","event","currentTarget","TextField","type","InputProps","endAdornment","InputAdornment","position","SearchForm","onSearch","inputClassName","useState","query","setQuery","handleSearchSubmit","preventDefault","onSubmit","v","hidden","cacheStorage","Map","creationPromises","cache","createCallback","ttl","a","get","onGoingRequest","createRequest","set","createdItem","setTimeout","delete","OutcomeType","API_URL","process","COINGECKO_API_URL","DEFAULT_PAGINATION_LIMIT","NEAR_NETWORK","NEAR_NULL_CONTRACT","NEAR_ORACLE_CONTRACT_ID","NEAR_MAX_GAS","STORAGE_BASE","transformToOutcome","outcome","Invalid","parsedOutcome","JSON","parse","Answer","answer","String","number","Number","multiplier","negative","toString","transfromOutcomeToString","isSameOutcome","b","stringify","PE","batchSendTransactions","walletConnection","txs","callbackUrl","accountId","getAccountId","_near","connection","signer","getPublicKey","networkId","localKey","provider","block","finality","blockHash","utils","serialize","base_decode","header","hash","Promise","all","index","receiverId","transactionOptions","actions","tx","transactions","functionCall","methodName","args","BN","gas","accessKeyForTransaction","accessKey","Error","publicKey","PublicKey","from","public_key","nonce","access_key","createTransaction","resultTxs","requestSignTransactions","getLatestOracleConfig","viewFunction","getTokenBalance","config","stake_token","account_id","createNearOutcome","dataRequest","data_type","isNegative","lt","number_multiplier","createNetworkConfig","connectConfig","nodeUrl","walletUrl","customNodeUrl","contractName","customWalletUrl","initialBalance","connectedNear","connectNear","nearInstance","networkConfig","connect","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","connectWallet","near","WalletConnection","getMinimumStorage","contractId","minimumBalance","min","console","error","getStorageBalance","storage","total","available","createStorageTransaction","extraStorage","minimumStorageRequired","storageBalance","storageRequired","add","sub","providerInitPromise","NearProvider","requestSignIn","signOut","wallet","isSignedIn","this","storageInfo","storageTotal","used","stakeOutcome","getLoggedInAccountId","loggedInAccount","storageTransaction","push","stakeToken","receiver_id","msg","request_id","resolution_round","oracleTransaction","unbondedStakes","loggedInAccountStakes","stake","bonded","totalStake","gt","halfGas","length","dataRequestId","some","finalized_outcome","getTokenInfo","token","symbol","providers","p","init","getProviderById","find","getLoggedInProvider","isLoggedIn","loginWithProvider","providerId","login","logoutWithProvider","logout","getAccountInfoWithProvider","getAccountInfo","getLoggedInAccount","loggedInAccountId","getAppConfigForProvider","getAppConfig","stakeWithProvider","finalizeWithProvider","finalize","claimWithProvider","claim","unstakeWithProvider","unstake","getProviderStorageBalance","name","prettyFormatDate","date","format","nsToMs","nanoSeconds","formatTimeToReadable","unit","Math","floor","m","h","days","hours","minutes","seconds","parseJson","str","e","transformToClaimViewModel","data","payout","userCorrectStake","user_correct_stake","transformToOracleConfig","bond_token","bondToken","blockHeight","block_height","Date","defaultChallengeWindowDuration","default_challenge_window_duration","finalArbitrator","final_arbitrator","finalArbitratorInvokeAmount","final_arbitrator_invoke_amount","gov","maxOutcomes","max_outcomes","minInitialChallengeWindowDuration","min_initial_challenge_window_duration","resolutionFeePercentage","resolution_fee_percentage","validityBond","validity_bond","DataRequestType","transformToUserStakesViewModel","userStake","resolutionWindows","stakedResolutionWindow","stakedOutcome","bondedOutcome","data_request_id","total_stake","transformToUserStakes","userStakes","currentOutcomeStakes","data_request","finalStakeToken","finalizedOutcome","claimPayout","transformToResolutionWindow","bonded_outcome","outcomeStakes","outcome_stakes","os","outcomeStake","highestOutcomeStake","bond_size","end_time","eq","user_stakes","bondSize","endTime","filled","winningOutcomeStake","transformToDataRequestListItem","requestor","sources","Api","Arbitrator","transformToDataRequestViewModel","resolution_windows","rw","reduce","prev","curr","parsedDataType","settlement_time","description","endPoint","end_point","sourcePath","source_path","fee","outcomes","target_contract","final_arbitrator_triggered","tags","total_correct_bonded_staked","total_incorrect_staked","account_stakes","ac","settlementTime","targetContract","finalArbitratorTriggered","totalCorrectStaked","totalIncorrectStaked","loggedInAccountClaim","InMemoryCache","link","createHttpLink","uri","graphqlClient","ApolloClient","defaultOptions","watchQuery","fetchPolicy","getAllDataRequests","limit","offset","onlyArbitratorRequests","gql","variables","response","paginatedDataRequests","dataRequests","dr","getDataRequestById","doesDataRequestExists","request","search","isNaN","url","routePaths","dataRequestDetail","SearchConnector","history","useHistory","handleSearch","Button","disabled","Dialog","open","isInfoDialog","onRequestClose","onSubmitClick","canSubmit","hideButtons","paperClassName","paper","DialogTitle","DialogContent","content","DialogActions","cancelButton","confirmButton","Input","input","helperText","NumberInput","showMax","onMaxClick","StorageManagerDialog","amountFormatted","formValues","setFormValues","errors","amountToWithdraw","lte","validateStorageManagerFormValues","handleMaxClick","formItem","formInput","dialogsSlice","createSlice","initialState","stakeDialog","unstakeDialog","storageManager","reducers","setStakeDialogOpen","state","action","payload","setUnstakeDialogOpen","setStorageManagerDialogOpen","StorageManagerDialogConnector","dialogs","dispatch","useDispatch","handleRequestClose","handleSumbit","withdrawStorage","Menu","onLoginClick","onLogoutClick","onStorageManagerClick","menuAnchorEl","setMenuAnchorEl","handleMenuClose","menu","topBar","to","logoWrapper","logo","bottomBar","menuItems","routes","route","inNavigation","menuItem","menuLink","activeClassName","exact","navPath","rightMenu","accountLinks","moreMenu","IconButton","iconButton","anchorEl","keepMounted","Boolean","onClose","mobileOnly","transformToWhitelistItemViewModel","customFee","parsedCustomFee","custom_fee","Fixed","Multiplier","active","codeBaseUrl","code_base_url","contractEntry","contract_entry","interfaceName","interface_name","storageBalanceRequest","active_staking","total_staked","total_claimed","whitelistItem","whitelist_item","combineOutcomeStakes","forEach","internalId","currentItem","Array","values","getUserStakesByRequestIdAndAccountId","requestId","stakes","getUserStakesByRequestId","getUserStakesByAccountId","filters","getUnclaimedStakesByAccountId","loading","accountStakes","accountStakesTotal","accountRequests","accountRequestsTotal","unclaimedStakes","accountSlice","setAccountErrors","setAccountLoading","setAccount","setAccountDetail","setAccountStakes","setAccountStakesTotal","setAccountInfo","setAccountUnclaimedStakes","setAccountRequests","setAccountRequestsTotal","loadAccountStakes","page","loadAccountRequests","requests","appConfigSlice","setAppConfigLoading","setAppConfig","MenuConnector","handleLoginClick","handleLogoutClick","handleStorageManagerClick","useEffect","Footer","footer","footerWrapper","Page","hasNavigation","body","Pagination","onChangePage","rowsPerPage","pagination","aria-label","currentPage","totalPages","OutcomeStakesOverview","onRequestPageChange","totalItems","showPagination","TableContainer","container","component","Paper","Table","table","TableHead","tableHead","TableRow","TableCell","TableBody","linkCell","ceil","AccountOutcomeStakesConnector","params","useParams","setPage","handleRequestPageChange","newPage","AccountStakesPage","DataRequestsOverview","noRequests","AccountRequestsConnector","dataRequestsTotal","AccountRequestsPage","AccountUnclaimedStakesConnector","AccountUnclaimedPage","ExternalLink","href","window","WhitelistInfoCard","whitelist","WhitelistInfoCardConnector","OracleConfigInfoCard","oracleConfig","OracleConfigInfoCardConnector","detail","getOracleConfigById","oracleConfigSlice","setOracleConfigDetail","setOracleConfigLoading","EmptyDiv","AccountStakesInfoCard","finalizedRound","tokenSymbol","stakeInfo","noStakes","AccountStakesInfoCardConnector","CallDataInfoCard","tableHeadRow","source","tableItem","tableItemInner","possibleOutcomes","CallDataInfoConnector","Countdown","onComplete","DataRequestDetailHeader","onStakeClick","onClaimClick","onUnstakeClick","onFinalizeClick","now","getTime","canInteract","setInteract","isFinalized","canFinalize","currentResolutionWindow","canDataRequestBeFinalized","hasClaimed","canUnstake","onCountdownComplete","dataRequestsSlice","detailLoading","totalDataRequests","dataRequestFilters","setDataRequestsErrors","setDataRequestsLoading","setDataRequestDetailLoading","setDataRequests","setDataRequestDetail","setTotalDataRequest","setDataRequestAccountStakes","setDataRequestFilters","loadDataRequests","getState","loadDataRequestById","accountStakesRequest","accountOutcomeStakes","DataRequestDetailHeaderConnector","handleStakeClick","handleUnstakeClick","handleFinalizeClick","finalizeDataRequest","handleClaimClick","claimDataRequest","RequestInfoCard","t","join","RequestInfoConnector","OptionSwitch","labelA","labelB","Switch","thumb","track","switchBase","_","checked","Select","InputLabel","labelId","select","target","MenuItem","StakeDialog","isInvalid","createDefaultStakeFormValues","handleAnswerChange","message","accountBalance","includes","currentRound","previousRound","validateStakeFormValues","form","StakeDialogConnector","handleSubmit","stakeFormValues","stakeDataRequest","StakerReport","stakerReport","Object","keys","outcomeInfo","OutcomeStakeInfo","tableComponent","ResolutionWindowAccordion","resolutionWindow","defaultExpanded","isWindowClosed","setWindowClosed","percentageFilled","Accordion","accordion","AccordionSummary","expandIcon","roundTitle","AccordionDetails","details","ResolutionWindowInfoCard","slice","reverse","noWindows","ResolutionWindowsInfoConnector","UnstakeDialog","selectedStakedOutcome","stakeIndex","validateUnstakeFormValues","outcomeIndex","selectedOutcomeStake","UnstakeDialogConnector","unstakeDataRequest","DataRequestsOverviewConnector","pathname","location","Checkbox","FormControlLabel","control","DataRequestsOverviewFilters","totalRequests","onFilterChange","wrapper","subtitle","DataRequestsOverviewFiltersConnector","urlParams","URLSearchParams","append","HomeDataRequestsConnector","latestRequests","stats","HomeHeader","searchInput","HomeHeaderConnector","StatCard","statLabel","statValue","OracleStats","tokenMarketCap","tokenPrice","marketCapFormatted","millify","OracleStatsConnector","getTokenMarketInfoByTicker","ticker","currency","fetch","json","price","market_data","current_price","marketCap","market_cap","statsSlice","setTotalRequestsStat","setTokenPriceStat","setTokenMarketCapStat","setLatestRequestsStat","loadStats","then","accountUnclaimed","useInterval","path","useLocation","tabBar","lastCard","combineReducers","createEnhancer","REACT_APP_APP_ENV","composeWithDevTools","applyMiddleware","thunk","preloadedState","enhancer","createStore","configureStore","initProviders","ReactDOM","render","basename","hashType","StylesProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.b3720eb3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"OutcomeStakesOverview_container__d2gou\",\"tableHead\":\"OutcomeStakesOverview_tableHead__2uKGi\",\"linkCell\":\"OutcomeStakesOverview_linkCell__1JQo4\",\"pagination\":\"OutcomeStakesOverview_pagination__9qflK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"RequestInfoCard_titleWrapper__3noPW\",\"title\":\"RequestInfoCard_title__3_LHr\",\"requestDetails\":\"RequestInfoCard_requestDetails__1YEfP\",\"item\":\"RequestInfoCard_item__10SUD\",\"link\":\"RequestInfoCard_link__1uLuv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"OptionSwitch_root__URwjr\",\"options\":\"OptionSwitch_options__3MHNp\",\"thumb\":\"OptionSwitch_thumb__2cImY\",\"track\":\"OptionSwitch_track__2IbZB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"StakerReport_container__1KMDE\",\"link\":\"StakerReport_link__28dEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"UnstakeDialog_form__C2-VH\",\"formItem\":\"UnstakeDialog_formItem__3mtQ-\",\"formInput\":\"UnstakeDialog_formInput__3LoeJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"DataRequestDetailPage_card__3etft\",\"lastCard\":\"DataRequestDetailPage_lastCard__1-jEK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TabBar_root__2tnOA\",\"tab\":\"TabBar_tab__t4I0-\",\"indicator\":\"TabBar_indicator__2rgIT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"LabeledText_root___tErh\",\"label\":\"LabeledText_label__3rjG2\",\"tooltip\":\"LabeledText_tooltip__1GkBn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"AccountDetailsInfoCard_titleWrapper__13sTy\",\"card\":\"AccountDetailsInfoCard_card__15fyo\",\"title\":\"AccountDetailsInfoCard_title__1q59t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__30IoI\",\"footerWrapper\":\"Footer_footerWrapper__2JRgQ\",\"logo\":\"Footer_logo__1GRAA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabBar\":\"AccountPage_tabBar__nyIhL\",\"card\":\"AccountPage_card__21C88\",\"title\":\"AccountPage_title__21f5o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"WhitelistInfoCard_titleWrapper__aGhS9\",\"card\":\"WhitelistInfoCard_card__3P3YS\",\"title\":\"WhitelistInfoCard_title__38y1w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"OracleConfigInfoCard_titleWrapper__1ddeR\",\"title\":\"OracleConfigInfoCard_title__3mNUJ\",\"card\":\"OracleConfigInfoCard_card__ut_iI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"ResolutionWindowInfoCard_titleWrapper__1xIda\",\"title\":\"ResolutionWindowInfoCard_title__14x7-\",\"noWindows\":\"ResolutionWindowInfoCard_noWindows__2uZTP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"OutcomeStakeInfo_container__1nmxk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accordion\":\"ResolutionWindowAccordion_accordion__XN6Ij\",\"roundTitle\":\"ResolutionWindowAccordion_roundTitle__1OvP0\",\"details\":\"ResolutionWindowAccordion_details__9JJHE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HomeHeader_title__3isjk\",\"search\":\"HomeHeader_search__2w-zi\",\"searchInput\":\"HomeHeader_searchInput__39vB0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"StatCard_card__1M2jM\",\"statLabel\":\"StatCard_statLabel__N14eN\",\"statValue\":\"StatCard_statValue__F5gOf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"InformationRows_root__1CR4v\",\"item\":\"InformationRows_item__1QOpX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"StorageManagerDialog_form__2SPdU\",\"formItem\":\"StorageManagerDialog_formItem__1Ps1x\",\"formInput\":\"StorageManagerDialog_formInput__12vWX\",\"error\":\"StorageManagerDialog_error__3REyq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Page_page__1vav1\",\"body\":\"Page_body__34Ach\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subtitle\":\"DataRequestsOverviewFilters_subtitle__3ViXR\",\"wrapper\":\"DataRequestsOverviewFilters_wrapper__2lMdn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__35wN0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoTooltipWrapper\":\"InfoToolTip_infoTooltipWrapper__tIv_o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FakeLinkButton_button__3y9OQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Lf63\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__CcIoD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"ExternalLink_link__1Kew6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"Select_select__JK0vz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checked\":\"Checkbox_checked__2Gh-t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"OracleStats_root__2Ae20\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"SearchResultPage_title__1YHPd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Menu_root__3JE0d\",\"menu\":\"Menu_menu__2sZJU\",\"topBar\":\"Menu_topBar__1xIMt\",\"bottomBar\":\"Menu_bottomBar__1J-Xi\",\"menuItems\":\"Menu_menuItems__1E3rU\",\"accountLinks\":\"Menu_accountLinks__3tRwW\",\"menuItem\":\"Menu_menuItem__3mHfR\",\"menuLink\":\"Menu_menuLink__2oVrc\",\"menuLink--active\":\"Menu_menuLink--active__3XNkb\",\"link\":\"Menu_link__1lvRI\",\"logoWrapper\":\"Menu_logoWrapper__3tZ4v\",\"logo\":\"Menu_logo__2SxFW\",\"rightMenu\":\"Menu_rightMenu__GMj4U\",\"moreMenu\":\"Menu_moreMenu__1jmd5\",\"mobileOnly\":\"Menu_mobileOnly__Yj8kA\"};","import React from 'react';\nimport classnames from 'classnames';\nimport { CardProps, default as MuiCard } from '@material-ui/core/Card';\n\nimport s from './Card.module.scss';\n\nexport default function Card(props: CardProps) {\n    return (\n        <MuiCard {...props} className={classnames(s.card, props.className)} />\n    );\n}\n","import React, { ReactElement } from 'react';\nimport classnames from 'classnames';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport s from './TabBar.module.scss';\n\nexport interface TabBarItem {\n    id: string;\n    label: string;\n    show: boolean;\n}\n\ninterface Props {\n    items: TabBarItem[];\n    activeId: string;\n    onTabClick: (item: TabBarItem) => void;\n    className?: string;\n    tabClassName?: string;\n    variant?: 'standard' | 'scrollable' | 'fullWidth';\n}\n\nexport default function TabBar({\n    items,\n    onTabClick,\n    activeId,\n    variant = 'standard',\n    tabClassName = '',\n    className = '',\n}: Props): ReactElement {\n    return (\n        <Tabs\n            classes={{ indicator: s.indicator }}\n            className={classnames(s.root, className)}\n            variant={variant}\n            value={activeId}\n        >\n            {items.filter(tab => tab.show).map(tab => (\n                <Tab\n                    key={tab.id}\n                    onClick={() => onTabClick(tab)}\n                    className={classnames(s.tab, tabClassName)}\n                    label={tab.label}\n                    value={tab.id}\n                />\n            ))}\n        </Tabs>\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport InfoIcon from '@material-ui/icons/Info';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport s from './InfoToolTip.module.scss';\n\ninterface Props {\n    text: string;\n    className?: string;\n}\n\nexport default function InfoToolTip({\n    text,\n    className = '',\n}: Props) {\n    return (\n        <Tooltip title={text} arrow>\n            <div className={classnames(className, s.infoTooltipWrapper)}>\n                <InfoIcon />\n            </div>\n        </Tooltip>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nimport s from './LabeledText.module.scss';\nimport InfoToolTip from '../../components/InfoToolTip';\n\ninterface Props {\n    label: string;\n    info?: string;\n    className?: string;\n}\n\nexport default function LabeledText({\n    label,\n    info = '',\n    children,\n    className,\n}: PropsWithChildren<Props>) {\n    return (\n        <div className={classnames(s.root, className)}>\n            <span className={s.label}>\n                {label}\n                {info && <InfoToolTip className={s.tooltip} text={info} />}\n            </span>\n            <span>{children}</span>\n        </div>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport LabeledText from '../../compositions/LabeledText';\n\nimport s from './InformationRows.module.scss';\n\nexport interface InformationRow {\n    label: string;\n    value: ReactElement;\n    info?: string;\n}\n\ninterface Props {\n    rows: InformationRow[];\n}\n\nexport default function InformationRows({\n    rows,\n}: Props) {\n    return (\n        <div className={s.root}>\n            {rows.map((row) => {\n                return (\n                    <LabeledText key={row.label} className={s.item} label={row.label} info={row.info}>\n                        {row.value}\n                    </LabeledText>\n                );\n            })}\n        </div>\n    );\n}\n","import translations from './lang/translations.eng.json';\n\ninterface Attributes {\n    [key: string]: string;\n}\n\nfunction replaceAttributes(label: string, options: Attributes = {}): string {\n    // Replaces any \":key\" with a value in the options\n    return label.replace(/:(\\w+)/gi, (word) => {\n        const key = word.replace(/^:/, '');\n\n        if (options[key] === undefined || options[key] === null) {\n            return '';\n        }\n\n        return options[key];\n    });\n}\n\nexport function ucFirstLetter(text: string): string {\n    return text.charAt(0).toUpperCase() + text.substring(1);\n}\n\n\nexport default function trans(key: string, attributes?: Attributes, uppercaseFirstLetter?: boolean): string {\n    // @ts-ignore\n    const result: string = translations[key];\n\n    if (!result) {\n        return key;\n    }\n\n    const resultWithAttributes = replaceAttributes(result, attributes);\n    return uppercaseFirstLetter ? ucFirstLetter(resultWithAttributes) : resultWithAttributes;\n}\n\nexport function booleanToYesNo(bool = false): string {\n    return bool ? trans('global.yes') : trans('global.no');\n}\n","import Big from \"big.js\";\n\n/**\n * Converts the smalles unit to a human readable amount\n *\n * @export\n * @param {string} amount\n * @param {number} [decimals=18]\n * @param {number} [dp=2]\n * @return {string}\n */\nexport function formatToken(amount: string, decimals = 18, dp = 2): string {\n    const denominator = new Big(10).pow(decimals);\n    return new Big(amount).div(denominator).round(dp, 0).toFixed(dp);\n}\n\n/**\n * Converts the amount to the smallest unit (default 18)\n *\n * @export\n * @param {string} amount\n * @param {number} [decimals=18]\n * @return {string}\n */\nexport function toToken(amount: string, decimals = 18): string {\n    const denominator = new Big(10).pow(decimals);\n    return new Big(amount).mul(denominator).toFixed(0);\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\nimport InformationRows from '../InformationRows';\nimport trans from '../../translation/trans';\nimport { Account, AccountInfo } from '../../models/Account';\n\nimport s from './AccountDetailsInfoCard.module.scss';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { AppConfig } from '../../models/AppConfig';\n\nexport interface Props {\n    account?: Account;\n    appConfig: AppConfig;\n    accountInfo: AccountInfo;\n}\n\nexport default function AccountDetailsInfoCard({\n    account,\n    appConfig,\n    accountInfo,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('accountDetailsInfoCard.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[\n                        {\n                            label: trans('accountDetailsInfoCard.label.balance'),\n                            value: <span>{formatToken(account?.balance ?? '0', appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.activeStaking'),\n                            value: <span>{formatToken(accountInfo.activeStaking, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.totalStaked'),\n                            value: <span>{formatToken(accountInfo.totalStaked, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.totalClaimed'),\n                            value: <span>{formatToken(accountInfo.totalClaimed, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.storageUsed'),\n                            info: trans('accountDetailsInfoCard.info.storageUsed', { nativeToken: appConfig.nativeTokenSymbol }),\n                            value: <span>{formatToken(accountInfo.storageUsed, appConfig.nativeTokenDecimals, 4)} {appConfig.nativeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.storageUnused'),\n                            info: trans('accountDetailsInfoCard.info.storageUnused', { nativeToken: appConfig.nativeTokenSymbol }),\n                            value: <span>{formatToken(accountInfo.storageAvailable, appConfig.nativeTokenDecimals, 4)} {appConfig.nativeTokenSymbol}</span>,\n                        },\n                    ]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport AccountDetailsInfoCard from '../../containers/AccountDetailsInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\nexport default function AccountDetailsInfoCardConnector() {\n    const accountDetail = useSelector((store: Reducers) => store.account.accountDetail);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    return (\n        <AccountDetailsInfoCard\n            account={accountDetail.account}\n            accountInfo={accountDetail.info}\n            appConfig={appConfig}\n        />\n    );\n}\n","import React, { FormEvent, PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nimport s from './FakeLinkButton.module.scss';\n\ninterface Props {\n    className?: string;\n    onClick?: (event: FormEvent) => void;\n}\n\nexport default function FakeLinkButton({\n    children,\n    className,\n    onClick,\n}: PropsWithChildren<Props>) {\n    return (\n        <button onClick={onClick} className={classnames(s.button, className)}>\n            {children}\n        </button>\n    );\n}\n","import React, { FormEvent, useCallback } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SearchIcon from '@material-ui/icons/Search';\n\ninterface Props {\n    label: string;\n    value?: string;\n    className?: string;\n    onChange?: (value: string) => void;\n}\n\nexport default function SearchInput({\n    label,\n    className,\n    value,\n    onChange = () => {},\n}: Props) {\n    const handleChange = useCallback((event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        onChange(event.currentTarget.value);\n    }, [onChange]);\n\n    return (\n        <TextField\n            label={label}\n            className={className}\n            value={value}\n            type=\"search\"\n            onChange={handleChange}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"start\">\n                        <SearchIcon />\n                    </InputAdornment>\n                ),\n            }}\n        />\n    );\n}\n","import React, { FormEvent, useCallback, useState } from 'react';\nimport SearchInput from '../../components/SearchInput';\nimport trans from '../../translation/trans';\n\ninterface Props {\n    onSearch: (query: string) => void;\n    className?: string;\n    inputClassName?: string;\n}\n\nexport default function SearchForm({\n    onSearch,\n    className,\n    inputClassName,\n}: Props) {\n    const [query, setQuery] = useState('');\n    const handleSearchSubmit = useCallback((event: FormEvent) => {\n        event.preventDefault();\n        onSearch(query);\n    }, [query, onSearch]);\n\n    return (\n        <form className={className} onSubmit={handleSearchSubmit}>\n            <SearchInput\n                label={trans('menu.label.search')}\n                onChange={v => setQuery(v)}\n                value={query}\n                className={inputClassName}\n            />\n            <input type=\"submit\" hidden />\n        </form>\n    );\n}\n","const cacheStorage = new Map<string, any>();\nconst creationPromises = new Map<string, Promise<any>>();\n\n/**\n * Caches an item by it's id and returns it if it's requested again.\n * If it does not exist it asks you to create the item\n *\n * @export\n * @template T\n * @param {string} id\n * @param {() => Promise<T>} createCallback\n * @return {Promise<T>}\n */\nexport default async function cache<T>(id: string, createCallback: () => Promise<T>, ttl?: number): Promise<T> {\n    const item = cacheStorage.get(id);\n    if (item) return item;\n\n    // No need to create another item when the request is already going\n    // Instead we just redirect the promise back to this call\n    // Caching will be handled by the iniator\n    const onGoingRequest = creationPromises.get(id);\n    if (onGoingRequest) return onGoingRequest;\n\n    // Keep track of all ongoing promises\n    const createRequest = createCallback();\n    creationPromises.set(id, createRequest);\n\n    try {\n        const createdItem = await createRequest;\n        cacheStorage.set(id, createdItem);\n\n        if (ttl) {\n            setTimeout(() => {\n                cacheStorage.delete(id);\n            }, ttl);\n        }\n\n        return createdItem;\n    } catch (error) {\n        throw error;\n    } finally {\n        creationPromises.delete(id);\n    }\n}\n","import Big from \"big.js\";\nimport trans from \"../translation/trans\";\n\nexport enum OutcomeType {\n    Answer,\n    Invalid\n}\n\nexport interface OutcomeAnswer {\n    answer: string;\n    type: OutcomeType.Answer;\n}\n\nexport interface OutcomeInvalid {\n    type: OutcomeType.Invalid;\n}\n\nexport type Outcome = OutcomeAnswer | OutcomeInvalid;\n\n\nexport interface OutcomeNumber {\n    Number: {\n        value: string;\n        multiplier: string;\n        negative: boolean;\n    }\n}\n\nexport interface OutcomeString {\n    String: string;\n}\n\nexport interface ParsedOutcome {\n    Answer: OutcomeNumber | OutcomeString;\n}\n\nexport function transformToOutcome(outcome: string): Outcome {\n    if (outcome === 'Invalid') {\n        return {\n            type: OutcomeType.Invalid,\n        }\n    }\n\n    const parsedOutcome: ParsedOutcome = JSON.parse(outcome);\n\n    if ('String' in parsedOutcome.Answer) {\n        return {\n            answer: parsedOutcome.Answer.String,\n            type: OutcomeType.Answer,\n        };\n    }\n\n    const number = new Big(parsedOutcome.Answer.Number.value).div(parsedOutcome.Answer.Number.multiplier);\n\n    if (parsedOutcome.Answer.Number.negative) {\n        number.s = -1;\n    }\n\n    return {\n        answer: number.toString(),\n        type: OutcomeType.Answer,\n    };\n}\n\nexport function transfromOutcomeToString(outcome: Outcome): string {\n    if (outcome.type === OutcomeType.Invalid) {\n        return trans('outcome.invalid');\n    }\n\n    return `\"${outcome.answer}\"`;\n}\n\nexport function isSameOutcome(a?: Outcome, b?: Outcome): boolean {\n    if (typeof a === 'undefined' || typeof b === 'undefined') {\n        return false;\n    }\n\n    if (a.type === OutcomeType.Invalid && b.type === OutcomeType.Invalid) {\n        return true;\n    }\n\n    return JSON.stringify(a) === JSON.stringify(b);\n}\n","import Big from 'big.js';\n\nexport const API_URL = process.env.REACT_APP_API_URL ?? '';\nexport const COINGECKO_API_URL = process.env.REACT_APP_COINGECKO_API_URL || '';\nexport const DEFAULT_PAGINATION_LIMIT = 10;\nexport const COINGECKO_TOKEN_TICKER = 'near';\n\nexport const NEAR_NETWORK = process.env.REACT_APP_NEAR_NETWORK as any ?? 'testnet';\nexport const NEAR_NULL_CONTRACT = process.env.REACT_APP_NEAR_NULL_CONTRACT ?? 'null_address.near';\nexport const NEAR_ORACLE_CONTRACT_ID = process.env.REACT_APP_NEAR_ORACLE_CONTRACT_ID ?? 'oracle.flux-dev'\nexport const NEAR_MAX_GAS = '200000000000000';\nexport const STORAGE_BASE = '30000000000000000000000';\nexport const HOME_REFRESH_INTERVAL = 2000;\nexport const REQUEST_DETAIL_REFRESH_INTERVAL = 5000;\nexport const REQUEST_LIST_REFRESH_INTERVAL = 5000;\n\nBig.PE = 1000000;\n","import { WalletConnection, utils, transactions } from \"near-api-js\";\nimport BN from 'bn.js';\nimport { NEAR_ORACLE_CONTRACT_ID } from \"../../../config\";\nimport { Outcome, OutcomeType } from \"../../../models/DataRequestOutcome\";\nimport { DataRequestViewModel } from \"../../../models/DataRequest\";\nimport Big from \"big.js\";\nimport { OracleConfigGraphData } from \"../../../models/OracleConfig\";\nimport cache from \"../../../utils/cache\";\n\nexport interface TransactionViewOptions {\n    methodName: string;\n    args?: object;\n}\n\nexport interface TransactionCallOptions extends TransactionViewOptions {\n    gas: string;\n    amount: string;\n}\n\nexport interface TransactionOption {\n    receiverId: string;\n    transactionOptions: TransactionCallOptions[];\n}\n\nexport async function batchSendTransactions(walletConnection: WalletConnection, txs: TransactionOption[], callbackUrl?: string) {\n    const accountId = walletConnection.getAccountId();\n    const localKey = await walletConnection._near.connection.signer.getPublicKey(accountId, walletConnection._near.connection.networkId);\n    const block = await walletConnection._near.connection.provider.block({ finality: 'final' });\n    const blockHash = utils.serialize.base_decode(block.header.hash);\n\n    const resultTxs = await Promise.all(txs.map(async ({ receiverId, transactionOptions }, index) => {\n        const actions = transactionOptions.map(tx => transactions.functionCall(tx.methodName, tx.args ?? {}, new BN(tx.gas), new BN(tx.amount)));\n        const accessKey = await walletConnection.account().accessKeyForTransaction(receiverId, actions, localKey);\n\n        if (!accessKey) {\n            throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);\n        }\n\n        const publicKey = utils.PublicKey.from(accessKey.public_key);\n        const nonce = accessKey.access_key.nonce + index + 1;\n\n        return transactions.createTransaction(accountId, publicKey, receiverId, nonce, actions, blockHash);\n    }));\n\n    return walletConnection.requestSignTransactions(resultTxs, callbackUrl);\n}\n\nexport async function getLatestOracleConfig(walletConnection: WalletConnection): Promise<OracleConfigGraphData> {\n    const account = walletConnection.account();\n\n    return cache('near_latest_oracle_config', async () => {\n        return account.viewFunction(NEAR_ORACLE_CONTRACT_ID, 'get_config', {});\n    });\n}\n\nexport async function getTokenBalance(walletConnection: WalletConnection, accountId: string): Promise<string> {\n    const account = walletConnection.account();\n    const config = await getLatestOracleConfig(walletConnection);\n\n    return account.viewFunction(config.stake_token, 'ft_balance_of', {\n        account_id: accountId,\n    });\n}\n\nexport function createNearOutcome(dataRequest: DataRequestViewModel, outcome: Outcome): any {\n    if (outcome.type === OutcomeType.Invalid) {\n        return 'Invalid';\n    }\n\n    if (dataRequest.data_type === 'String') {\n        return {\n            'Answer': {\n                'String': outcome.answer,\n            }\n        }\n    }\n\n    let number = new Big(outcome.answer);\n    const isNegative = number.lt(0);\n\n    number = number.mul(dataRequest.number_multiplier!);\n\n    // Convert back to positive to store inside a u128\n    if (isNegative) {\n        number = number.mul(-1);\n    }\n\n    return {\n        'Answer': {\n            'Number': {\n                value: number.toFixed(0),\n                negative: isNegative,\n                multiplier: dataRequest.number_multiplier,\n            }\n        }\n    }\n}\n","import { connect, Near, WalletConnection, keyStores } from \"near-api-js\";\nimport { NEAR_NETWORK, NEAR_NULL_CONTRACT } from \"../../../config\";\n\nexport interface ConnectConfig {\n    accountId?: string;\n    nearInstance?: Near;\n    walletInstance?: WalletConnection;\n    customNodeUrl?: string;\n    customWalletUrl?: string;\n}\n\nexport interface NetworkConfig {\n    networkId: string,\n    nodeUrl: string,\n    contractName?: null,\n    walletUrl?: string,\n    initialBalance?: string\n}\n\nexport function createNetworkConfig(connectConfig: ConnectConfig): NetworkConfig {\n    if (NEAR_NETWORK === 'mainnet') {\n        return {\n            networkId: 'mainnet',\n            nodeUrl: 'https://rpc.mainnet.near.org',\n            walletUrl: 'https://wallet.near.org',\n        };\n    }\n\n    return {\n        networkId: 'testnet',\n        nodeUrl: connectConfig.customNodeUrl || 'https://rpc.testnet.near.org',\n        contractName: null,\n        walletUrl: connectConfig.customWalletUrl || 'https://wallet.testnet.near.org',\n        initialBalance: '100000000',\n    };\n}\n\nlet connectedNear: Near | undefined = undefined;\n\n/**\n * Connects with NEAR\n *\n * @export\n * @param {ConnectConfig} connectConfig\n * @param {SdkConfig} sdkConfig\n * @return {Promise<Near>}\n */\nexport async function connectNear(connectConfig: ConnectConfig): Promise<Near> {\n    if (connectConfig.nearInstance) {\n        return connectConfig.nearInstance;\n    }\n\n    if (connectedNear) {\n        return connectedNear;\n    }\n\n    const networkConfig = createNetworkConfig(connectConfig);\n\n    connectedNear = await connect({\n        ...networkConfig,\n        deps: {\n            keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n        },\n    });\n\n    return connectedNear;\n}\n\nlet walletConnection: WalletConnection | undefined = undefined;\n\nexport async function connectWallet() {\n    if (walletConnection) {\n        return walletConnection;\n    }\n\n    const near = await connectNear({});\n    walletConnection = new WalletConnection(near, NEAR_NULL_CONTRACT);\n\n    return walletConnection;\n}\n","import Big from \"big.js\";\nimport { WalletConnection } from \"near-api-js\";\nimport { NEAR_MAX_GAS } from \"../../../config\";\nimport cache from \"../../../utils/cache\";\nimport { TransactionOption } from \"./NearService\";\n\n/**\n * Gets the minimum amount storage required for a oracle transaction\n *\n * @export\n * @param {WalletConnection} walletConnection\n * @return {Promise<Big>}\n */\nexport async function getMinimumStorage(contractId: string, walletConnection: WalletConnection): Promise<Big> {\n    try {\n        const result = await cache(`${contractId}_minimum_storage_balance`, async () => {\n            const account = walletConnection.account();\n            const minimumBalance = await account.viewFunction(contractId, 'storage_balance_bounds', {});\n            return Big(minimumBalance.min);\n        });\n\n        return result;\n    } catch (error) {\n        console.error('[getMinimumStorage]', error);\n        return new Big(0);\n    }\n}\n\n/**\n * Get the current storage balance of the specific account\n *\n * @export\n * @param {WalletConnection} walletConnection\n * @return {Promise<{ total: Big, available: Big }>}\n */\nexport async function getStorageBalance(contractId: string, accountId: string, walletConnection: WalletConnection): Promise<{ total: Big, available: Big }> {\n    try {\n        const account = walletConnection.account();\n        const storage = await account.viewFunction(contractId, 'storage_balance_of', {\n            account_id: accountId,\n        });\n\n        return {\n            total: storage ? new Big(storage.total) : new Big(0),\n            available: storage ? new Big(storage.available) : new Big(0),\n        };\n    } catch (error) {\n        console.error('[getStorageBalance]', error);\n        return {\n            total: new Big(0),\n            available: new Big(0),\n        };\n    }\n}\n\n/**\n * Creates a storage deposit transaction if it's required\n *\n * @export\n * @param {string} contractId\n * @param {string} accountId\n * @param {WalletConnection} walletConnection\n * @param {Big} extraStorage Can be used for calls that require way more than the minimum storage requirements\n * @return {(Promise<TransactionOption | null>)}\n */\nexport async function createStorageTransaction(contractId: string, accountId: string, walletConnection: WalletConnection, extraStorage: Big = new Big(0)): Promise<TransactionOption | null> {\n    const minimumStorageRequired = await getMinimumStorage(contractId, walletConnection);\n    const storageBalance = await getStorageBalance(contractId, accountId, walletConnection);\n    const storageRequired = minimumStorageRequired.add(extraStorage);\n\n    if (storageBalance.available.lt(storageRequired)) {\n        return {\n            receiverId: contractId,\n            transactionOptions: [{\n                amount: storageRequired.sub(storageBalance.available).toString(),\n                gas: NEAR_MAX_GAS,\n                methodName: 'storage_deposit',\n                args: {\n                    accountId,\n                }\n            }],\n        };\n    }\n\n    return null;\n}\n","import { Account } from \"../../models/Account\";\nimport { AppConfig } from \"../../models/AppConfig\";\nimport { DataRequestViewModel } from \"../../models/DataRequest\";\nimport { Outcome } from \"../../models/DataRequestOutcome\";\nimport { TokenViewModel } from \"../../models/Token\";\nimport cache from \"../../utils/cache\";\nimport { IProvider } from \"./IProvider\";\nimport NearProvider from \"./near/NearProvider\";\n\nlet providers: IProvider[] = [];\nlet providerInitPromise: Promise<boolean[]>;\n\nexport async function initProviders() {\n    if (providerInitPromise) {\n        await providerInitPromise;\n        return;\n    }\n\n    providers = [\n        new NearProvider(),\n    ];\n\n    providerInitPromise = Promise.all(providers.map(p => p.init()));\n    await providerInitPromise;\n}\n\nexport function getProviderById(id: string): IProvider | undefined {\n    return providers.find(p => p.id === id);\n}\n\nexport function getLoggedInProvider() {\n    return providers.find(p => p.isLoggedIn());\n}\n\nexport async function loginWithProvider(providerId: string) {\n    const provider = getProviderById(providerId);\n    return provider?.login() ?? false;\n}\n\nexport async function logoutWithProvider(providerId: string) {\n    const provider = getProviderById(providerId);\n    return provider?.logout() ?? false;\n}\n\nexport async function getLoggedInAccountId(): Promise<string | undefined> {\n    const provider = getLoggedInProvider();\n    return provider ? provider.getLoggedInAccountId() : undefined;\n}\n\nexport async function getAccountInfoWithProvider(providerId: string, accountId: string): Promise<Account | undefined> {\n    const provider = getProviderById(providerId);\n    const account = await provider?.getAccountInfo(accountId);\n    if (!account || !provider) return undefined;\n\n    return {\n        accountId: account.accountId,\n        balance: account.balance,\n        providerId: provider.id,\n        storageAvailable: account.storageAvailable,\n        storageTotal: account.storageTotal,\n        storageUsed: account.storageUsed,\n    };\n}\n\nexport async function getLoggedInAccount(): Promise<Account | undefined> {\n    const provider = getLoggedInProvider();\n\n    if (!provider) {\n        return undefined;\n    }\n\n    const loggedInAccountId = await provider.getLoggedInAccountId();\n\n    if (!loggedInAccountId) {\n        return undefined;\n    }\n\n    return getAccountInfoWithProvider(provider.id, loggedInAccountId);\n}\n\nexport async function getAppConfigForProvider(providerId: string): Promise<AppConfig> {\n    const provider = getProviderById(providerId);\n    const config = await provider?.getAppConfig();\n\n    return {\n        nativeTokenDecimals: config?.nativeTokenDecimals ?? 18,\n        nativeTokenSymbol: config?.nativeTokenSymbol ?? '?',\n        stakeTokenDecimals: config?.stakeTokenDecimals ?? 18,\n        stakeTokenSymbol: config?.stakeTokenSymbol ?? '?',\n    };\n}\n\nexport async function stakeWithProvider(providerId: string, amount: string, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.stake(amount, dataRequest, outcome) ?? false;\n}\n\nexport async function finalizeWithProvider(providerId: string, dataRequest: DataRequestViewModel): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.finalize(dataRequest) ?? false;\n}\n\nexport async function claimWithProvider(providerId: string, accountId: string, dataRequest: DataRequestViewModel): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.claim(accountId, dataRequest) ?? false;\n}\n\nexport async function unstakeWithProvider(providerId: string, amount: string, round: number, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.unstake(amount, round, dataRequest, outcome) ?? false;\n}\n\nexport async function getProviderStorageBalance(providerId: string, accountId: string): Promise<{ total: string, used: string, available: string }> {\n    const provider = getProviderById(providerId);\n    return provider?.getStorageBalance(accountId) ?? { total: '0', available: '0', used: '0' };\n}\n\nexport function withdrawStorage(providerId: string, amount: string) {\n    const provider = getProviderById(providerId);\n    provider?.withdrawStorage(amount);\n}\n\nexport async function getTokenInfo(providerId: string, contractId: string): Promise<TokenViewModel> {\n    return cache(`tokeninfo_${providerId}_${contractId}`, async () => {\n        const provider = getProviderById(providerId);\n        const token = await provider?.getTokenInfo(contractId);\n\n        return {\n            decimals: token?.decimals ?? 18,\n            name: token?.name ?? contractId,\n            symbol: token?.symbol ?? contractId,\n            contractId,\n        };\n    });\n}\n","import { IProvider } from \"../IProvider\";\nimport { NEAR_MAX_GAS, NEAR_NULL_CONTRACT, NEAR_ORACLE_CONTRACT_ID, STORAGE_BASE } from \"../../../config\";\nimport { isSameOutcome, Outcome } from \"../../../models/DataRequestOutcome\";\nimport { DataRequestViewModel } from \"../../../models/DataRequest\";\nimport Big from \"big.js\";\nimport { batchSendTransactions, createNearOutcome, getLatestOracleConfig, getTokenBalance, TransactionOption } from \"./NearService\";\nimport { connectWallet } from \"./NearConnectService\";\nimport { createStorageTransaction } from \"./StorageManagerService\";\nimport { Account } from \"../../../models/Account\";\nimport { TokenViewModel } from \"../../../models/Token\";\nimport { AppConfig } from \"../../../models/AppConfig\";\n\nexport default class NearProvider implements IProvider {\n    id = 'near';\n    nativeTokenSymbol = 'NEAR';\n    nativeTokenDecimals = 24;\n\n    async init() {\n        return true;\n    }\n\n    async login() {\n        const wallet = await connectWallet();\n        wallet.requestSignIn(NEAR_NULL_CONTRACT, 'oracle');\n        return true;\n    }\n\n    async logout() {\n        const wallet = await connectWallet();\n        wallet.signOut();\n        return true;\n    }\n\n    async isLoggedIn() {\n        const wallet = await connectWallet();\n        return wallet.isSignedIn();\n    }\n\n    async getLoggedInAccountId(): Promise<string> {\n        const wallet = await connectWallet();\n        return wallet.getAccountId();\n    }\n\n    async getAccountInfo(accountId: string): Promise<Omit<Account, 'providerId'>> {\n        try {\n            const wallet = await connectWallet();\n            const balance = await getTokenBalance(wallet, accountId);\n            const storageInfo = await this.getStorageBalance(accountId);\n\n            return {\n                accountId,\n                balance,\n                storageAvailable: storageInfo.available,\n                storageTotal: storageInfo.total,\n                storageUsed: storageInfo.used,\n            };\n        } catch (error) {\n            return {\n                accountId,\n                balance: '0',\n                storageAvailable: '0',\n                storageTotal: '0',\n                storageUsed: '0',\n            }\n        }\n    }\n\n    async stake(amount: string, dataRequest: DataRequestViewModel, outcome: Outcome) {\n        const wallet = await connectWallet();\n\n        const stakeOutcome = createNearOutcome(dataRequest, outcome);\n        const loggedInAccount = await this.getLoggedInAccountId();\n        const storageTransaction = await createStorageTransaction(NEAR_ORACLE_CONTRACT_ID, loggedInAccount, wallet);\n        const transactions: TransactionOption[] = [];\n\n        if (storageTransaction) {\n            transactions.push(storageTransaction);\n        }\n\n        transactions.push({\n            receiverId: dataRequest.config.stakeToken.contractId,\n            transactionOptions: [{\n                amount: '1',\n                gas: NEAR_MAX_GAS,\n                methodName: 'ft_transfer_call',\n                args: {\n                    receiver_id: NEAR_ORACLE_CONTRACT_ID,\n                    amount,\n                    msg: JSON.stringify({\n                        'StakeDataRequest': {\n                            id: dataRequest.id,\n                            outcome: stakeOutcome,\n                        }\n                    })\n                }\n            }],\n        });\n\n        await batchSendTransactions(wallet, transactions);\n\n        return true;\n    }\n\n    async unstake(amount: string, round: number, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n        if (!account) return false;\n\n        const stakeOutcome = createNearOutcome(dataRequest, outcome);\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'dr_unstake', {\n            request_id: dataRequest.id,\n            resolution_round: round,\n            outcome: stakeOutcome,\n            amount,\n\n            // @ts-ignore\n        }, NEAR_MAX_GAS, '1');\n\n        return true;\n    }\n\n    async finalize(dataRequest: DataRequestViewModel) {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n        if (!account) return false;\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'dr_finalize', {\n            request_id: dataRequest.id,\n            // @ts-ignore\n        }, NEAR_MAX_GAS, STORAGE_BASE);\n\n        return true;\n    }\n\n    async claim(accountId: string, dataRequest: DataRequestViewModel) {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n        if (!account) return false;\n\n        const oracleTransaction: TransactionOption = {\n            receiverId: NEAR_ORACLE_CONTRACT_ID,\n            transactionOptions: [],\n        };\n\n        const unbondedStakes = dataRequest.loggedInAccountStakes.filter(stake => !stake.bonded && new Big(stake.totalStake).gt(0));\n        const halfGas = new Big(NEAR_MAX_GAS).div(2).round(0, 0);\n\n        // Claim back any unbonded stake\n        if (unbondedStakes.length) {\n            oracleTransaction.transactionOptions = unbondedStakes.map(stake => {\n                const outcome = createNearOutcome(dataRequest, stake.outcome);\n\n                return {\n                    amount: '1',\n                    gas: halfGas.div(unbondedStakes.length).round(0, 0).toString(),\n                    methodName: 'dr_unstake',\n                    args: {\n                        request_id: stake.dataRequestId,\n                        resolution_round: stake.round,\n                        outcome,\n                        amount: stake.totalStake.toString(),\n                    },\n                }\n            });\n        }\n\n        // Only claim if we actually have something to claim otherwise this would just cost gas\n        const canClaim = dataRequest.loggedInAccountStakes.some(stake => isSameOutcome(stake.outcome, dataRequest.finalized_outcome));\n\n        if (canClaim) {\n            oracleTransaction.transactionOptions.push({\n                amount: STORAGE_BASE,\n                gas: halfGas.toString(),\n                methodName: 'dr_claim',\n                args: {\n                    request_id: dataRequest.id,\n                    account_id: accountId,\n                },\n            });\n        }\n\n        await batchSendTransactions(wallet, [oracleTransaction]);\n\n        return true;\n    }\n\n    async getStorageBalance(accountId: string): Promise<{ total: string, available: string, used: string }> {\n        try {\n            const wallet = await connectWallet();\n            const account = wallet.account();\n            if (!account) {\n                return {\n                    total: '0',\n                    available: '0',\n                    used: '0',\n                };\n            }\n\n            const storageBalance = await account.viewFunction(NEAR_ORACLE_CONTRACT_ID, 'storage_balance_of', {\n                account_id: accountId,\n            });\n\n            const used = new Big(storageBalance.total).sub(storageBalance.available);\n\n            return {\n                total: storageBalance.total,\n                available: storageBalance.available,\n                used: used.toString(),\n            }\n        } catch (error) {\n            console.error('[getStorageBalance -> NEAR]', error);\n            return {\n                total: '0',\n                available: '0',\n                used: '0',\n            }\n        }\n    }\n\n    async withdrawStorage(amount: string): Promise<boolean> {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'storage_withdraw', {\n            amount,\n            // @ts-ignore\n        }, NEAR_MAX_GAS, '1');\n\n        return true;\n    }\n\n    async getTokenInfo(contractId: string): Promise<TokenViewModel | undefined> {\n        try {\n            const wallet = await connectWallet();\n            const account = wallet.account();\n            const result = await account.viewFunction(contractId, 'ft_metadata', {});\n\n            return result;\n        } catch (error) {\n            console.error('[NearProvider-getTokenInfo]', error);\n            return undefined;\n        }\n    }\n\n    async getAppConfig(): Promise<AppConfig> {\n        const wallet = await connectWallet();\n        const config = await getLatestOracleConfig(wallet);\n        const token = await this.getTokenInfo(config.stake_token);\n\n        return {\n            nativeTokenDecimals: this.nativeTokenDecimals,\n            nativeTokenSymbol: this.nativeTokenSymbol,\n            stakeTokenDecimals: token?.decimals ?? 18,\n            stakeTokenSymbol: token?.symbol ?? config.stake_token,\n        };\n    }\n}\n","import format from \"date-fns/format\";\n\nexport function prettyFormatDate(date: Date): string {\n    return format(date, 'MMMM d, yyyy HH:mm:ss');\n}\n\n/**\n * converts nano seconds to milliseconds\n *\n * @export\n * @param {number} nanoSeconds\n * @return {number}\n */\nexport function nsToMs(nanoSeconds: number): number {\n    return nanoSeconds / 1000000;\n}\n\n/**\n * Formats a time number to a human readable format\n *\n * @export\n * @param {number} number\n * @param {('sec' | 'ms')} unit\n */\nexport function formatTimeToReadable(number: number, unit: 'sec' | 'ms' | 'ns') {\n    let s = 0;\n\n    if (unit === 'sec') {\n        s = number\n    } else if (unit === 'ns') {\n        s = Math.floor(number / 1000000000);\n    } else {\n        s = Math.floor(number / 1000)\n    }\n\n    let m = Math.floor(s / 60)\n    s = s % 60\n    let h = Math.floor(m / 60)\n    m = m % 60\n    const d = Math.floor(h / 24)\n    h = h % 24\n\n    return { days: d, hours: h, minutes: m, seconds: s }\n}\n","/**\n * Safely parse json without throwing any errors\n *\n * @export\n * @param {string} str\n * @return {(object | null)}\n */\nexport function parseJson<T>(str: string): T | null {\n    try {\n        return JSON.parse(str);\n    } catch (e) {\n        return null;\n    }\n}\n","export interface ClaimGraphData {\n    payout: string;\n    user_correct_stake: string;\n    total_incorrect_staked: string;\n    total_correct_bonded_staked: string;\n}\n\nexport interface ClaimViewModel {\n    payout: string;\n    userCorrectStake: string;\n}\n\nexport function transformToClaimViewModel(data: ClaimGraphData): ClaimViewModel {\n    return {\n        payout: data.payout,\n        userCorrectStake: data.user_correct_stake,\n    };\n}\n","import { getTokenInfo } from \"../services/providers/ProviderRegistry\";\nimport { TokenViewModel } from \"./Token\";\n\nexport interface OracleConfig {\n    blockHeight: string;\n    date: Date;\n    defaultChallengeWindowDuration: string;\n    finalArbitrator: string;\n    finalArbitratorInvokeAmount: string;\n    gov: string;\n    id: string;\n    maxOutcomes: number;\n    minInitialChallengeWindowDuration: string;\n    resolutionFeePercentage: number;\n    validityBond: string;\n    stakeToken: TokenViewModel;\n    bondToken: TokenViewModel;\n}\n\nexport interface OracleConfigGraphData {\n    block_height: string;\n    bond_token: string;\n    date: string;\n    default_challenge_window_duration: string;\n    final_arbitrator: string;\n    final_arbitrator_invoke_amount: string;\n    gov: string;\n    id: string;\n    max_outcomes: number;\n    min_initial_challenge_window_duration: string;\n    resolution_fee_percentage: number;\n    stake_token: string;\n    validity_bond: string;\n}\n\nexport async function transformToOracleConfig(data: OracleConfigGraphData): Promise<OracleConfig> {\n    const stakeToken = await getTokenInfo('near', data.stake_token);\n    const bondToken = await getTokenInfo('near', data.bond_token);\n\n    return {\n        blockHeight: data.block_height,\n        bondToken: bondToken,\n        date: new Date(Number(data.date)),\n        defaultChallengeWindowDuration: data.default_challenge_window_duration,\n        finalArbitrator: data.final_arbitrator,\n        finalArbitratorInvokeAmount: data.final_arbitrator_invoke_amount,\n        gov: data.gov,\n        id: data.id,\n        maxOutcomes: data.max_outcomes,\n        minInitialChallengeWindowDuration: data.min_initial_challenge_window_duration,\n        resolutionFeePercentage: data.resolution_fee_percentage,\n        stakeToken: stakeToken,\n        validityBond: data.validity_bond,\n    };\n}\n","import Big from \"big.js\";\nimport { getTokenInfo } from \"../services/providers/ProviderRegistry\";\nimport trans from \"../translation/trans\";\nimport { nsToMs } from \"../utils/dateUtils\";\nimport { parseJson } from \"../utils/jsonUtils\";\nimport { ClaimGraphData, ClaimViewModel, transformToClaimViewModel } from \"./Claim\";\nimport { Outcome, transformToOutcome } from \"./DataRequestOutcome\";\nimport { OracleConfig, OracleConfigGraphData, transformToOracleConfig } from \"./OracleConfig\";\nimport { ResolutionWindow, ResolutionWindowGraphData, transformToResolutionWindow } from \"./ResolutionWindow\";\nimport { TokenViewModel } from \"./Token\";\nimport { transformToUserStakesViewModel, UserStakeGraphData, UserStakeViewModel } from \"./UserStakes\";\n\nexport interface DataRequestSource {\n    endPoint: string;\n    sourcePath: string;\n}\n\nexport enum DataRequestType {\n    Arbitrator,\n    Api\n}\nexport interface DataRequestListItem {\n    id: string;\n    date: Date;\n    requestor: string;\n    finalized_outcome?: Outcome;\n    type: DataRequestType;\n}\n\nexport interface DataRequestViewModel extends DataRequestListItem {\n    loggedInAccountStakes: UserStakeViewModel[];\n    loggedInAccountClaim?: ClaimViewModel;\n    description?: string;\n    config: OracleConfig;\n    sources: DataRequestSource[];\n    outcomes?: string[];\n    resolutionWindows: ResolutionWindow[];\n    totalStaked: string;\n    fee: string;\n    finalized_outcome?: Outcome;\n    targetContract: string;\n    finalArbitratorTriggered: boolean;\n    settlementTime: Date;\n    tags: string[];\n    stakeToken: TokenViewModel;\n    bondToken: TokenViewModel;\n    totalCorrectStaked?: string;\n    totalIncorrectStaked?: string;\n    number_multiplier?: string;\n    data_type: 'String' | 'Number';\n}\n\nexport interface DataRequestGraphData {\n    account_stakes: UserStakeGraphData[];\n    id: string;\n    fee: string;\n    claim: ClaimGraphData | null;\n    block_height: string;\n    description: string | null;\n    settlement_time: string;\n    date: string;\n    final_arbitrator_triggered: boolean;\n    global_config_id: string;\n    initial_challenge_period: string;\n    total_correct_bonded_staked?: string;\n    total_incorrect_staked?: string;\n    outcomes: string[];\n    requestor: string;\n    target_contract: string;\n    finalized_outcome: string | null;\n    tags: string[] | null;\n    data_type: string;\n    whitelist_item: {\n        active: boolean;\n        code_base_url: string;\n        custom_fee: string;\n        interface_name: string;\n    },\n    sources: {\n        end_point: string;\n        source_path: string;\n    }[];\n    config: OracleConfigGraphData;\n    resolution_windows: ResolutionWindowGraphData[];\n}\n\ninterface NumberDataType {\n    Number: string;\n}\n\nexport function transformToDataRequestListItem(data: DataRequestGraphData): DataRequestListItem {\n    return {\n        id: data.id,\n        date: new Date(Number(data.date)),\n        requestor: data.requestor,\n        finalized_outcome: data.finalized_outcome ? transformToOutcome(data.finalized_outcome) : undefined,\n        type: data.sources.length ? DataRequestType.Api : DataRequestType.Arbitrator,\n    };\n}\n\nexport async function transformToDataRequestViewModel(data: DataRequestGraphData): Promise<DataRequestViewModel> {\n    const stakeToken = await getTokenInfo('near', data.config.stake_token);\n    const bondToken = await getTokenInfo('near', data.config.bond_token);\n\n    const resolutionWindows = await Promise.all(data.resolution_windows.map(rw => transformToResolutionWindow(rw, stakeToken)));\n    const totalStaked = resolutionWindows.reduce((prev, curr) => prev.add(curr.totalStaked), new Big(0));\n    const parsedDataType = parseJson<NumberDataType>(data.data_type);\n\n    return {\n        ...transformToDataRequestListItem(data),\n        config: await transformToOracleConfig(data.config),\n        settlementTime: new Date(nsToMs(Number(data.settlement_time))),\n        resolutionWindows: resolutionWindows,\n        description: data.description ?? undefined,\n        sources: data.sources.map((s) => ({\n            endPoint: s.end_point,\n            sourcePath: s.source_path,\n        })),\n        fee: data.fee ?? '0',\n        outcomes: data.outcomes,\n        totalStaked: totalStaked.toString(),\n        finalized_outcome: data.finalized_outcome ? transformToOutcome(data.finalized_outcome) : undefined,\n        targetContract: data.target_contract,\n        finalArbitratorTriggered: data.final_arbitrator_triggered,\n        tags: data.tags ?? [],\n        data_type: parsedDataType ? \"Number\" : \"String\",\n        number_multiplier: parsedDataType ? parsedDataType.Number : undefined,\n        stakeToken,\n        bondToken,\n        totalCorrectStaked: data.total_correct_bonded_staked,\n        totalIncorrectStaked: data.total_incorrect_staked,\n\n        loggedInAccountClaim: data.claim ? transformToClaimViewModel(data.claim) : undefined,\n        loggedInAccountStakes: data.account_stakes.map(ac => transformToUserStakesViewModel(ac, resolutionWindows)),\n    };\n}\n\nexport function canDataRequestBeFinalized(dataRequest: DataRequestViewModel): boolean {\n    // Already finalized\n    if (dataRequest.finalized_outcome) {\n        return false;\n    }\n\n    const currentResolutionWindow = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1];\n    if (!currentResolutionWindow) return false;\n\n    const now = new Date().getTime();\n\n    // Latest resolution window must end\n    if (currentResolutionWindow.endTime.getTime() >= now) {\n        return false;\n    }\n\n    if (!currentResolutionWindow.filled) {\n        // The window has not been filled\n        // If it's the first round we cannot finalize till it's completely filled\n        if (currentResolutionWindow.round === 0) {\n            return false;\n        }\n    }\n\n    // Window has been filled, end time is met and we are not the first round\n    // Meaning that the previous round was filled and ready to be finalized\n    return true;\n}\n\nexport function getDataRequestTypeTranslation(type: DataRequestType) {\n    if (type === DataRequestType.Arbitrator) {\n        return trans('dataRequest.type.arbitrator');\n    }\n\n    return trans('dataRequest.type.api');\n}\n","import { getTokenInfo } from \"../services/providers/ProviderRegistry\";\nimport { isSameOutcome, Outcome, transformToOutcome } from \"./DataRequestOutcome\";\nimport { OutcomeStake } from \"./OutcomeStake\";\nimport { ResolutionWindow } from \"./ResolutionWindow\";\nimport { TokenViewModel } from \"./Token\";\n\n/** @deprecated */\nexport interface UserStakes {\n    [accountId: string]: OutcomeStake[];\n}\n\nexport interface UserStakeViewModel {\n    outcome: Outcome;\n    accountId: string;\n    dataRequestId: string;\n    round: number;\n    totalStake: string;\n    bonded: boolean;\n}\n\nexport interface UserStakeGraphData {\n    account_id: string;\n    data_request_id: string;\n    id: string;\n    outcome: string;\n    round: number;\n    total_stake: string;\n    data_request?: {\n        finalized_outcome: string | null;\n        config: {\n            stake_token: string;\n        }\n    }\n    claim?: {\n        payout: string;\n    }\n}\n\nexport function transformToUserStakesViewModel(userStake: UserStakeGraphData, resolutionWindows: ResolutionWindow[] = []): UserStakeViewModel {\n    let bonded = false;\n    const stakedResolutionWindow = resolutionWindows[userStake.round];\n    const stakedOutcome = transformToOutcome(userStake.outcome);\n\n    if (stakedResolutionWindow && isSameOutcome(stakedResolutionWindow.bondedOutcome, stakedOutcome)) {\n        bonded = true;\n    }\n\n    return {\n        outcome: stakedOutcome,\n        accountId: userStake.account_id,\n        dataRequestId: userStake.data_request_id,\n        totalStake: userStake.total_stake,\n        round: userStake.round,\n        bonded,\n    }\n}\n\nexport async function transformToUserStakes(userStakes: UserStakeGraphData[], stakeToken?: TokenViewModel) {\n    // TODO: Investigate if this is still needed\n    const result: UserStakes = {};\n\n    for await (const userStake of userStakes) {\n        const currentOutcomeStakes = result[userStake.account_id] ?? [];\n        const finalStakeToken = stakeToken ?? await getTokenInfo('near', userStake.data_request?.config.stake_token ?? '');\n\n        currentOutcomeStakes.push({\n            outcome: transformToOutcome(userStake.outcome),\n            stake: userStake.total_stake,\n            round: userStake.round,\n            dataRequestId: userStake.data_request_id,\n            accountId: userStake.account_id,\n            finalizedOutcome: userStake.data_request?.finalized_outcome ? transformToOutcome(userStake.data_request.finalized_outcome) : undefined,\n            claimPayout: userStake.claim?.payout,\n            stakeToken: finalStakeToken,\n            bonded: false,\n        });\n\n        result[userStake.account_id] = currentOutcomeStakes;\n    }\n\n    return result;\n}\n","import Big from \"big.js\";\nimport { isSameOutcome, Outcome, transformToOutcome } from \"./DataRequestOutcome\";\nimport { OutcomeStake } from \"./OutcomeStake\";\nimport { TokenViewModel } from \"./Token\";\nimport { transformToUserStakes, UserStakeGraphData, UserStakes } from \"./UserStakes\";\n\n\nexport interface ResolutionWindow {\n    round: number;\n    bondedOutcome?: Outcome;\n    outcomeStakes: OutcomeStake[];\n    endTime: Date;\n    bondSize: string;\n    totalStaked: string;\n    filled: boolean;\n    userStakes: UserStakes;\n    winningOutcomeStake?: OutcomeStake;\n}\n\nexport interface ResolutionWindowGraphData {\n    block_height: string;\n    bond_size: string;\n    date: string;\n    dr_id: string;\n    end_time: string;\n    id: string;\n    round: number;\n    bonded_outcome: null | string;\n    outcome_stakes: {\n        data_request_id: string;\n        id: string;\n        round: number;\n        total_stake: string;\n        outcome: string;\n    }[];\n    user_stakes: UserStakeGraphData[];\n}\n\nexport async function transformToResolutionWindow(data: ResolutionWindowGraphData, stakeToken?: TokenViewModel): Promise<ResolutionWindow> {\n    let totalStaked = new Big(0);\n    let highestOutcomeStake: OutcomeStake | undefined;\n    const bondedOutcome = data.bonded_outcome ? transformToOutcome(data.bonded_outcome) : undefined;\n\n    const outcomeStakes: OutcomeStake[] = data.outcome_stakes.map((os) => {\n        totalStaked = totalStaked.add(os.total_stake);\n        const outcome = transformToOutcome(os.outcome);\n\n        const outcomeStake: OutcomeStake = {\n            outcome,\n            stake: os.total_stake,\n            dataRequestId: os.data_request_id,\n            round: os.round,\n            bonded: bondedOutcome ? isSameOutcome(outcome, bondedOutcome) : false,\n            stakeToken: stakeToken ?? {\n                contractId: '',\n                decimals: 18,\n                name: '',\n                symbol: '',\n            }\n        };\n\n        // Find the highest stake\n        if (highestOutcomeStake) {\n            const highestStake = new Big(highestOutcomeStake.stake);\n\n            if (highestStake.lt(outcomeStake.stake)) {\n                highestOutcomeStake = outcomeStake;\n            }\n        } else {\n            highestOutcomeStake = outcomeStake;\n        }\n\n        return outcomeStake;\n    });\n\n    return {\n        bondSize: data.bond_size,\n        endTime: new Date(Number(data.end_time) / 1000000),\n        outcomeStakes,\n        filled: highestOutcomeStake?.stake ? new Big(highestOutcomeStake.stake).eq(data.bond_size) : false,\n        totalStaked: totalStaked.toString(),\n        round: data.round,\n        userStakes: await transformToUserStakes(data.user_stakes, stakeToken),\n        bondedOutcome,\n        winningOutcomeStake: highestOutcomeStake,\n    };\n}\n","import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { API_URL } from '../config';\n\nconst cache = new InMemoryCache();\nconst link = createHttpLink({\n    uri: API_URL,\n});\n\nexport const graphqlClient = new ApolloClient({\n    cache,\n    link,\n\n    defaultOptions: {\n        watchQuery: {\n            fetchPolicy: 'cache-and-network',\n        }\n    }\n});\n","import gql from \"graphql-tag\";\nimport { DataRequestGraphData, DataRequestListItem, transformToDataRequestListItem, transformToDataRequestViewModel } from \"../models/DataRequest\";\nimport { Pagination } from \"../models/Pagination\";\nimport { graphqlClient } from \"./GraphQLService\";\nexport interface DataRequestFilters {\n    onlyArbitratorRequests: boolean;\n    requestor?: string;\n}\n\ninterface DataRequestPagination {\n    limit: number;\n    offset: number;\n}\n\nexport async function getAllDataRequests({\n    limit,\n    offset,\n}: DataRequestPagination, {\n    onlyArbitratorRequests,\n    requestor,\n}: DataRequestFilters): Promise<Pagination<DataRequestListItem>> {\n    try {\n        const response = await graphqlClient.query({\n            fetchPolicy: 'network-only',\n            query: gql`\n                query GetAllDataRequests($limit: Int, $offset: Int, $onlyArbitratorRequests: Boolean, $requestor: String) {\n                    dataRequests: getDataRequests(limit: $limit, offset: $offset, onlyArbitratorRequests: $onlyArbitratorRequests, requestor: $requestor) {\n                        total\n                        items {\n                            id\n                            date\n                            requestor\n                            finalized_outcome\n                            sources {\n                                end_point\n                                source_path\n                            }\n                        }\n                    }\n                }\n            `,\n            variables: {\n                limit,\n                offset,\n                onlyArbitratorRequests,\n                requestor,\n            }\n        });\n\n        const paginatedDataRequests: DataRequestListItem[] = response.data.dataRequests.items.map((dr: DataRequestGraphData) => transformToDataRequestListItem(dr));\n\n        return {\n            total: response.data.dataRequests.total,\n            items: paginatedDataRequests,\n        };\n    } catch (error) {\n        console.error('[getAllDataRequests]', error);\n\n        return {\n            total: 0,\n            items: [],\n        };\n    }\n}\n\nexport async function getDataRequestById(id: string, accountId?: string) {\n    try {\n        const response = await graphqlClient.query({\n            fetchPolicy: 'network-only',\n            query: gql`\n                query GetDataRequest($id: String!, $accountId: String) {\n                    dataRequest: getDataRequest(id: $id) {\n                        block_height\n                        date\n                        final_arbitrator_triggered\n                        global_config_id\n                        total_incorrect_staked\n                        total_correct_bonded_staked\n                        id\n                        claim(accountId: $accountId) {\n                            payout\n                            user_correct_stake\n                        }\n                        initial_challenge_period\n                        outcomes\n                        requestor\n                        target_contract\n                        finalized_outcome\n                        description\n                        settlement_time\n                        tags\n                        data_type\n                        fee\n                        account_stakes(accountId: $accountId) {\n                            outcome\n                            total_stake\n                            round\n                            account_id\n                            data_request_id\n                        }\n                        whitelist_item {\n                            active\n                            code_base_url\n                            contract_entry\n                            custom_fee\n                            interface_name\n                        }\n                        sources {\n                            end_point\n                            source_path\n                        }\n                        config {\n                            block_height\n                            bond_token\n                            date\n                            default_challenge_window_duration\n                            final_arbitrator\n                            final_arbitrator_invoke_amount\n                            gov\n                            id\n                            max_outcomes\n                            min_initial_challenge_window_duration\n                            resolution_fee_percentage\n                            stake_token\n                            validity_bond\n                        }\n                        resolution_windows {\n                            block_height\n                            bond_size\n                            bonded_outcome\n                            date\n                            dr_id\n                            end_time\n                            id\n                            outcome_stakes {\n                                data_request_id\n                                id\n                                round\n                                total_stake\n                                outcome\n                            }\n                            round\n                            user_stakes {\n                                account_id\n                                data_request_id\n                                id\n                                outcome\n                                round\n                                total_stake\n                            }\n                        }\n                    }\n                }\n            `,\n            variables: {\n                id,\n                accountId,\n            }\n        });\n\n        return transformToDataRequestViewModel(response.data.dataRequest);\n    } catch(error) {\n        console.error('[getDataRequestById]', error);\n        return null;\n    }\n}\n\nexport async function doesDataRequestExists(id: string): Promise<boolean> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                query DataRequestExists($id: String!) {\n                    request: getDataRequest(id: $id) {\n                        id\n                    }\n                }\n            `,\n            variables: {\n                id,\n            }\n        });\n\n        if (!response.data.request || !response.data.request.id) {\n            return false;\n        }\n\n        return true;\n    } catch (error) {\n        console.error('[doesDataRequestExists]', error);\n        return false;\n    }\n}\n\n","import { Pagination } from \"../models/Pagination\";\nimport { routePaths } from \"../routes\";\nimport { doesDataRequestExists } from \"./DataRequestService\";\n\nexport interface SearchResult {\n    url: string;\n}\n\nexport async function search(query: string): Promise<Pagination<SearchResult>> {\n    try {\n        if (isNaN(Number(query))) {\n            return {\n                items: [{\n                    url: routePaths.account('near', query),\n                }],\n                total: 1,\n            };\n        }\n\n        const dataRequest = await doesDataRequestExists(query);\n\n        if (dataRequest) {\n            return {\n                items: [{\n                    url: routePaths.dataRequestDetail('near', query),\n                }],\n                total: 1,\n            };\n        }\n\n        return {\n            items: [],\n            total: 0,\n        };\n    } catch (error) {\n        return {\n            items: [],\n            total: 0,\n        };\n    }\n}\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router';\nimport SearchForm from '../../containers/SearchForm';\nimport { routePaths } from '../../routes';\nimport { search } from '../../services/SearchService';\n\ninterface Props {\n    className?: string;\n    inputClassName?: string;\n}\n\nexport default function SearchConnector({\n    className,\n    inputClassName,\n}: Props) {\n    const history = useHistory();\n    const handleSearch = useCallback(async (query) => {\n        const result = await search(query);\n\n        if (result.total === 0) {\n            history.push(routePaths.search(query));\n            return;\n        }\n\n        history.push(result.items[0].url);\n    }, [history]);\n\n    return (\n        <SearchForm\n            onSearch={handleSearch}\n            className={className}\n            inputClassName={inputClassName}\n        />\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\nimport { default as MuiButton } from '@material-ui/core/Button';\n\nimport s from './Button.module.scss';\n\ninterface Props {\n    className?: string;\n    disabled?: boolean;\n    onClick?: () => void;\n}\n\nexport default function Button({\n    children,\n    className,\n    disabled = false,\n    onClick = () => {},\n}: PropsWithChildren<Props>) {\n    return (\n        <MuiButton\n            className={classnames(className, s.button)}\n            variant=\"contained\"\n            onClick={onClick}\n            disabled={disabled}\n        >\n            {children}\n        </MuiButton>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\nimport { default as MuiDialog } from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport Button from '../../components/Button';\n\nimport s from './Dialog.module.scss';\nimport trans from '../../translation/trans';\n\ninterface Props {\n    title: string;\n    open: boolean;\n    isInfoDialog?: boolean;\n    onRequestClose: () => void;\n    onSubmitClick?: () => void;\n    canSubmit?: boolean;\n    hideButtons?: boolean;\n    paperClassName?: string;\n}\n\nexport default function Dialog({\n    title,\n    children,\n    open,\n    isInfoDialog = false,\n    onRequestClose,\n    onSubmitClick = () => {},\n    canSubmit = true,\n    hideButtons = false,\n    paperClassName = '',\n}: PropsWithChildren<Props>) {\n    return (\n        <MuiDialog open={open} classes={{ paper: classnames(s.paper, paperClassName) }}>\n            <DialogTitle className={s.title}>\n                {title}\n            </DialogTitle>\n            <DialogContent className={s.content}>\n                {children}\n            </DialogContent>\n            {isInfoDialog && (\n                <DialogActions>\n                    <Button className={s.cancelButton} onClick={onRequestClose}>\n                        {trans('global.action.close')}\n                    </Button>\n                </DialogActions>\n            )}\n\n            {!hideButtons && (\n                <DialogActions>\n                    <Button className={s.cancelButton} onClick={onRequestClose}>\n                        {trans('global.action.cancel')}\n                    </Button>\n                    <Button disabled={!canSubmit} className={s.confirmButton} onClick={onSubmitClick}>\n                        {trans('global.action.submit')}\n                    </Button>\n                </DialogActions>\n            )}\n        </MuiDialog>\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport TextField from '@material-ui/core/TextField';\n\nimport s from './Input.module.scss';\n\nexport interface InputProps {\n    label?: string;\n    className?: string;\n    type?: 'text' | 'number';\n    onChange?: (value: string) => void;\n    value?: string;\n    error?: string;\n    endAdornment?: any;\n}\n\nexport default function Input({\n    className,\n    label,\n    type,\n    onChange = () => {},\n    value,\n    error,\n    endAdornment,\n}: InputProps) {\n    return (\n        <TextField\n            label={label}\n            className={classnames(className, s.input)}\n            type={type}\n            onChange={(event) => onChange(event.currentTarget.value)}\n            value={value}\n            error={!!error}\n            helperText={error}\n            InputProps={{\n                endAdornment,\n            }}\n        />\n    );\n}\n","import React from 'react';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport Input, { InputProps } from '../../components/Input/Input';\nimport trans from '../../translation/trans';\n\ninterface Props extends InputProps {\n    showMax?: boolean;\n    onMaxClick?: () => void,\n}\n\nexport default function NumberInput({\n    showMax = false,\n    onMaxClick = () => {},\n    ...props\n}: Props) {\n    return (\n        <Input\n            {...props}\n            type=\"number\"\n            endAdornment={\n                <>\n                    {showMax && (\n                        <InputAdornment position=\"end\">\n                            <Button onClick={onMaxClick}>\n                                {trans('global.max')}\n                            </Button>\n                        </InputAdornment>\n                    )}\n                </>\n            }\n        />\n    );\n}\n","import React, { useCallback, useState } from 'react';\nimport Dialog from '../../compositions/Dialog';\nimport { Account } from '../../models/Account';\nimport trans from '../../translation/trans';\nimport createDefaultStorageManagerFormValues, { StorageManagerFormValues } from './services/createDefaultStorageManagerFormValues';\nimport validateStorageManagerFormValues from './services/validateStorageManagerFormValues';\nimport { formatToken, toToken } from '../../utils/tokenUtils';\n\nimport s from './StorageManagerDialog.module.scss';\nimport NumberInput from '../../compositions/NumberInput';\nimport { AppConfig } from '../../models/AppConfig';\nimport Big from 'big.js';\n\ninterface Props {\n    open: boolean;\n    account: Account;\n    appConfig: AppConfig;\n    onRequestClose: () => void;\n    onSubmit: (formValues: StorageManagerFormValues) => void;\n}\n\nexport default function StorageManagerDialog({\n    open,\n    account,\n    appConfig,\n    onRequestClose,\n    onSubmit,\n}: Props) {\n    const [formValues, setFormValues] = useState(createDefaultStorageManagerFormValues());\n\n    const errors = validateStorageManagerFormValues(formValues, account);\n\n    function handleAmountChange(amount: string) {\n        if (amount && new Big(amount).lt(0)) {\n            return;\n        }\n\n        setFormValues({\n            amount: amount ? toToken(amount, appConfig.nativeTokenDecimals) : '0',\n            amountFormatted: amount ? amount : '',\n        });\n    }\n\n    const handleMaxClick = useCallback(() => {\n        setFormValues({\n            amount: account.storageAvailable,\n            amountFormatted: formatToken(account.storageAvailable, appConfig.nativeTokenDecimals, 4),\n        });\n    }, [account, appConfig]);\n\n    return (\n        <Dialog\n           open={open}\n           onRequestClose={onRequestClose}\n           title={trans('storageManagerDialog.title')}\n           onSubmitClick={() => onSubmit(formValues)}\n           canSubmit={errors.canSubmit}\n        >\n            <form>\n                <p>\n                    {trans('storageManagerDialog.description', { nativeToken: appConfig.nativeTokenSymbol })}\n                </p>\n                <p>\n                    {trans('storageManagerDialog.label.amountAvailable', {\n                        amount: formatToken(account.storageAvailable, appConfig.nativeTokenDecimals, 4),\n                        nativeToken: appConfig.nativeTokenSymbol,\n                    })}\n                </p>\n                <div className={s.formItem}>\n                    <NumberInput\n                        label={trans('storageManagerDialog.label.withdrawAmount', { nativeToken: appConfig.nativeTokenSymbol })}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleAmountChange}\n                        type=\"number\"\n                        error={errors.amount}\n                        showMax\n                        onMaxClick={handleMaxClick}\n                    />\n                </div>\n            </form>\n        </Dialog>\n    );\n}\n","export interface StorageManagerFormValues {\n    amountFormatted: string;\n    amount: string;\n}\n\nexport default function createDefaultStorageManagerFormValues(): StorageManagerFormValues {\n    return {\n        amount: '0',\n        amountFormatted: '0',\n    }\n}\n","import Big from \"big.js\";\nimport { Account } from \"../../../models/Account\";\nimport trans from \"../../../translation/trans\";\nimport { StorageManagerFormValues } from \"./createDefaultStorageManagerFormValues\";\n\ninterface StorageManagerErrors {\n    amount: string;\n    canSubmit: boolean;\n}\n\nexport default function validateStorageManagerFormValues(formValues: StorageManagerFormValues, account: Account): StorageManagerErrors {\n    const errors: StorageManagerErrors = {\n        amount: '',\n        canSubmit: true,\n    }\n\n    if (formValues.amount) {\n        const amountToWithdraw = new Big(formValues.amount);\n\n        if (amountToWithdraw.gt(account.storageAvailable)) {\n            errors.amount = trans('storageManagerDialog.errors.withdrawAmount.notEnoughToWithdraw');\n            errors.canSubmit = false;\n        }\n\n        if (amountToWithdraw.lte(0)) {\n            errors.canSubmit = false;\n        }\n    }\n\n    return errors;\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { DataRequestViewModel } from '../../models/DataRequest';\n\nexport type DialogsState = Readonly<{\n    stakeDialog: {\n        open: boolean;\n        dataRequest?: DataRequestViewModel;\n    },\n    unstakeDialog: {\n        open: boolean;\n        dataRequest?: DataRequestViewModel;\n    },\n    storageManager: {\n        open: boolean;\n    }\n}>;\n\nconst initialState: DialogsState = {\n    stakeDialog: {\n        open: false,\n    },\n    unstakeDialog: {\n        open: false,\n    },\n    storageManager: {\n        open: false,\n    }\n};\n\nconst dialogsSlice = createSlice({\n    initialState,\n    name: 'dialogs',\n    reducers: {\n        setStakeDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['stakeDialog']>): DialogsState {\n            return ({\n                ...state,\n                stakeDialog: action.payload,\n            });\n        },\n\n        setUnstakeDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['unstakeDialog']>): DialogsState {\n            return ({\n                ...state,\n                unstakeDialog: action.payload,\n            });\n        },\n\n        setStorageManagerDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['storageManager']>): DialogsState {\n            return {\n                ...state,\n                storageManager: action.payload,\n            };\n        }\n    },\n});\n\nexport const {\n    setStakeDialogOpen,\n    setUnstakeDialogOpen,\n    setStorageManagerDialogOpen,\n} = dialogsSlice.actions;\n\nexport default dialogsSlice.reducer;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport StorageManagerDialog from '../../containers/StorageManagerDialog';\nimport { StorageManagerFormValues } from '../../containers/StorageManagerDialog/services/createDefaultStorageManagerFormValues';\nimport { setStorageManagerDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\nimport { withdrawStorage } from '../../services/providers/ProviderRegistry';\n\nexport default function StorageManagerDialogConnector() {\n    const open = useSelector((store: Reducers) => store.dialogs.storageManager.open);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n    const dispatch = useDispatch();\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setStorageManagerDialogOpen({\n            open: false,\n        }));\n    }, [dispatch]);\n\n    const handleSumbit = useCallback((formValues: StorageManagerFormValues) => {\n        withdrawStorage('near', formValues.amount);\n    }, []);\n\n    if (!account) return null;\n\n    return (\n        <StorageManagerDialog\n            open={open}\n            appConfig={appConfig}\n            account={account}\n            onRequestClose={handleRequestClose}\n            onSubmit={handleSumbit}\n        />\n    );\n}\n","import React, { FormEvent, useState } from 'react';\nimport MuiMenu from '@material-ui/core/Menu';\nimport MuiMenuItem from '@material-ui/core/MenuItem';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport IconButton from '@material-ui/core/IconButton';\nimport { NavLink, Link, useHistory } from 'react-router-dom';\nimport FakeLinkButton from '../../components/FakeLinkButton';\nimport SearchConnector from '../../connectors/SearchConnector';\nimport { Account } from '../../models/Account';\nimport { routePaths, routes } from '../../routes';\nimport trans from '../../translation/trans';\nimport { formatToken } from '../../utils/tokenUtils';\n\nimport s from './Menu.module.scss';\nimport StorageManagerDialogConnector from '../../connectors/StorageManagerDialogConnector';\nimport { AppConfig } from '../../models/AppConfig';\n\ninterface Props {\n    account?: Account;\n    appConfig: AppConfig;\n    onLoginClick: () => void;\n    onLogoutClick: () => void;\n    onStorageManagerClick: () => void;\n}\n\nexport default function Menu({\n    account,\n    appConfig,\n    onLoginClick,\n    onLogoutClick,\n    onStorageManagerClick,\n}: Props) {\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element | null>(null);\n    const history = useHistory();\n\n    function handleMenuClick(event: FormEvent) {\n        setMenuAnchorEl(event.currentTarget);\n    }\n\n    function handleMenuClose() {\n        setMenuAnchorEl(null);\n    }\n\n    function handleLogoutClick() {\n        handleMenuClose();\n        onLogoutClick();\n    }\n\n    function handleStorageManagerClick() {\n        handleMenuClose();\n        onStorageManagerClick();\n    }\n\n    function handleAccountClick() {\n        if (!account) return;\n        handleMenuClose();\n\n        history.push(routePaths.account(account.providerId, account.accountId));\n    }\n\n    return (\n        <header className={s.root}>\n            <div className={s.menu}>\n                <div className={s.topBar}>\n                    <div>\n                        <Link to={routePaths.root()} className={s.logoWrapper}>\n                            <div className={s.logo} />\n                        </Link>\n                    </div>\n                    <div>\n                        <SearchConnector />\n                        <StorageManagerDialogConnector />\n                    </div>\n                </div>\n                <div className={s.bottomBar}>\n                    <ul className={s.menuItems}>\n                        {routes.map(route => {\n                            if (!route.inNavigation) {\n                                return null;\n                            }\n\n                            return (\n                                <li className={s.menuItem} key={route.key}>\n                                    <NavLink\n                                        className={s.menuLink}\n                                        activeClassName={s['menuLink--active']}\n                                        exact\n                                        to={route.navPath}\n                                    >\n                                        {route.label}\n                                    </NavLink>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                    <div className={s.rightMenu}>\n                        <ul className={s.accountLinks}>\n                            {account && (\n                                <>\n                                    <li className={s.menuItem}>\n                                        <Link className={s.link} to={routePaths.account(account.providerId, account.accountId)}>{account.accountId}</Link>\n                                    </li>\n                                    <li className={s.menuItem}>\n                                        {formatToken(account.balance, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}\n                                    </li>\n                                </>\n                            )}\n                        </ul>\n                        <div className={s.moreMenu}>\n                            {!account && (\n                                <FakeLinkButton onClick={onLoginClick}>\n                                    {trans('menu.label.login')}\n                                </FakeLinkButton>\n                            )}\n\n                            {account && (\n                                <>\n                                    <IconButton onClick={handleMenuClick} className={s.iconButton}>\n                                        <MoreVertIcon />\n                                    </IconButton>\n                                    <MuiMenu anchorEl={menuAnchorEl} keepMounted open={Boolean(menuAnchorEl)} onClose={handleMenuClose}>\n                                        <MuiMenuItem className={s.mobileOnly} onClick={handleAccountClick}>{account.accountId}</MuiMenuItem>\n                                        <MuiMenuItem className={s.mobileOnly} disabled>{formatToken(account.balance, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</MuiMenuItem>\n                                        <MuiMenuItem onClick={handleStorageManagerClick}>{trans('menu.label.storageManager')}</MuiMenuItem>\n                                        <MuiMenuItem onClick={handleLogoutClick}>{trans('menu.label.logout')}</MuiMenuItem>\n                                    </MuiMenu>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </header>\n    );\n}\n","import { parseJson } from \"../utils/jsonUtils\"\n\ninterface FixedCustomFee {\n    fee: string;\n    type: 'fixed';\n}\n\ninterface MultiplierCustomFee {\n    multiplier: number;\n    type: 'multiplier';\n}\n\ninterface MultiplierCustomFeeGraphData {\n    Multiplier: number;\n}\n\ninterface FixedCustomFeeGraphData {\n    Fixed: string;\n}\n\nexport interface WhitelistItemGraphData {\n    interface_name: string;\n    contract_entry: string;\n    custom_fee: string;\n    code_base_url: string;\n    active: boolean;\n}\n\nexport interface WhitelistItemViewModel {\n    interfaceName: string;\n    contractEntry: string;\n    codeBaseUrl: string;\n    active: boolean;\n    customFee?: FixedCustomFee | MultiplierCustomFee;\n}\n\nexport function transformToWhitelistItemViewModel(data: WhitelistItemGraphData): WhitelistItemViewModel {\n    const parsedCustomFee = parseJson<FixedCustomFeeGraphData | MultiplierCustomFeeGraphData>(data.custom_fee);\n    let customFee: WhitelistItemViewModel['customFee'];\n\n    if (parsedCustomFee) {\n        if ('Fixed' in parsedCustomFee) {\n            customFee = {\n                fee: parsedCustomFee.Fixed,\n                type: 'fixed',\n            }\n        } else {\n            customFee = {\n                multiplier: parsedCustomFee.Multiplier,\n                type: 'multiplier',\n            }\n        }\n    }\n\n    return {\n        active: data.active,\n        codeBaseUrl: data.code_base_url,\n        contractEntry: data.contract_entry,\n        customFee,\n        interfaceName: data.interface_name,\n    }\n}\n","import gql from \"graphql-tag\";\nimport { AccountInfo } from \"../models/Account\";\nimport { transformToWhitelistItemViewModel } from \"../models/WhitelistItem\";\nimport { graphqlClient } from \"./GraphQLService\";\nimport { getProviderStorageBalance } from \"./providers/ProviderRegistry\";\n\nexport async function getAccountInfo(accountId: string, providerId: string = 'near'): Promise<AccountInfo> {\n    try {\n        const storageBalanceRequest = getProviderStorageBalance(providerId, accountId);\n        const response = await graphqlClient.query({\n            query: gql`\n                    query AccountInfo($accountId: String!) {\n                        accountInfo: getAccountInfo(accountId: $accountId) {\n                            active_staking\n                            total_staked\n                            total_claimed\n                            whitelist_item {\n                                active\n                                code_base_url\n                                contract_entry\n                                custom_fee\n                                interface_name\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n            }\n        });\n\n        const data = response.data.accountInfo;\n        const storageBalance = await storageBalanceRequest;\n\n        return {\n            activeStaking: data.active_staking,\n            totalStaked: data.total_staked,\n            totalClaimed: data.total_claimed,\n            storageAvailable: storageBalance.available,\n            storageTotal: storageBalance.total,\n            storageUsed: storageBalance.used,\n            whitelistItem: data.whitelist_item ? transformToWhitelistItemViewModel(data.whitelist_item) : undefined,\n        }\n    } catch (error) {\n        console.error('[getAccountInfo]', error);\n\n        return {\n            activeStaking: '0',\n            totalStaked: '0',\n            totalClaimed: '0',\n            storageAvailable: '0',\n            storageTotal: '0',\n            storageUsed: '0',\n        }\n    }\n}\n","import Big from \"big.js\";\nimport { Outcome, OutcomeType } from \"./DataRequestOutcome\";\nimport { TokenViewModel } from \"./Token\";\n\nexport interface OutcomeStake {\n    outcome: Outcome;\n    stake: string;\n    round: number;\n    bonded: boolean;\n    dataRequestId: string;\n    accountId?: string;\n    finalizedOutcome?: Outcome;\n    claimPayout?: string;\n    stakeToken: TokenViewModel;\n}\n\nexport function combineOutcomeStakes(outcomeStakes: OutcomeStake[] = []): OutcomeStake[] {\n    const result = new Map<string, OutcomeStake>();\n\n    outcomeStakes.forEach((outcomeStake) => {\n        let answer = '';\n\n        if (outcomeStake.outcome.type === OutcomeType.Invalid) {\n            answer = 'Invalid';\n        } else {\n            answer = `Answer(${outcomeStake.outcome.answer})`;\n        }\n\n        const internalId = `${answer}_${outcomeStake.dataRequestId}`;\n        const currentItem = result.get(internalId);\n\n        if (currentItem) {\n            let stake = new Big(currentItem.stake);\n            stake = stake.add(outcomeStake.stake);\n            result.set(internalId, {\n                ...currentItem,\n                stake: stake.toString(),\n            });\n        } else {\n            result.set(internalId, outcomeStake);\n        }\n    });\n\n    return Array.from(result.values());\n}\n","import gql from \"graphql-tag\";\nimport { combineOutcomeStakes, OutcomeStake } from \"../models/OutcomeStake\";\nimport { Pagination } from \"../models/Pagination\";\nimport { transformToUserStakes, UserStakes } from \"../models/UserStakes\";\nimport { graphqlClient } from \"./GraphQLService\";\n\nasync function getUserStakesByRequestIdAndAccountId(requestId: string, accountId: string) {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakesRequestAndAccount($requestId: String!, $accountId: String!) {\n                        stakes: getUserStakesByRequestId(id: $requestId, accountId: $accountId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                            data_request {\n                                config {\n                                    stake_token\n                                }\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                requestId,\n                accountId,\n            }\n        });\n\n        const userStakes = transformToUserStakes(response.data.stakes);\n        return userStakes;\n    } catch (error) {\n        console.error('[getUserStakesByRequestIdAndAccountId]', error);\n        return {};\n    }\n}\n\nexport async function getUserStakesByRequestId(requestId: string, accountId?: string): Promise<UserStakes> {\n    try {\n        if (accountId) {\n            return getUserStakesByRequestIdAndAccountId(requestId, accountId);\n        }\n\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakes($requestId: String!) {\n                        stakes: getUserStakesByRequestId(id: $requestId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                            data_request {\n                                config {\n                                    stake_token\n                                }\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                requestId,\n            }\n        });\n\n        const userStakes = transformToUserStakes(response.data.stakes);\n        return userStakes;\n    } catch(error) {\n        console.error('[getUserStakesByRequestId]', error);\n        return {};\n    }\n}\n\nexport interface UserStakesForAccountFilters {\n    limit: number;\n    offset: number;\n}\n\nexport async function getUserStakesByAccountId(accountId: string, filters: UserStakesForAccountFilters): Promise<Pagination<OutcomeStake>> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakesAccount($accountId: String!, $limit: Int, $offset: Int) {\n                        stakes: getUserStakes(accountId: $accountId, limit: $limit, offset: $offset) {\n                            items {\n                                data_request_id\n                                account_id\n                                id\n                                outcome\n                                round\n                                total_stake\n                                data_request {\n                                    finalized_outcome\n                                    config {\n                                        stake_token\n                                    }\n                                }\n                            }\n                            total\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n                limit: filters.limit,\n                offset: filters.offset,\n            }\n        });\n\n        const items = await transformToUserStakes(response.data.stakes.items);\n\n        return {\n            items: items[accountId],\n            total: response.data.stakes.total,\n        }\n    } catch (error) {\n        console.error('[getUserStakesByAccountId]', error);\n        return {\n            items: [],\n            total: 0,\n        };\n    }\n}\n\n\nexport async function getUnclaimedStakesByAccountId(accountId: string): Promise<OutcomeStake[]> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUnclaimedStakesAccount($accountId: String!) {\n                        stakes: getUnclaimedStakes(accountId: $accountId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                            data_request {\n                                finalized_outcome\n                                config {\n                                    stake_token\n                                }\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n            }\n        });\n\n        const items = await transformToUserStakes(response.data.stakes);\n        return combineOutcomeStakes(items[accountId]);\n    } catch (error) {\n        console.error('[getUnclaimedStakesByAccountId]', error);\n        return [];\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Account, AccountInfo } from '../../models/Account';\nimport { DataRequestListItem } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\n\nexport type AccountState = Readonly<{\n    account?: Account;\n    accountDetail: {\n        account?: Account;\n        info: AccountInfo;\n        unclaimedStakes: OutcomeStake[];\n\n        accountRequests: DataRequestListItem[];\n        accountRequestsTotal: number;\n\n        accountStakes: OutcomeStake[];\n        accountStakesTotal: number;\n    };\n    error?: string[];\n    loading: boolean;\n}>;\n\nconst initialState: AccountState = {\n    loading: false,\n    accountDetail: {\n        account: undefined,\n        info: {\n            activeStaking: '0',\n            totalStaked: '0',\n            totalClaimed: '0',\n            storageAvailable: '0',\n            storageTotal: '0',\n            storageUsed: '0',\n        },\n        accountStakes: [],\n        accountStakesTotal: 0,\n        accountRequests: [],\n        accountRequestsTotal: 0,\n        unclaimedStakes: [],\n    }\n};\n\nconst accountSlice = createSlice({\n    initialState,\n    name: 'account',\n    reducers: {\n        setAccountErrors(state: AccountState, action: PayloadAction<string[]>): AccountState {\n            return ({\n                ...state,\n                error: action.payload,\n            });\n        },\n        setAccountLoading(state: AccountState, action: PayloadAction<boolean>): AccountState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n        setAccount(state: AccountState, action: PayloadAction<Account | undefined>): AccountState {\n            return ({\n                ...state,\n                account: action.payload,\n            });\n        },\n        setAccountDetail(state: AccountState, action: PayloadAction<Account>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    account: action.payload,\n                },\n            });\n        },\n        setAccountStakes(state: AccountState, action: PayloadAction<OutcomeStake[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountStakes: action.payload,\n                },\n            });\n        },\n        setAccountStakesTotal(state: AccountState, action: PayloadAction<number>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountStakesTotal: action.payload,\n                },\n            });\n        },\n        setAccountInfo(state: AccountState, action: PayloadAction<AccountInfo>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    info: action.payload,\n                },\n            });\n        },\n        setAccountUnclaimedStakes(state: AccountState, action: PayloadAction<OutcomeStake[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    unclaimedStakes: action.payload,\n                },\n            });\n        },\n        setAccountRequests(state: AccountState, action: PayloadAction<DataRequestListItem[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountRequests: action.payload,\n                },\n            });\n        },\n        setAccountRequestsTotal(state: AccountState, action: PayloadAction<number>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountRequestsTotal: action.payload,\n                },\n            });\n        },\n    },\n});\n\nexport const {\n    setAccount,\n    setAccountErrors,\n    setAccountLoading,\n    setAccountDetail,\n    setAccountStakes,\n    setAccountStakesTotal,\n    setAccountInfo,\n    setAccountUnclaimedStakes,\n    setAccountRequests,\n    setAccountRequestsTotal,\n} = accountSlice.actions;\n\nexport default accountSlice.reducer;\n","import { DEFAULT_PAGINATION_LIMIT } from \"../../config\";\nimport { getAccountInfo } from \"../../services/AccountService\";\nimport { getAllDataRequests } from \"../../services/DataRequestService\";\nimport { getAccountInfoWithProvider, getLoggedInAccount, loginWithProvider, logoutWithProvider } from \"../../services/providers/ProviderRegistry\";\nimport { getUnclaimedStakesByAccountId, getUserStakesByAccountId } from \"../../services/UserStakeService\";\nimport { setAccount, setAccountDetail, setAccountInfo, setAccountLoading, setAccountRequests, setAccountRequestsTotal, setAccountStakes, setAccountStakesTotal, setAccountUnclaimedStakes } from \"./account\";\n\nexport function loadLoggedInAccount() {\n    return async (dispatch: Function) => {\n        const account = await getLoggedInAccount();\n        if (!account) return;\n\n        dispatch(setAccount(account));\n    };\n}\n\nexport function loadAccount(providerId: string, accountId: string) {\n    return async (dispatch: Function) => {\n        const account = await getAccountInfoWithProvider(providerId, accountId);\n\n        if (!account) {\n            return;\n        }\n\n        const accountInfo = await getAccountInfo(accountId);\n        dispatch(setAccountDetail(account));\n        dispatch(setAccountInfo(accountInfo));\n    };\n}\n\n\nexport function loadAccountStakes(page: number, accountId: string) {\n    return async (dispatch: Function) => {\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const stakes = await getUserStakesByAccountId(accountId, {\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        });\n\n        dispatch(setAccountStakesTotal(stakes.total));\n        dispatch(setAccountStakes(stakes.items));\n    }\n}\n\nexport function loadAccountRequests(page: number, requestor: string) {\n    return async (dispatch: Function) => {\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const requests = await getAllDataRequests({\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        }, { requestor, onlyArbitratorRequests: false });\n\n        dispatch(setAccountRequests(requests.items));\n        dispatch(setAccountRequestsTotal(requests.total));\n    }\n}\n\nexport function loadUnclaimedAccountStakes(accountId: string) {\n    return async (dispatch: Function) => {\n        const stakes = await getUnclaimedStakesByAccountId(accountId);\n        dispatch(setAccountUnclaimedStakes(stakes));\n    }\n}\n\nexport function loginAccount() {\n    return async (dispatch: Function) => {\n        dispatch(setAccountLoading(true));\n\n        await loginWithProvider('near');\n\n        dispatch(setAccountLoading(false));\n    };\n}\n\n\nexport function logoutAccount() {\n    return async (dispatch: Function) => {\n        await logoutWithProvider('near');\n        dispatch(setAccount(undefined));\n    };\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppConfig } from '../../models/AppConfig';\n\nexport type AppConfigState = Readonly<{\n    loading: boolean;\n    appConfig: AppConfig;\n}>;\n\nconst initialState: AppConfigState = {\n    loading: false,\n    appConfig: {\n        nativeTokenDecimals: 18,\n        nativeTokenSymbol: '?',\n        stakeTokenDecimals: 18,\n        stakeTokenSymbol: '?',\n    }\n};\n\nconst appConfigSlice = createSlice({\n    initialState,\n    name: 'appconfig',\n    reducers: {\n        setAppConfigLoading(state: AppConfigState, action: PayloadAction<AppConfigState['loading']>): AppConfigState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n\n        setAppConfig(state: AppConfigState, action: PayloadAction<AppConfigState['appConfig']>): AppConfigState {\n            return ({\n                ...state,\n                appConfig: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setAppConfig,\n    setAppConfigLoading,\n} = appConfigSlice.actions;\n\nexport default appConfigSlice.reducer;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Menu from '../../containers/Menu';\nimport { loadLoggedInAccount, loginAccount, logoutAccount } from '../../redux/account/accountActions';\nimport { loadAppConfig } from '../../redux/appconfig/appconfigActions';\nimport { setStorageManagerDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function MenuConnector() {\n    const dispatch = useDispatch();\n    const account = useSelector((store: Reducers) => store.account.account);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    const handleLoginClick = useCallback(() => {\n        dispatch(loginAccount());\n    }, [dispatch]);\n\n    const handleLogoutClick = useCallback(() => {\n        dispatch(logoutAccount());\n    }, [dispatch]);\n\n    const handleStorageManagerClick = useCallback(() => {\n        dispatch(setStorageManagerDialogOpen({\n            open: true,\n        }));\n    }, [dispatch]);\n\n    useEffect(() => {\n        dispatch(loadLoggedInAccount());\n        dispatch(loadAppConfig());\n    }, [dispatch]);\n\n    return (\n        <Menu\n            onLoginClick={handleLoginClick}\n            account={account}\n            appConfig={appConfig}\n            onLogoutClick={handleLogoutClick}\n            onStorageManagerClick={handleStorageManagerClick}\n        />\n    );\n}\n","import { getAppConfigForProvider } from \"../../services/providers/ProviderRegistry\";\nimport { setAppConfig, setAppConfigLoading } from \"./appconfig\";\n\nexport function loadAppConfig() {\n    return async (dispatch: Function) => {\n        dispatch(setAppConfigLoading(true));\n\n        const config = await getAppConfigForProvider('near');\n\n        dispatch(setAppConfig(config));\n        dispatch(setAppConfigLoading(false));\n    };\n}\n","import React from 'react';\n\nimport s from './Footer.module.scss';\n\n\nexport default function Footer() {\n    return (\n        <footer className={s.footer}>\n            <div className={s.footerWrapper}>\n                <div className={s.logo} />\n            </div>\n        </footer>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport MenuConnector from '../../connectors/MenuConnector';\nimport Footer from '../Footer';\n\nimport s from './Page.module.scss';\n\ninterface Props {\n    className?: string;\n    bodyClassName?: string;\n    hasNavigation?: boolean;\n}\n\nexport default function Page({\n    className,\n    children,\n    hasNavigation = true,\n}: PropsWithChildren<Props>) {\n    return (\n        <div className={s.page}>\n            <MenuConnector />\n            <main className={s.body}>\n                {children}\n            </main>\n            <Footer />\n        </div>\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport trans from '../../translation/trans';\n\nimport s from './Pagination.module.scss';\n\ninterface Props {\n    total: number;\n    page: number;\n    rowsPerPage: number;\n    onChangePage: (page: number) => void;\n    className?: string;\n}\n\nexport default function Pagination({\n    total,\n    page,\n    onChangePage,\n    rowsPerPage,\n    className\n}: Props) {\n    const handleFirstPageButtonClick = () => {\n        onChangePage(0);\n    };\n\n    const handleBackButtonClick = () => {\n        onChangePage(page - 1);\n    };\n\n    const handleNextButtonClick = () => {\n        onChangePage(page + 1);\n    };\n\n    const handleLastPageButtonClick = () => {\n        onChangePage(total);\n    };\n\n    return (\n        <div className={classnames(s.pagination, className)}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                <FirstPageIcon />\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                <KeyboardArrowLeft />\n            </IconButton>\n            <span>\n                {trans('pagination.pageIndication', {\n                    currentPage: (page + 1).toString(),\n                    totalPages: (total + 1).toString(),\n                })}\n            </span>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page === total || total <= 0}\n                aria-label=\"next page\"\n            >\n                <KeyboardArrowRight />\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page === total || total <= 0}\n                aria-label=\"last page\"\n            >\n                <LastPageIcon />\n            </IconButton>\n        </div>\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\nimport Pagination from '../Pagination/Pagination';\nimport { OutcomeStake } from '../../models/OutcomeStake';\n\nimport s from './OutcomeStakesOverview.module.scss';\nimport { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport trans from '../../translation/trans';\nimport { routePaths } from '../../routes';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport { formatToken } from '../../utils/tokenUtils';\n\ninterface Props {\n    outcomeStakes: OutcomeStake[];\n    page: number;\n    totalItems: number;\n    onRequestPageChange: (page: number) => void;\n    showPagination?: boolean;\n}\n\nexport default function OutcomeStakesOverview({\n    onRequestPageChange,\n    outcomeStakes = [],\n    page,\n    totalItems,\n    showPagination = true,\n}: Props) {\n    return (\n        <div>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.id')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.roud')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.finalizedOutcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.stake')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {outcomeStakes.map((stake) => (\n                            <TableRow key={`${stake.dataRequestId}_${stake.round}_${transfromOutcomeToString(stake.outcome)}`}>\n                                <TableCell className={s.linkCell}>\n                                    <Link to={routePaths.dataRequestDetail('near', stake.dataRequestId)}>\n                                        #{stake.dataRequestId}\n                                    </Link>\n                                </TableCell>\n                                <TableCell>\n                                    {stake.round}\n                                </TableCell>\n                                <TableCell>\n                                    {transfromOutcomeToString(stake.outcome)}\n                                </TableCell>\n                                <TableCell>\n                                    {stake.finalizedOutcome ? transfromOutcomeToString(stake.finalizedOutcome) : null}\n                                </TableCell>\n                                <TableCell>\n                                    {formatToken(stake.stake, stake.stakeToken.decimals)} {stake.stakeToken.symbol}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {showPagination && (\n                <Pagination\n                    className={s.pagination}\n                    total={Math.ceil(totalItems / DEFAULT_PAGINATION_LIMIT) - 1}\n                    page={page}\n                    rowsPerPage={DEFAULT_PAGINATION_LIMIT}\n                    onChangePage={onRequestPageChange}\n                />\n            )}\n        </div>\n    );\n}\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport OutcomeStakesOverview from '../../containers/OutcomeStakesOverview';\nimport { loadAccountStakes } from '../../redux/account/accountActions';\nimport { Reducers } from '../../redux/reducers';\n\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountOutcomeStakesConnector() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n    const stakes = useSelector((store: Reducers) => store.account.accountDetail.accountStakes);\n    const total = useSelector((store: Reducers) => store.account.accountDetail.accountStakesTotal);\n    const [page, setPage] = useState(0);\n\n    const handleRequestPageChange = useCallback((newPage: number) => {\n        dispatch(loadAccountStakes(newPage, params.accountId));\n        setPage(newPage);\n    }, [dispatch, params]);\n\n    return (\n        <OutcomeStakesOverview\n            onRequestPageChange={handleRequestPageChange}\n            outcomeStakes={stakes}\n            totalItems={total}\n            page={page}\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountOutcomeStakesConnector from '../../../../connectors/AccountOutcomeStakesConnector';\nimport { loadAccountStakes } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountStakesPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadAccountStakes(0, params.accountId));\n    }, [dispatch, params]);\n\n    return (\n        <div>\n            <AccountOutcomeStakesConnector />\n        </div>\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\n\nimport { DataRequestListItem, getDataRequestTypeTranslation } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\nimport { routePaths } from '../../routes';\nimport Pagination from '../Pagination/Pagination';\n\nimport s from './DataRequestsOverview.module.scss';\nimport { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport { prettyFormatDate } from '../../utils/dateUtils';\n\ninterface Props {\n    dataRequests: DataRequestListItem[];\n    page: number;\n    totalItems: number;\n    showPagination?: boolean;\n    onRequestPageChange: (page: number) => void;\n}\n\nexport default function DataRequestsOverview({\n    dataRequests,\n    page,\n    totalItems,\n    showPagination = true,\n    onRequestPageChange,\n}: Props) {\n    return (\n        <div className={s.root}>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('dataRequestsOverview.table.label.id')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.type')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.status')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.timestamp')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {dataRequests.map((request) => (\n                            <TableRow key={request.id}>\n                                <TableCell className={s.linkCell}>\n                                    <Link to={routePaths.dataRequestDetail('near', request.id)}>\n                                        #{request.id}\n                                    </Link>\n                                </TableCell>\n                                <TableCell>\n                                    {getDataRequestTypeTranslation(request.type)}\n                                </TableCell>\n                                <TableCell>\n                                    {request.finalized_outcome && (\n                                        <span>{trans('global.status.completed')}</span>\n                                    )}\n\n                                    {!request.finalized_outcome && (\n                                        <span>{trans('global.status.ongoing')}</span>\n                                    )}\n                                </TableCell>\n                                <TableCell>\n                                    {prettyFormatDate(request.date)}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            {dataRequests.length === 0 && (\n                <div className={s.noRequests}>{trans('global.empty.noRequests')}</div>\n            )}\n            {showPagination && (\n                <Pagination\n                    className={s.pagination}\n                    total={Math.ceil(totalItems / DEFAULT_PAGINATION_LIMIT) - 1}\n                    page={page}\n                    rowsPerPage={DEFAULT_PAGINATION_LIMIT}\n                    onChangePage={onRequestPageChange}\n                />\n            )}\n        </div>\n    );\n}\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { loadAccountRequests } from '../../redux/account/accountActions';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountRequestsConnector() {\n    const [page, setPage] = useState(0);\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n    const dataRequests = useSelector((store: Reducers) => store.account.accountDetail.accountRequests);\n    const dataRequestsTotal = useSelector((store: Reducers) => store.account.accountDetail.accountRequestsTotal);\n\n    const handleRequestPageChange = useCallback((newPage: number) => {\n        dispatch(loadAccountRequests(newPage, params.accountId));\n        setPage(newPage);\n    }, [dispatch, params]);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={dataRequests}\n            onRequestPageChange={handleRequestPageChange}\n            page={page}\n            totalItems={dataRequestsTotal}\n            showPagination\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountRequestsConnector from '../../../../connectors/AccountRequestsConnector';\nimport { loadAccountRequests } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountRequestsPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadAccountRequests(0, params.accountId));\n    }, [dispatch, params.accountId]);\n\n    return (\n        <div>\n            <AccountRequestsConnector />\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OutcomeStakesOverview from '../../containers/OutcomeStakesOverview';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function AccountUnclaimedStakesConnector() {\n    const unclaimedStakes = useSelector((store: Reducers) => store.account.accountDetail.unclaimedStakes);\n\n    return (\n        <OutcomeStakesOverview\n            totalItems={0}\n            page={0}\n            onRequestPageChange={() => {}}\n            outcomeStakes={unclaimedStakes}\n            showPagination={false}\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountUnclaimedStakesConnector from '../../../../connectors/AccountUnclaimedStakesConnector';\nimport { loadUnclaimedAccountStakes } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountUnclaimedPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadUnclaimedAccountStakes(params.accountId));\n    }, [dispatch, params]);\n\n    return (\n        <div>\n            <AccountUnclaimedStakesConnector />\n        </div>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport { useCallback } from 'react';\n\nimport s from './ExternalLink.module.scss';\n\ninterface Props {\n    href: string;\n}\n\nexport default function ExternalLink({\n    children,\n    href,\n}: PropsWithChildren<Props>) {\n    const onClick = useCallback((event) => {\n        event.preventDefault();\n        window.open(href, '_blank');\n    }, [href]);\n\n    return (\n        <a href={href} className={s.link} onClick={onClick}>{children}</a>\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\n\nimport s from './WhitelistInfoCard.module.scss';\nimport trans, { booleanToYesNo } from '../../translation/trans';\nimport InformationRows from '../InformationRows';\nimport { WhitelistItemViewModel } from '../../models/WhitelistItem';\nimport { InformationRow } from '../InformationRows/InformationRows';\nimport { formatToken } from '../../utils/tokenUtils';\nimport ExternalLink from '../../components/ExternalLink';\nimport { AppConfig } from '../../models/AppConfig';\n\ninterface Props {\n    whitelist: WhitelistItemViewModel;\n    appConfig: AppConfig;\n}\n\nexport default function WhitelistInfoCard({\n    whitelist,\n    appConfig,\n}: Props) {\n    const rows: InformationRow[] = [\n        {\n            label: trans('whitelistInfoCard.label.interfaceName'),\n            value: <span>{whitelist.interfaceName}</span>,\n        },\n        {\n            label: trans('whitelistInfoCard.label.codeBaseUrl'),\n            value: <ExternalLink href={whitelist.codeBaseUrl}>{whitelist.codeBaseUrl}</ExternalLink>,\n        },\n        {\n            label: trans('whitelistInfoCard.label.active'),\n            value: <span>{booleanToYesNo(whitelist.active)}</span>,\n        }\n    ];\n\n    if (whitelist.customFee) {\n        if (whitelist.customFee.type === 'fixed') {\n            rows.push({\n                label: trans('whitelistInfoCard.label.fixedFee'),\n                value: <span>{formatToken(whitelist.customFee.fee, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>\n            });\n        } else if (whitelist.customFee.type === 'multiplier') {\n            rows.push({\n                label: trans('whitelistInfoCard.label.stakeMultiplier'),\n                value: <span>{whitelist.customFee.multiplier}x</span>\n            });\n        }\n    }\n\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('whitelistInfoCard.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={rows}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport WhitelistInfoCard from '../../containers/WhitelistInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function WhitelistInfoCardConnector() {\n    const whitelist = useSelector((store: Reducers) => store.account.accountDetail.info.whitelistItem);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    if (!whitelist) {\n        return null;\n    }\n\n    return (\n        <WhitelistInfoCard\n            whitelist={whitelist}\n            appConfig={appConfig}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport trans from '../../translation/trans';\n\nimport s from './OracleConfigInfoCard.module.scss';\nimport InformationRows from '../InformationRows';\nimport { OracleConfig } from '../../models/OracleConfig';\nimport { formatTimeToReadable, prettyFormatDate } from '../../utils/dateUtils';\nimport { formatToken } from '../../utils/tokenUtils';\n\ninterface Props {\n    oracleConfig: OracleConfig;\n}\n\nexport default function OracleConfigInfoCard({\n    oracleConfig,\n}: Props) {\n    const minInitialChallengeWindowDuration = formatTimeToReadable(Number(oracleConfig.minInitialChallengeWindowDuration), 'ns');\n    const defaultChallengeWindowDuration = formatTimeToReadable(Number(oracleConfig.defaultChallengeWindowDuration), 'ns');\n\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('oracleConfigInfoCard.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[{\n                        label: trans('oracleConfigInfoCard.label.createdAt'),\n                        value: <span>{prettyFormatDate(oracleConfig.date)}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.gov'),\n                        value: <span>{oracleConfig.gov}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.bondToken'),\n                        value: <span>{oracleConfig.bondToken.contractId}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.stakeToken'),\n                        value: <span>{oracleConfig.stakeToken.contractId}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.finalArbitrator'),\n                        value: <span>{oracleConfig.finalArbitrator}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.finalArbitratorInvokeAmount'),\n                        value: <span>{formatToken(oracleConfig.finalArbitratorInvokeAmount, oracleConfig.stakeToken.decimals, 2)} {oracleConfig.stakeToken.symbol}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.resolutionFeePercentage'),\n                        value: <span>{oracleConfig.resolutionFeePercentage / 100}%</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.maxOutcomes'),\n                        value: <span>{oracleConfig.maxOutcomes}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.minInitialChallengeWindowDuration'),\n                        value: <span>\n                            {trans('global.date.smallFormat', {\n                                days: minInitialChallengeWindowDuration.days.toString(),\n                                hours: minInitialChallengeWindowDuration.hours.toString(),\n                                minutes: minInitialChallengeWindowDuration.minutes.toString(),\n                                seconds: minInitialChallengeWindowDuration.seconds.toString(),\n                            })} / {oracleConfig.minInitialChallengeWindowDuration} ns\n                        </span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.defaultChallengeWindowDuration'),\n                        value: <span>{\n                            trans('global.date.smallFormat', {\n                                days: defaultChallengeWindowDuration.days.toString(),\n                                hours: defaultChallengeWindowDuration.hours.toString(),\n                                minutes: defaultChallengeWindowDuration.minutes.toString(),\n                                seconds: defaultChallengeWindowDuration.seconds.toString(),\n                            })} / {oracleConfig.defaultChallengeWindowDuration} ns\n                        </span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.validityBond'),\n                        value: <span>{formatToken(oracleConfig.validityBond, oracleConfig.bondToken.decimals, 2)} {oracleConfig.bondToken.symbol}</span>\n                    },]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OracleConfigInfoCard from '../../containers/OracleConfigInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function OracleConfigInfoCardConnector() {\n    const oracleConfig = useSelector((store: Reducers) => store.oracleConfig.detail);\n\n    if (!oracleConfig) {\n        return null;\n    }\n\n    return (\n        <OracleConfigInfoCard\n            oracleConfig={oracleConfig}\n        />\n    );\n}\n","import gql from \"graphql-tag\";\nimport { OracleConfig, transformToOracleConfig } from \"../models/OracleConfig\";\nimport { graphqlClient } from \"./GraphQLService\";\n\nexport async function getOracleConfigById(id: string): Promise<OracleConfig | undefined> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                query GetOracleConfig($id: String!) {\n                    config: getOracleConfig(id: $id) {\n                        block_height\n                        bond_token\n                        date\n                        default_challenge_window_duration\n                        final_arbitrator\n                        final_arbitrator_invoke_amount\n                        gov\n                        id\n                        max_outcomes\n                        min_initial_challenge_window_duration\n                        resolution_fee_percentage\n                        stake_token\n                        validity_bond\n                    }\n                }\n            `,\n            variables: {\n                id,\n            }\n        });\n\n        return transformToOracleConfig(response.data.config);\n    } catch (error) {\n        console.error('[getOracleConfig]', error);\n        return undefined;\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { OracleConfig } from '../../models/OracleConfig';\n\nexport type OracleConfigState = Readonly<{\n    detail?: OracleConfig;\n    loading: boolean;\n}>;\n\nconst initialState: OracleConfigState = {\n    loading: false,\n};\n\nconst oracleConfigSlice = createSlice({\n    initialState,\n    name: 'oracleConfig',\n    reducers: {\n        setOracleConfigDetail(state: OracleConfigState, action: PayloadAction<OracleConfig | undefined>): OracleConfigState {\n            return ({\n                ...state,\n                detail: action.payload,\n            });\n        },\n\n        setOracleConfigLoading(state: OracleConfigState, action: PayloadAction<boolean>): OracleConfigState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setOracleConfigDetail,\n    setOracleConfigLoading,\n} = oracleConfigSlice.actions;\n\nexport default oracleConfigSlice.reducer;\n","import React, { PropsWithChildren } from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Card from '../../components/Card';\nimport trans from '../../translation/trans';\n\nimport s from './AccountStakesInfoCard.module.scss';\nimport { ClaimViewModel } from '../../models/Claim';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { isSameOutcome, Outcome, OutcomeType } from '../../models/DataRequestOutcome';\nimport { TokenViewModel } from '../../models/Token';\nimport { UserStakeViewModel } from '../../models/UserStakes';\nimport Big from 'big.js';\n\ninterface Props {\n    claim?: ClaimViewModel;\n    accountStakes: UserStakeViewModel[];\n    finalizedOutcome?: Outcome;\n    finalizedRound?: number;\n    stakeToken: TokenViewModel;\n}\n\nfunction EmptyDiv(props: PropsWithChildren<{}>) {\n    return <div>{props.children}</div>\n}\n\nexport default function AccountStakesInfoCard({\n    claim,\n    accountStakes,\n    finalizedRound,\n    finalizedOutcome,\n    stakeToken,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('accountStakesInfoCard.title')}</h2>\n                </div>\n\n                {claim && (\n                    <div className={s.claim}>\n                        {trans('dataRequestDetail.label.claimed', {\n                            payout: formatToken(claim.payout, stakeToken.decimals),\n                            userCorrectStake: formatToken(claim.userCorrectStake, stakeToken.decimals),\n                            tokenSymbol: stakeToken.symbol,\n                        })}\n                    </div>\n                )}\n\n                {finalizedOutcome && !claim && (\n                    <div className={s.claim}>\n                        {trans('dataRequestDetail.description.unclaimed')}\n                    </div>\n                )}\n\n                {accountStakes.length > 0 && (\n                    <TableContainer className={s.container} component={EmptyDiv}>\n                        <Table className={s.table}>\n                            <TableHead className={s.tableHead}>\n                                <TableRow>\n                                    <TableCell>{trans('outcomeStakeInfo.table.label.round')}</TableCell>\n                                    <TableCell>{trans('outcomeStakeInfo.table.label.outcome')}</TableCell>\n                                    <TableCell>{trans('outcomeStakeInfo.table.label.stake')}</TableCell>\n                                    {finalizedOutcome && <TableCell>{trans('outcomeStakeInfo.table.label.correcltyStaked')}</TableCell>}\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {accountStakes.map((stakeInfo, index) => {\n                                    if (new Big(stakeInfo.totalStake).lte(0)) {\n                                        return null;\n                                    }\n\n                                    return (\n                                        <TableRow key={index}>\n                                            <TableCell>\n                                                {stakeInfo.round}\n                                            </TableCell>\n                                            <TableCell>\n                                                {stakeInfo.outcome.type === OutcomeType.Answer && (\n                                                    <span>\"{stakeInfo.outcome.answer}\"</span>\n                                                )}\n\n                                                {stakeInfo.outcome.type === OutcomeType.Invalid && (\n                                                    <span>{trans('outcomeStakeInfo.label.invalid')}</span>\n                                                )}\n                                            </TableCell>\n                                            <TableCell>\n                                                {formatToken(stakeInfo.totalStake, stakeToken.decimals)} {stakeToken.symbol}\n                                            </TableCell>\n\n                                            {finalizedOutcome && typeof finalizedRound !== 'undefined' && (\n                                                <TableCell>\n                                                    {stakeInfo.bonded && isSameOutcome(finalizedOutcome, stakeInfo.outcome) && trans('outcomeStakeInfo.label.correct')}\n                                                    {stakeInfo.bonded && !isSameOutcome(finalizedOutcome, stakeInfo.outcome) && trans('outcomeStakeInfo.label.incorrect')}\n                                                    {!stakeInfo.bonded && trans('outcomeStakeInfo.label.unbonded')}\n                                                </TableCell>\n                                            )}\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                )}\n\n                {accountStakes.length === 0 && (\n                    <div className={s.noStakes}>\n                        {trans('accountStakesInfoCard.noStakes')}\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport AccountStakesInfoCard from '../../containers/AccountStakesInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function AccountStakesInfoCardConnector() {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n    const finalizedOutcome = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail?.finalized_outcome);\n    const resolutionWindows = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail?.resolutionWindows) ?? [];\n\n    let finalizedRound: number | undefined = undefined;\n\n    if (finalizedOutcome) {\n        // -2 because the last round is always an open window\n        finalizedRound = resolutionWindows[resolutionWindows.length - 2].round;\n    }\n\n    if (!dataRequest) return null;\n\n    return (\n        <AccountStakesInfoCard\n            accountStakes={dataRequest.loggedInAccountStakes}\n            claim={dataRequest.loggedInAccountClaim}\n            finalizedOutcome={finalizedOutcome}\n            finalizedRound={finalizedRound}\n            stakeToken={dataRequest.stakeToken}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\n\nimport s from './CallDataInfoCard.module.scss';\nimport LabeledText from '../../compositions/LabeledText';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function CallDataInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('callDataInfo.title')}</h2>\n                </div>\n\n                {dataRequest.description && (\n                    <LabeledText label={trans('callDataInfo.description')} className={s.label}>{dataRequest.description}</LabeledText>\n                )}\n\n                {dataRequest.sources.length > 0 && (\n                    <table className={s.table}>\n                        <thead>\n                            <tr className={s.tableHeadRow}>\n                                <th>{trans('callDataInfo.label.endPoint')}</th>\n                                <th>{trans('callDataInfo.label.sourcePath')}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {dataRequest.sources.map(source => (\n                                <tr key={`${source.endPoint}_${source.sourcePath}`}>\n                                    <td className={s.tableItem}>\n                                        <span className={s.tableItemInner}>{source.endPoint}</span>\n                                    </td>\n                                    <td className={s.tableItem}><pre>{source.sourcePath}</pre></td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n\n                {dataRequest.outcomes?.length && (\n                    <>\n                        <LabeledText label={trans('callDataInfo.outcomes.title')} />\n                        <pre className={s.possibleOutcomes}>\n                            {JSON.stringify(dataRequest.outcomes, null, 4)}\n                        </pre>\n                    </>\n                )}\n\n                <LabeledText label={trans('callDataInfo.dataType')} className={s.label}>{dataRequest.data_type}</LabeledText>\n\n                {dataRequest.data_type === \"Number\" && (\n                    <LabeledText label={trans('callDataInfo.numberMultiplier')} className={s.label}>{dataRequest.number_multiplier}</LabeledText>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport CallDataInfoCard from '../../containers/CallDataInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function CallDataInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <CallDataInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import React from 'react';\nimport { default as ReactCountdown } from 'react-countdown';\n\ninterface Props {\n    date: Date;\n    onComplete: () => void;\n}\n\nexport default function Countdown({\n    date,\n    onComplete,\n}: Props) {\n    return (\n        <ReactCountdown date={date} onComplete={onComplete} />\n    );\n}\n","import Big from 'big.js';\nimport React, { useCallback, useState } from 'react';\nimport Button from '../../components/Button';\nimport Countdown from '../../compositions/Countdown';\nimport { Account } from '../../models/Account';\nimport { canDataRequestBeFinalized, DataRequestViewModel } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport trans from '../../translation/trans';\n\nimport s from './DataRequestDetailHeader.module.scss';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    onStakeClick: () => void;\n    onUnstakeClick: () => void;\n    onClaimClick: () => void;\n    onFinalizeClick: () => void;\n    account?: Account;\n    accountStakes: OutcomeStake[];\n}\n\nexport default function DataRequestDetailHeader({\n    dataRequest,\n    onStakeClick,\n    onClaimClick,\n    onUnstakeClick,\n    onFinalizeClick,\n    account,\n    accountStakes,\n}: Props) {\n    const now = new Date();\n    const [canInteract, setInteract] = useState(dataRequest.settlementTime.getTime() <= now.getTime());\n    const isFinalized = typeof dataRequest.finalized_outcome !== 'undefined';\n    const canFinalize = canDataRequestBeFinalized(dataRequest);\n    const hasClaimed = Boolean(dataRequest.loggedInAccountClaim?.payout);\n    const canUnstake = dataRequest.loggedInAccountStakes.some(stake => !stake.bonded && new Big(stake.totalStake).gt(0));\n\n    const onCountdownComplete = useCallback(() => {\n        setInteract(true);\n    }, []);\n\n    return (\n        <header className={s.header}>\n            <h1>{trans('dataRequestDetail.title', { id: dataRequest.id })}</h1>\n            <div className={s.actions}>\n                {!canInteract && (\n                    <span>\n                        {trans('dataRequestDetail.canBeResolvedIn')}\n                        <Countdown\n                            date={dataRequest.settlementTime}\n                            onComplete={onCountdownComplete}\n                        />\n                    </span>\n                )}\n\n                {canInteract && account && !isFinalized && (\n                    <Button className={s.button} onClick={onStakeClick}>\n                        {trans('dataRequestDetail.label.stake')}\n                    </Button>\n                )}\n\n                {canInteract && account && canUnstake && (\n                    <Button className={s.button} onClick={onUnstakeClick}>\n                        {trans('dataRequestDetail.label.unstake')}\n                    </Button>\n                )}\n\n                {canInteract && account && canFinalize && (\n                    <Button className={s.button} onClick={onFinalizeClick}>\n                        {trans('dataRequestDetail.label.finalize')}\n                    </Button>\n                )}\n\n                {canInteract && account && !hasClaimed && accountStakes.length > 0 && isFinalized && (\n                    <Button className={s.button} onClick={onClaimClick}>\n                        {trans('dataRequestDetail.label.claim')}\n                    </Button>\n                )}\n            </div>\n        </header>\n    );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { DataRequestListItem, DataRequestViewModel } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\nexport type DataRequestsState = Readonly<{\n    dataRequests: DataRequestListItem[];\n    dataRequestFilters: DataRequestFilters;\n    totalDataRequests: number;\n    error?: string[];\n    detailLoading: boolean;\n    loading: boolean;\n    dataRequestDetail?: DataRequestViewModel;\n    accountStakes: OutcomeStake[];\n}>;\n\nconst initialState: DataRequestsState = {\n    detailLoading: false,\n    loading: false,\n    dataRequests: [],\n    totalDataRequests: 0,\n    accountStakes: [],\n    dataRequestFilters: {\n        onlyArbitratorRequests: false,\n    }\n};\n\nconst dataRequestsSlice = createSlice({\n    initialState,\n    name: 'dataRequests',\n    reducers: {\n        setDataRequestsErrors(state: DataRequestsState, action: PayloadAction<string[]>): DataRequestsState {\n            return ({\n                ...state,\n                error: action.payload,\n            });\n        },\n        setDataRequestsLoading(state: DataRequestsState, action: PayloadAction<boolean>): DataRequestsState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n        setDataRequestDetailLoading(state: DataRequestsState, action: PayloadAction<boolean>): DataRequestsState {\n            return ({\n                ...state,\n                detailLoading: action.payload,\n            });\n        },\n        setDataRequests(state: DataRequestsState, action: PayloadAction<DataRequestListItem[]>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequests: action.payload,\n            });\n        },\n        setDataRequestDetail(state: DataRequestsState, action: PayloadAction<DataRequestViewModel | undefined>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequestDetail: action.payload,\n            });\n        },\n        setTotalDataRequest(state: DataRequestsState, action: PayloadAction<number>): DataRequestsState {\n            return ({\n                ...state,\n                totalDataRequests: action.payload,\n            });\n        },\n        setDataRequestAccountStakes(state: DataRequestsState, action: PayloadAction<OutcomeStake[]>): DataRequestsState {\n            return ({\n                ...state,\n                accountStakes: action.payload,\n            });\n        },\n        setDataRequestFilters(state: DataRequestsState, action: PayloadAction<DataRequestFilters>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequestFilters: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setDataRequests,\n    setDataRequestsErrors,\n    setDataRequestsLoading,\n    setDataRequestDetail,\n    setDataRequestDetailLoading,\n    setTotalDataRequest,\n    setDataRequestAccountStakes,\n    setDataRequestFilters,\n} = dataRequestsSlice.actions;\n\nexport default dataRequestsSlice.reducer;\n","import { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport { StakeFormValues } from '../../containers/StakeDialog/services/createDefaultStakeFormValues';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport { Outcome, OutcomeType } from '../../models/DataRequestOutcome';\nimport { combineOutcomeStakes, OutcomeStake } from '../../models/OutcomeStake';\nimport { UserStakeViewModel } from '../../models/UserStakes';\nimport { getAllDataRequests, getDataRequestById } from '../../services/DataRequestService';\nimport { claimWithProvider, finalizeWithProvider, getLoggedInAccountId, stakeWithProvider, unstakeWithProvider } from '../../services/providers/ProviderRegistry';\nimport { getUserStakesByRequestId } from '../../services/UserStakeService';\nimport { Reducers } from '../reducers';\nimport { setDataRequestDetailLoading, setDataRequestDetail, setDataRequestsLoading, setDataRequests, setTotalDataRequest, setDataRequestsErrors, setDataRequestAccountStakes } from './dataRequest';\n\nexport function loadDataRequests(page: number) {\n    return async (dispatch: Function, getState: () => Reducers) => {\n        const store = getState();\n        dispatch(setDataRequestsLoading(true));\n\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const result = await getAllDataRequests({\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        }, store.dataRequest.dataRequestFilters);\n\n        dispatch(setDataRequests(result.items));\n        dispatch(setTotalDataRequest(result.total));\n        dispatch(setDataRequestsLoading(false));\n    }\n}\n\nexport function unloadDataRequest() {\n    return (dispatch: Function) => {\n        dispatch(setDataRequestDetail(undefined));\n        dispatch(setDataRequestAccountStakes([]));\n    }\n}\n\nexport function loadDataRequestById(id: string) {\n    return async (dispatch: Function) => {\n        dispatch(setDataRequestDetailLoading(true));\n        const accountId = await getLoggedInAccountId();\n        const accountStakesRequest = getUserStakesByRequestId(id, accountId);\n        const dataRequest = await getDataRequestById(id, accountId);\n\n        if (!dataRequest) {\n            setDataRequestsErrors(['404']);\n            return;\n        }\n\n        const accountStakes = await accountStakesRequest;\n        let accountOutcomeStakes: OutcomeStake[] = [];\n\n        if (accountId && accountStakes[accountId]) {\n            accountOutcomeStakes = combineOutcomeStakes(accountStakes[accountId]);\n        }\n\n        dispatch(setDataRequestAccountStakes(accountOutcomeStakes));\n        dispatch(setDataRequestDetail(dataRequest));\n        dispatch(setDataRequestDetailLoading(false));\n    }\n}\n\nexport function stakeDataRequest(dataRequest: DataRequestViewModel, stakeFormValues: StakeFormValues) {\n    return async (dispatch: Function) => {\n        let outcome: Outcome = {\n            type: OutcomeType.Invalid,\n        };\n\n        if (!stakeFormValues.isInvalid) {\n            outcome = {\n                answer: stakeFormValues.answer,\n                type: OutcomeType.Answer,\n            };\n        }\n\n        await stakeWithProvider('near', stakeFormValues.amount, dataRequest, outcome);\n    }\n}\n\nexport function finalizeDataRequest(dataRequest: DataRequestViewModel) {\n    return async (dispatch: Function) => {\n        await finalizeWithProvider('near', dataRequest);\n    }\n}\n\nexport function claimDataRequest(accountId: string, dataRequest: DataRequestViewModel) {\n    return async (dispatch: Function) => {\n        await claimWithProvider('near', accountId, dataRequest);\n    }\n}\n\nexport function unstakeDataRequest(amount: string, dataRequest: DataRequestViewModel, stakedOutcome: UserStakeViewModel) {\n    return async (dispatch: Function) => {\n        await unstakeWithProvider('near', amount, stakedOutcome.round, dataRequest, stakedOutcome.outcome);\n    }\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport DataRequestDetailHeader from '../../containers/DataRequestDetailHeader';\nimport { claimDataRequest, finalizeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setStakeDialogOpen, setUnstakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function DataRequestDetailHeaderConnector() {\n    const dispatch = useDispatch();\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const accountStakes = useSelector((store: Reducers) => store.dataRequest.accountStakes);\n\n    const handleStakeClick = useCallback(() => {\n        dispatch(setStakeDialogOpen({\n            open: true,\n            dataRequest,\n        }));\n    }, [dispatch, dataRequest]);\n\n    const handleUnstakeClick = useCallback(() => {\n        dispatch(setUnstakeDialogOpen({\n            open: true,\n            dataRequest\n        }));\n    }, [dispatch, dataRequest]);\n\n    const handleFinalizeClick = useCallback(() => {\n        if (!dataRequest) return;\n        dispatch(finalizeDataRequest(dataRequest));\n    }, [dispatch, dataRequest]);\n\n    const handleClaimClick = useCallback(() => {\n        if (!dataRequest || !account) return;\n        dispatch(claimDataRequest(account.accountId, dataRequest));\n    }, [dispatch, dataRequest, account]);\n\n    if (!dataRequest) return null;\n\n    return (\n        <DataRequestDetailHeader\n            dataRequest={dataRequest}\n            onStakeClick={handleStakeClick}\n            onFinalizeClick={handleFinalizeClick}\n            onClaimClick={handleClaimClick}\n            onUnstakeClick={handleUnstakeClick}\n            account={account}\n            accountStakes={accountStakes}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\n\nimport s from './RequestInfoCard.module.scss';\nimport InformationRows from '../InformationRows';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport { Link } from 'react-router-dom';\nimport { routePaths } from '../../routes';\nimport { prettyFormatDate } from '../../utils/dateUtils';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function RequestInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('requestInfo.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[{\n                        label: trans('requestInfo.label.requestor'),\n                        value: <Link className={s.link} to={routePaths.account('near', dataRequest.requestor)}>{dataRequest.requestor}</Link>,\n                    }, {\n                        label: trans('requestInfo.label.targetContract'),\n                        value: <Link className={s.link} to={routePaths.account('near', dataRequest.targetContract)}>{dataRequest.requestor}</Link>,\n                    }, {\n                        label: trans('requestInfo.label.dateCreated'),\n                        value: <span>{prettyFormatDate(dataRequest.date)}</span>,\n                    }, {\n                        label: trans('requestInfo.label.settlementTime'),\n                        value: <span>{prettyFormatDate(dataRequest.settlementTime)}</span>,\n                    }, {\n                        label: trans('requestInfo.label.config'),\n                        value: <Link className={s.link} to={routePaths.config('near', dataRequest.config.id)}>{dataRequest.config.id}</Link>,\n                    }, {\n                        label: trans('requestInfo.label.finalArbitratorTriggered'),\n                        value: <span>{dataRequest.finalArbitratorTriggered + ''}</span>,\n                    }, {\n                        label: trans('requestInfo.label.feeReward'),\n                        value: <span>{formatToken(dataRequest.fee, dataRequest.stakeToken.decimals)} {dataRequest.stakeToken.symbol}</span>,\n                    }, {\n                        label: trans('requestInfo.label.totalStaked'),\n                        value: <span>{`${formatToken(dataRequest.totalStaked, dataRequest.stakeToken.decimals)} ${dataRequest.stakeToken.symbol}`}</span>,\n                    }, {\n                        label: trans('requestInfo.label.totalCorrectStaked'),\n                        value: (\n                            <span>\n                                {dataRequest.totalCorrectStaked ?\n                                    `${formatToken(dataRequest.totalCorrectStaked, dataRequest.stakeToken.decimals)} ${dataRequest.stakeToken.symbol}` :\n                                    trans('global.na')\n                                }\n                            </span>\n                        )\n                    }, {\n                        label: trans('requestInfo.label.totalIncorrectStaked'),\n                        value: (\n                            <span>\n                                {dataRequest.totalIncorrectStaked ?\n                                    `${formatToken(dataRequest.totalIncorrectStaked, dataRequest.stakeToken.decimals)} ${dataRequest.stakeToken.symbol}` :\n                                    trans('global.na')\n                                }\n                            </span>\n                        )\n                    }, {\n                        label: trans('requestInfo.label.tags'),\n                        value: <span>{dataRequest.tags.length ? dataRequest.tags.map(t => `\"${t}\"`).join(', ') : trans('requestInfo.label.noTags')}</span>\n                    }, {\n                        label: trans('requestInfo.label.finalizedOutcome'),\n                        value: <span>{dataRequest.finalized_outcome ? transfromOutcomeToString(dataRequest.finalized_outcome) : 'null'}</span>,\n                    }]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport RequestInfoCard from '../../containers/RequestInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function RequestInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <RequestInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import React, { ReactElement } from 'react';\nimport classnames from 'classnames';\nimport Switch from '@material-ui/core/Switch';\n\nimport s from './OptionSwitch.module.scss';\n\ninterface Props {\n    className?: string;\n    label: string,\n    labelA: string;\n    labelB: string;\n    onChange?: (checked: boolean) => void;\n    value?: boolean;\n}\n\nexport default function OptionSwitch({\n    label,\n    labelA,\n    labelB,\n    onChange = () => {},\n    value,\n    className = '',\n}: Props): ReactElement {\n    return (\n        <span className={classnames(s.root, className)}>\n            <span>{label}</span>\n            <div className={s.options}>\n                <span>{labelA}</span>\n                <Switch\n                    value={value}\n                    classes={{\n                        thumb: s.thumb,\n                        track: s.track,\n                        switchBase: s.switchBase,\n                    }}\n                    onChange={(_, checked) => onChange(checked)}\n                />\n                <span>{labelB}</span>\n            </div>\n        </span>\n    );\n}\n","import React, { ChangeEvent } from 'react';\nimport { default as MuiSelect } from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport s from './Select.module.scss';\n\n\nexport interface SelectItem {\n    name: string;\n    value: string;\n}\n\ninterface Props {\n    id: string;\n    items: SelectItem[];\n    value: string;\n    label?: string;\n    onChange?: (value: string) => void;\n}\n\nexport default function Select({\n    items,\n    value,\n    label,\n    id,\n    onChange = () => {},\n}: Props) {\n    function handleChange(event: ChangeEvent<{ name?: string, value: unknown }>) {\n        onChange(event.target.value as string);\n    }\n\n    return (\n        <div>\n            <InputLabel id={id}>{label}</InputLabel>\n            <MuiSelect\n                value={value}\n                labelId={id}\n                className={s.select}\n                onChange={handleChange}\n            >\n                {items.map(item => (\n                    <MenuItem key={item.value} value={item.value}>{item.name}</MenuItem>\n                ))}\n            </MuiSelect>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport Input from '../../components/Input';\nimport OptionSwitch from '../../components/OptionSwitch/OptionSwitch';\nimport Select from '../../components/Select';\nimport Dialog from '../../compositions/Dialog';\nimport { Account } from '../../models/Account';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\nimport { toToken } from '../../utils/tokenUtils';\nimport createDefaultStakeFormValues, { StakeFormValues } from './services/createDefaultStakeFormValues';\nimport validateStakeFormValues from './services/validateStakeFormValues';\n\nimport s from './StakeDialog.module.scss';\n\ninterface Props {\n    onRequestClose: () => void;\n    onSubmit: (formValues: StakeFormValues) => void;\n    open: boolean;\n    account: Account;\n    dataRequest: DataRequestViewModel;\n}\n\nexport default function StakeDialog({\n    onRequestClose,\n    onSubmit,\n    open,\n    account,\n    dataRequest,\n}: Props) {\n    const [formValues, setFormValues] = useState(createDefaultStakeFormValues(dataRequest));\n\n    function handleValidityChange(isInvalid: boolean) {\n        setFormValues({\n            ...formValues,\n            isInvalid,\n        });\n    }\n\n    function handleAnswerChange(answer: string) {\n        setFormValues({\n            ...formValues,\n            answer,\n        });\n    }\n\n    function handleStakeChange(amount: string) {\n        setFormValues({\n            ...formValues,\n            amount: amount ? toToken(amount, dataRequest.stakeToken.decimals) : '0',\n            amountFormatted: amount ? amount : '',\n        });\n    }\n\n    const errors = validateStakeFormValues(formValues, account, dataRequest);\n\n    return (\n        <Dialog\n            open={open}\n            onRequestClose={onRequestClose}\n            onSubmitClick={() => onSubmit(formValues)}\n            title={trans('stakeDialog.title')}\n            canSubmit={errors.canSubmit}\n        >\n            <form className={s.form}>\n                <div className={s.formItem}>\n                    <OptionSwitch\n                        label={trans('stakeDialog.label.validity')}\n                        labelA={trans('stakeDialog.label.valid')}\n                        labelB={trans('stakeDialog.label.invalid')}\n                        className={s.formInput}\n                        value={formValues.isInvalid}\n                        onChange={handleValidityChange}\n                    />\n                </div>\n\n                {!formValues.isInvalid && dataRequest.outcomes && (\n                    <div className={s.formItem}>\n                        <Select\n                            id=\"stake_dialog_outcome\"\n                            value={formValues.answer}\n                            label={trans('stakeDialog.label.answer')}\n                            onChange={handleAnswerChange}\n                            items={dataRequest.outcomes.map(outcome => ({\n                                name: outcome,\n                                value: outcome,\n                            }))}\n                        />\n                    </div>\n                )}\n\n                {!formValues.isInvalid && !dataRequest.outcomes && (\n                    <div className={s.formItem}>\n                        <Input\n                            label={trans('stakeDialog.label.answer')}\n                            className={s.formInput}\n                            value={formValues.answer}\n                            error={errors.answer}\n                            onChange={handleAnswerChange}\n                            type={dataRequest.data_type === 'Number' ? 'number' : 'text'}\n                        />\n                    </div>\n                )}\n                <div className={s.formItem}>\n                    <Input\n                        label={trans('stakeDialog.label.stakeAmount', { tokenSymbol: dataRequest.stakeToken.symbol })}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleStakeChange}\n                        type=\"number\"\n                        error={errors.amount}\n                    />\n                </div>\n                {errors.message && (<div className={s.error}>{errors.message}</div>)}\n            </form>\n        </Dialog>\n    );\n}\n","import { DataRequestViewModel } from \"../../../models/DataRequest\";\n\nexport interface StakeFormValues {\n    amount: string;\n    amountFormatted: string;\n    isInvalid: boolean;\n    answer: string;\n}\n\nexport default function createDefaultStakeFormValues(dataRequest: DataRequestViewModel): StakeFormValues {\n    return {\n        amount: '0',\n        amountFormatted: '0',\n        isInvalid: false,\n        answer: dataRequest.outcomes ? dataRequest.outcomes[0] : '',\n    };\n}\n","import Big from 'big.js';\nimport { Account } from '../../../models/Account';\nimport { DataRequestViewModel } from '../../../models/DataRequest';\nimport { OutcomeType } from '../../../models/DataRequestOutcome';\nimport trans from '../../../translation/trans';\nimport { StakeFormValues } from './createDefaultStakeFormValues';\n\ninterface StakeFormErrors {\n    amount: string;\n    answer: string;\n    message: string;\n    canSubmit: boolean;\n}\n\nexport default function validateStakeFormValues(formValues: StakeFormValues, account: Account, dataRequest: DataRequestViewModel): StakeFormErrors {\n    const errors: StakeFormErrors = {\n        amount: '',\n        answer: '',\n        message: '',\n        canSubmit: true,\n    };\n\n    const accountBalance = new Big(account.balance);\n\n    if (!formValues.isInvalid) {\n        if (!formValues.answer) {\n            errors.canSubmit = false;\n        }\n\n        if (dataRequest.outcomes && dataRequest.outcomes.length) {\n            if (!dataRequest.outcomes.includes(formValues.answer)) {\n                errors.answer = trans('stakeDialog.errors.mustBeAnOutcome');\n                errors.canSubmit = false;\n            }\n        }\n    }\n\n    if (accountBalance.lt(formValues.amount)) {\n        errors.amount = trans('stakeDialog.errors.notEnoughBalance')\n        errors.canSubmit = false;\n    }\n\n    if (new Big(formValues.amount).lte(0)) {\n        errors.canSubmit = false;\n    }\n\n    // You cannot stake on the same bonded outcome as the previous outcome\n    const currentRound = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1];\n    if (currentRound && currentRound.round !== 0) {\n        const previousRound = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 2];\n\n        if (previousRound?.bondedOutcome?.type === OutcomeType.Invalid && formValues.isInvalid) {\n            errors.canSubmit = false;\n            errors.message = trans('stakeDialog.errors.sameAnswerAsPreviousRound');\n        }\n\n        if (previousRound?.bondedOutcome?.type === OutcomeType.Answer && previousRound.bondedOutcome.answer === formValues.answer) {\n            errors.canSubmit = false;\n            errors.message = trans('stakeDialog.errors.sameAnswerAsPreviousRound');\n        }\n    }\n\n    return errors;\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport StakeDialog from '../../containers/StakeDialog';\nimport { StakeFormValues } from '../../containers/StakeDialog/services/createDefaultStakeFormValues';\nimport { stakeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setStakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\nexport default function StakeDialogConnector() {\n    const dispatch = useDispatch();\n    const open = useSelector((store: Reducers) => store.dialogs.stakeDialog.open);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const dataRequest = useSelector((store: Reducers) => store.dialogs.stakeDialog.dataRequest);\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setStakeDialogOpen({\n            open: false,\n            dataRequest: undefined,\n        }));\n    }, [dispatch]);\n\n    const handleSubmit = useCallback((formValues: StakeFormValues) => {\n        if (!dataRequest) return;\n\n        dispatch(stakeDataRequest(dataRequest, formValues))\n    }, [dispatch, dataRequest]);\n\n    if (!account || !dataRequest) return null;\n\n    return (\n        <StakeDialog\n            open={open}\n            onRequestClose={handleRequestClose}\n            onSubmit={handleSubmit}\n            account={account}\n            dataRequest={dataRequest}\n        />\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { ResolutionWindow } from '../../../../models/ResolutionWindow';\nimport trans from '../../../../translation/trans';\nimport { formatToken } from '../../../../utils/tokenUtils';\n\nimport s from './StakerReport.module.scss';\nimport { OutcomeType } from '../../../../models/DataRequestOutcome';\nimport { Link } from 'react-router-dom';\nimport { routePaths } from '../../../../routes';\nimport { TokenViewModel } from '../../../../models/Token';\nimport Big from 'big.js';\n\nexport interface Props {\n    stakeToken: TokenViewModel;\n    userStakes: ResolutionWindow['userStakes'];\n}\n\nexport default function StakerReport({\n    userStakes,\n    stakeToken,\n}: Props) {\n    return (\n        <div className={s.stakerReport}>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('stakeReport.table.label.accountId')}</TableCell>\n                            <TableCell>{trans('stakeReport.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('stakeReport.table.label.stake')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {Object.keys(userStakes).map((accountId, index) => {\n                            const outcomeInfos = userStakes[accountId];\n\n                            return outcomeInfos.map((outcomeInfo) => {\n                                if (new Big(outcomeInfo.stake).lte(0)) {\n                                    return null;\n                                }\n\n                                return (\n                                    <TableRow key={`${accountId}_${JSON.stringify(outcomeInfo.outcome)}`}>\n                                        <TableCell>\n                                            <Link className={s.link} to={routePaths.account('near', accountId)}>{accountId}</Link>\n                                        </TableCell>\n                                        <TableCell>\n                                            {outcomeInfo.outcome.type === OutcomeType.Answer && (\n                                                <span>\"{outcomeInfo.outcome.answer}\"</span>\n                                            )}\n\n                                            {outcomeInfo.outcome.type === OutcomeType.Invalid && (\n                                                <span>{trans('stakerReport.label.invalid')}</span>\n                                            )}\n                                        </TableCell>\n                                        <TableCell>\n                                            {formatToken(outcomeInfo.stake, stakeToken.decimals)} {stakeToken.symbol}\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            });\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { OutcomeStake } from '../../../../models/OutcomeStake';\n\nimport s from './OutcomeStakeInfo.module.scss';\nimport trans from '../../../../translation/trans';\nimport { formatToken } from '../../../../utils/tokenUtils';\nimport { isSameOutcome, Outcome, OutcomeType } from '../../../../models/DataRequestOutcome';\nimport { TokenViewModel } from '../../../../models/Token';\nimport Big from 'big.js';\n\nexport interface Props {\n    outcomeStakes: OutcomeStake[];\n    tableComponent?: any;\n    finalizedOutcome?: Outcome;\n    finalizedRound?: number;\n    stakeToken: TokenViewModel;\n}\n\nexport default function OutcomeStakeInfo({\n    outcomeStakes,\n    tableComponent = Paper,\n    finalizedOutcome,\n    finalizedRound,\n    stakeToken,\n}: Props) {\n    return (\n        <div>\n            <TableContainer className={s.container} component={tableComponent}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('outcomeStakeInfo.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakeInfo.table.label.stake')}</TableCell>\n                            {finalizedOutcome && <TableCell>{trans('outcomeStakeInfo.table.label.correcltyStaked')}</TableCell>}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {outcomeStakes.map((outcomeInfo, index) => {\n                            if (new Big(outcomeInfo.stake).lte(0)) {\n                                return null;\n                            }\n\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell>\n                                        {outcomeInfo.outcome.type === OutcomeType.Answer && (\n                                            <span>\"{outcomeInfo.outcome.answer}\"</span>\n                                        )}\n\n                                        {outcomeInfo.outcome.type === OutcomeType.Invalid && (\n                                            <span>{trans('outcomeStakeInfo.label.invalid')}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {formatToken(outcomeInfo.stake, stakeToken.decimals)} {stakeToken.symbol}\n                                    </TableCell>\n\n                                    {finalizedOutcome && typeof finalizedRound !== 'undefined' && (\n                                        <TableCell>\n                                            {outcomeInfo.round <= finalizedRound && isSameOutcome(finalizedOutcome, outcomeInfo.outcome) && trans('outcomeStakeInfo.label.correct')}\n                                            {outcomeInfo.round <= finalizedRound && !isSameOutcome(finalizedOutcome, outcomeInfo.outcome) && trans('outcomeStakeInfo.label.incorrect')}\n                                            {outcomeInfo.round > finalizedRound && trans('outcomeStakeInfo.label.unbonded')}\n                                        </TableCell>\n                                    )}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    );\n}\n","import React from 'react';\nimport Accordion from '@material-ui/core/Accordion';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Big from 'big.js';\n\nimport { ResolutionWindow } from '../../models/ResolutionWindow';\nimport trans from '../../translation/trans';\nimport StakerReport from './components/StakerReport/StakerReport';\nimport InformationRows from '../InformationRows';\nimport { prettyFormatDate } from '../../utils/dateUtils';\nimport { formatToken } from '../../utils/tokenUtils';\nimport OutcomeStakeInfo from './components/OutcomeStakeInfo/OutcomeStakeInfo';\n\nimport s from './ResolutionWindowAccordion.module.scss';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport Countdown from '../../compositions/Countdown';\nimport { useState } from 'react';\nimport { TokenViewModel } from '../../models/Token';\n\ninterface Props {\n    stakeToken: TokenViewModel;\n    resolutionWindow: ResolutionWindow;\n    defaultExpanded?: boolean;\n}\n\nexport default function ResolutionWindowAccordion({\n    resolutionWindow,\n    defaultExpanded,\n    stakeToken,\n}: Props) {\n    const now = new Date();\n    const [isWindowClosed, setWindowClosed] = useState(resolutionWindow.endTime.getTime() <= now.getTime());\n    const percentageFilled = resolutionWindow.winningOutcomeStake ? new Big(resolutionWindow.winningOutcomeStake.stake).div(resolutionWindow.bondSize).mul(100).toString() : '0';\n\n    return (\n        <Accordion className={s.accordion} defaultExpanded={defaultExpanded}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <span className={s.roundTitle}>{trans('resolutionWindow.round', { round: resolutionWindow.round.toString() })}</span>\n                <span>{resolutionWindow.bondedOutcome ? transfromOutcomeToString(resolutionWindow.bondedOutcome) : ''}</span>\n\n                {!isWindowClosed && !resolutionWindow.bondedOutcome && (\n                    <span>\n                        {trans('resolutionWindow.label.closesIn')}\n                        <Countdown\n                            date={resolutionWindow.endTime}\n                            onComplete={() => setWindowClosed(true)}\n                        />\n                    </span>\n                )}\n            </AccordionSummary>\n            <AccordionDetails className={s.details}>\n                <InformationRows\n                    rows={[\n                        {\n                            label: trans('resolutionWindowAccordion.label.endTime'),\n                            value: <span>{prettyFormatDate(resolutionWindow.endTime)}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.bondSize'),\n                            value: <span>{`${formatToken(resolutionWindow.bondSize, stakeToken.decimals)} ${stakeToken.symbol}`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.totalStaked'),\n                            value: <span>{`${formatToken(resolutionWindow.totalStaked, stakeToken.decimals)} ${stakeToken.symbol}`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.percentageFilled'),\n                            value: <span>{`${percentageFilled}%`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.winningOutcome'),\n                            value: <span>{resolutionWindow.winningOutcomeStake ? transfromOutcomeToString(resolutionWindow.winningOutcomeStake.outcome) : ''}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.bondedOutcome'),\n                            value: <span>{resolutionWindow.bondedOutcome ? transfromOutcomeToString(resolutionWindow.bondedOutcome) : ''}</span>,\n                        }\n                    ]}\n                />\n                <h3>{trans('resolutionWindowAccordion.outcomeStakes.title')}</h3>\n                <OutcomeStakeInfo stakeToken={stakeToken} outcomeStakes={resolutionWindow.outcomeStakes} />\n                <h3>{trans('resolutionWindowAccordion.stakerReports.title')}</h3>\n                <StakerReport\n                    userStakes={resolutionWindow.userStakes}\n                    stakeToken={stakeToken}\n                />\n            </AccordionDetails>\n        </Accordion>\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport Card from '../../components/Card';\nimport trans from '../../translation/trans';\n\nimport s from './ResolutionWindowInfoCard.module.scss';\nimport ResolutionWindowAccordion from '../ResolutionWindowAccordion';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function ResolutionWindowInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n    const resolutionWindows = dataRequest.resolutionWindows.slice().reverse();\n\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('stakerReportsInfo.title')}</h2>\n                </div>\n                <div>\n                    {resolutionWindows.map((resolutionWindow, index) => {\n                        return (\n                            <ResolutionWindowAccordion\n                                resolutionWindow={resolutionWindow}\n                                defaultExpanded={index === 0}\n                                key={resolutionWindow.round}\n                                stakeToken={dataRequest.stakeToken}\n                            />\n                        );\n                    })}\n                </div>\n                {resolutionWindows.length === 0 && (\n                    <div className={s.noWindows}>\n                        {trans('stakerReportsInfo.noWindows')}\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport StakerAnswersInfoCard from '../../containers/StakersReportInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function ResolutionWindowsInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <StakerAnswersInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import Big from 'big.js';\nimport React, { useState } from 'react';\nimport Select from '../../components/Select';\nimport Dialog from '../../compositions/Dialog';\nimport NumberInput from '../../compositions/NumberInput';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport trans from '../../translation/trans';\nimport { formatToken, toToken } from '../../utils/tokenUtils';\nimport { UnstakeFormValues, createDefaultUnstakeFormValues } from './services/createDefaultUnstakeFormValues';\nimport validateUnstakeFormValues from './services/validateUnstakeFormValues';\n\nimport s from './UnstakeDialog.module.scss';\n\ninterface Props {\n    onRequestClose: () => void;\n    onSubmit: (formValues: UnstakeFormValues) => void;\n    open: boolean;\n    dataRequest: DataRequestViewModel;\n}\n\n\nexport default function UnstakeDialog({\n    dataRequest,\n    onRequestClose,\n    onSubmit,\n    open,\n}: Props) {\n    const [formValues, setFormValues] = useState(createDefaultUnstakeFormValues());\n    const unbondedStakes = dataRequest.loggedInAccountStakes.filter(stake => !stake.bonded && new Big(stake.totalStake).gt(0));\n\n    function handleStakeChange(amount: string) {\n        setFormValues({\n            ...formValues,\n            amount: amount ? toToken(amount, dataRequest.stakeToken.decimals) : '0',\n            amountFormatted: amount ? amount : '',\n        });\n    }\n\n    function handleMaxClick() {\n        const selectedOutcomeStake = unbondedStakes[formValues.stakeIndex];\n\n        setFormValues({\n            ...formValues,\n            amount: selectedOutcomeStake.totalStake,\n            amountFormatted: formatToken(selectedOutcomeStake.totalStake, dataRequest.stakeToken.decimals),\n        });\n    }\n\n    function handleOutcomeChange(outcomeIndex: string) {\n        setFormValues({\n            ...formValues,\n            stakeIndex: Number(outcomeIndex),\n            selectedStakedOutcome: unbondedStakes[Number(outcomeIndex)],\n        });\n    }\n\n    const errors = validateUnstakeFormValues(formValues, unbondedStakes);\n\n    return (\n        <Dialog\n            open={open}\n            onRequestClose={onRequestClose}\n            onSubmitClick={() => onSubmit({\n                ...formValues,\n                selectedStakedOutcome: unbondedStakes[formValues.stakeIndex],\n            })}\n            title={trans('unstakeDialog.title')}\n            canSubmit={errors.canSubmit}\n        >\n            <form>\n                <div className={s.formItem}>\n                    <Select\n                        id=\"unstake_dialog_outcome\"\n                        value={formValues.stakeIndex.toString()}\n                        label={trans('unstakeDialog.label.answer')}\n                        onChange={handleOutcomeChange}\n                        items={unbondedStakes.map((stake, index) => ({\n                            name: `Round ${stake.round} - ${transfromOutcomeToString(stake.outcome)}`,\n                            value: index.toString(),\n                        }))}\n                    />\n                </div>\n                <div className={s.formItem}>\n                    {trans('unstakeDialog.label.staked', {\n                        stake: formatToken(unbondedStakes[formValues.stakeIndex].totalStake, dataRequest.stakeToken.decimals),\n                        tokenSymbol: dataRequest.stakeToken.symbol,\n                    })}\n                </div>\n                <div className={s.formItem}>\n                    <NumberInput\n                        label={trans('unstakeDialog.label.stakeAmount', { tokenSymbol: dataRequest.stakeToken.symbol })}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleStakeChange}\n                        onMaxClick={handleMaxClick}\n                        showMax\n                        error={errors.amount}\n                    />\n                </div>\n            </form>\n        </Dialog>\n    );\n}\n","import { UserStakeViewModel } from \"../../../models/UserStakes\";\n\nexport interface UnstakeFormValues {\n    selectedStakedOutcome?: UserStakeViewModel;\n    stakeIndex: number;\n    amount: string;\n    amountFormatted: string;\n}\n\nexport function createDefaultUnstakeFormValues(): UnstakeFormValues {\n    return {\n        selectedStakedOutcome: undefined,\n        amount: '',\n        amountFormatted: '',\n        stakeIndex: 0,\n    };\n}\n","import Big from \"big.js\";\nimport { UserStakeViewModel } from \"../../../models/UserStakes\";\nimport trans from \"../../../translation/trans\";\nimport { UnstakeFormValues } from \"./createDefaultUnstakeFormValues\";\n\ninterface UnstakeFormErrors {\n    canSubmit: boolean;\n    amount: string;\n}\n\nexport default function validateUnstakeFormValues(formValues: UnstakeFormValues, unbondedStakes: UserStakeViewModel[]): UnstakeFormErrors {\n    const errors: UnstakeFormErrors = {\n        canSubmit: true,\n        amount: '',\n    };\n\n    const selectedStakedOutcome = unbondedStakes[formValues.stakeIndex];\n\n    if (!selectedStakedOutcome) {\n        errors.canSubmit = false;\n        return errors;\n    }\n\n    if (formValues.amount) {\n        const amount = new Big(formValues.amount);\n\n        if (amount.lte(0)) {\n            errors.canSubmit = false;\n        }\n\n        if (amount.gt(selectedStakedOutcome.totalStake)) {\n            errors.canSubmit = false;\n            errors.amount = trans('unstakeDialog.errors.notEnoughStaked');\n        }\n    } else {\n        errors.canSubmit = false;\n    }\n\n    return errors;\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport UnstakeDialog from '../../containers/UnstakeDialog';\nimport { UnstakeFormValues } from '../../containers/UnstakeDialog/services/createDefaultUnstakeFormValues';\nimport { unstakeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setUnstakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function UnstakeDialogConnector() {\n    const dispatch = useDispatch();\n    const open = useSelector((store: Reducers) => store.dialogs.unstakeDialog.open);\n    // const accountStakes = useSelector((store: Reducers) => store.dataRequest.accountStakes);\n    const dataRequest = useSelector((store: Reducers) => store.dialogs.unstakeDialog.dataRequest);\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setUnstakeDialogOpen({\n            open: false,\n            dataRequest: undefined,\n        }));\n    }, [dispatch]);\n\n    const handleSubmit = useCallback((formValues: UnstakeFormValues) => {\n        if (!dataRequest || !formValues.selectedStakedOutcome) return;\n\n        dispatch(unstakeDataRequest(formValues.amount, dataRequest, formValues.selectedStakedOutcome));\n    }, [dispatch, dataRequest]);\n\n    if (!dataRequest) return null;\n\n    return (\n        <UnstakeDialog\n            onRequestClose={handleRequestClose}\n            open={open}\n            dataRequest={dataRequest}\n            onSubmit={handleSubmit}\n        />\n    );\n}\n","import React, { useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { Reducers } from '../../redux/reducers';\nimport { routePaths } from '../../routes';\n\ninterface Props {\n    page: number;\n}\n\nexport default function DataRequestsOverviewConnector({\n    page,\n}: Props) {\n    const history = useHistory();\n    const dataRequests = useSelector((store: Reducers) => store.dataRequest.dataRequests);\n    const totalItems = useSelector((store: Reducers) => store.dataRequest.totalDataRequests);\n\n    const handleRequestPageChange = useCallback((page: number) => {\n        history.push({\n            pathname: routePaths.dataRequests(page.toString()),\n            search: history.location.search,\n        });\n    }, [history]);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={dataRequests}\n            page={page}\n            totalItems={totalItems}\n            onRequestPageChange={handleRequestPageChange}\n        />\n    );\n}\n","import React from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { default as MuiCheckbox } from '@material-ui/core/Checkbox';\n\nimport s from './Checkbox.module.scss';\n\ninterface Props {\n    checked: boolean;\n    onChange: (checked: boolean) => void;\n    label: string;\n}\n\nexport default function Checkbox({\n    checked,\n    label,\n    onChange,\n}: Props) {\n    return (\n        <FormControlLabel\n            control={\n                <MuiCheckbox\n                    checked={checked}\n                    onChange={(e) => onChange(e.target.checked)}\n                    classes={{\n                        checked: s.checked\n                    }}\n                />\n            }\n            label={label}\n        />\n    );\n}\n","import React from 'react';\nimport Checkbox from '../../components/Checkbox';\nimport trans from '../../translation/trans';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\nimport s from './DataRequestsOverviewFilters.module.scss';\ninterface Props {\n    totalRequests: string;\n    filters: DataRequestFilters;\n    onFilterChange: (filters: DataRequestFilters) => void;\n}\n\nexport default function DataRequestsOverviewFilters({\n    totalRequests,\n    filters,\n    onFilterChange,\n}: Props) {\n\n    function handleArbitratorCheckboxClick(checked: boolean) {\n        onFilterChange({\n            ...filters,\n            onlyArbitratorRequests: checked,\n        });\n    }\n\n    return (\n        <div>\n            <h1>{trans('dataRequests.title')}</h1>\n            <div className={s.wrapper}>\n                <span className={s.subtitle}>{trans('dataRequest.subtitle', { total: totalRequests })}</span>\n                <Checkbox\n                    label={trans('dataRequestFilters.label.arbitrator')}\n                    checked={filters.onlyArbitratorRequests}\n                    onChange={handleArbitratorCheckboxClick}\n                />\n            </div>\n        </div>\n    );\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router';\nimport DataRequestsOverviewFilters from '../../containers/DataRequestsOverviewFilters';\nimport { setDataRequestFilters } from '../../redux/dataRequest/dataRequest';\nimport { loadDataRequests } from '../../redux/dataRequest/dataRequestAction';\nimport { Reducers } from '../../redux/reducers';\nimport { routePaths } from '../../routes';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\ninterface Params {\n    page: string;\n}\n\nexport default function DataRequestsOverviewFiltersConnector() {\n    const dispatch = useDispatch();\n    const totalRequests = useSelector((store: Reducers) => store.dataRequest.totalDataRequests);\n    const params = useParams<Params>();\n    const history = useHistory();\n    const urlParams = new URLSearchParams(history.location.search);\n    const filters: DataRequestFilters = {\n        onlyArbitratorRequests: urlParams.get('onlyArbitratorRequests') === 'true',\n    };\n\n    function onFilterChange(filters: DataRequestFilters) {\n        const url = new URLSearchParams();\n        url.append('onlyArbitratorRequests', '' + filters.onlyArbitratorRequests);\n\n        history.replace({\n            pathname: routePaths.dataRequests(params.page),\n            search: url.toString(),\n        });\n    }\n\n    useEffect(() => {\n        dispatch(setDataRequestFilters(filters));\n        dispatch(loadDataRequests(Number(params.page)));\n    }, [urlParams.toString(), dispatch, params]);\n\n    return (\n        <DataRequestsOverviewFilters\n            totalRequests={totalRequests.toString()}\n            filters={filters}\n            onFilterChange={onFilterChange}\n        />\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function HomeDataRequestsConnector() {\n    const latestRequests = useSelector((store: Reducers) => store.stats.latestRequests);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={latestRequests}\n            page={0}\n            totalItems={latestRequests.length}\n            onRequestPageChange={() => {}}\n            showPagination={false}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\nimport SearchConnector from '../../connectors/SearchConnector';\nimport trans from '../../translation/trans';\n\nimport s from './HomeHeader.module.scss';\n\nexport default function HomeHeader() {\n    return (\n        <Card>\n            <CardContent>\n                <h1 className={s.title}>{trans('homeHeader.title')}</h1>\n                <SearchConnector inputClassName={s.searchInput} className={s.search} />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport HomeHeader from '../../containers/HomeHeader';\n\n\nexport default function HomeHeaderConnector() {\n    return (\n        <HomeHeader />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../../../components/Card';\n\nimport s from './StatCard.module.scss';\n\ninterface Props {\n    label: string;\n    value: string;\n}\n\nexport default function StatCard({\n    label,\n    value,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <h2 className={s.statLabel}>{label}</h2>\n                <span className={s.statValue}>{value}</span>\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport millify from 'millify';\n\nimport s from './OracleStats.module.scss';\nimport trans from '../../translation/trans';\nimport StatCard from './components/StatCard/StatCard';\nimport { AppConfig } from '../../models/AppConfig';\n\ninterface Props {\n    totalRequests: string;\n    tokenPrice: number;\n    tokenMarketCap: number;\n    appConfig: AppConfig;\n}\n\nexport default function OracleStats({\n    totalRequests,\n    tokenMarketCap,\n    tokenPrice,\n    appConfig,\n}: Props) {\n    const marketCapFormatted = millify(tokenMarketCap);\n\n    return (\n        <div className={s.root}>\n            <StatCard\n                label={trans('oracleStats.label.totalRequests')}\n                value={totalRequests}\n            />\n            <StatCard\n                label={trans('oracleStats.label.tokenPrice', { tokenSymbol: appConfig.stakeTokenSymbol })}\n                value={`$${tokenPrice}`}\n            />\n            <StatCard\n                label={trans('oracleStats.label.tokenMarketCap')}\n                value={`$${marketCapFormatted}`}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OracleStats from '../../containers/OracleStats';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function OracleStatsConnector() {\n    const totalRequests = useSelector((store: Reducers) => store.stats.totalRequests);\n    const tokenPrice = useSelector((store: Reducers) => store.stats.tokenPrice);\n    const tokenMarketCap = useSelector((store: Reducers) => store.stats.tokenMarketCap);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    return (\n        <OracleStats\n            totalRequests={totalRequests}\n            tokenMarketCap={tokenMarketCap}\n            tokenPrice={tokenPrice}\n            appConfig={appConfig}\n        />\n    );\n}\n","import { COINGECKO_API_URL } from '../config';\n\nexport interface TokenMarketInfoResponse {\n    price: number;\n    marketCap: number;\n}\n\nexport async function getTokenMarketInfoByTicker(ticker: string, currency = 'usd'): Promise<TokenMarketInfoResponse> {\n    try {\n        const response = await fetch(`${COINGECKO_API_URL}/coins/${ticker}?localization=false`);\n        const data = await response.json();\n\n        return {\n            price: data.market_data.current_price[currency],\n            marketCap: data.market_data.market_cap[currency],\n        };\n    } catch (error) {\n        console.error('[getTokenMarketInfoByTicker]', error);\n\n        return {\n            marketCap: 0,\n            price: 0,\n        };\n    }\n}\n\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { DataRequestListItem } from '../../models/DataRequest';\n\nexport type StatsState = Readonly<{\n    totalRequests: string;\n    tokenPrice: number;\n    tokenMarketCap: number;\n    latestRequests: DataRequestListItem[];\n}>;\n\nconst initialState: StatsState = {\n    totalRequests: '0',\n    tokenPrice: 0,\n    tokenMarketCap: 0,\n    latestRequests: [],\n};\n\nconst statsSlice = createSlice({\n    initialState,\n    name: 'stats',\n    reducers: {\n        setTotalRequestsStat(state: StatsState, action: PayloadAction<string>): StatsState {\n            return ({\n                ...state,\n                totalRequests: action.payload,\n            });\n        },\n\n        setTokenPriceStat(state: StatsState, action: PayloadAction<number>): StatsState {\n            return ({\n                ...state,\n                tokenPrice: action.payload,\n            });\n        },\n\n        setTokenMarketCapStat(state: StatsState, action: PayloadAction<number>): StatsState {\n            return ({\n                ...state,\n                tokenMarketCap: action.payload,\n            });\n        },\n\n        setLatestRequestsStat(state: StatsState, action: PayloadAction<DataRequestListItem[]>): StatsState {\n            return ({\n                ...state,\n                latestRequests: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setTokenMarketCapStat,\n    setTokenPriceStat,\n    setTotalRequestsStat,\n    setLatestRequestsStat,\n} = statsSlice.actions;\n\nexport default statsSlice.reducer;\n","import { COINGECKO_TOKEN_TICKER } from \"../../config\";\nimport { getTokenMarketInfoByTicker } from \"../../services/DashboardService\";\nimport { getAllDataRequests } from \"../../services/DataRequestService\"\nimport cache from \"../../utils/cache\";\nimport { setLatestRequestsStat, setTokenMarketCapStat, setTokenPriceStat, setTotalRequestsStat } from \"./stats\";\n\nexport function loadStats() {\n    return async (dispatch: Function) => {\n        getAllDataRequests({\n            limit: 10,\n            offset: 0,\n        }, { onlyArbitratorRequests: false }).then((result) => {\n            dispatch(setTotalRequestsStat(result.total.toString()));\n            dispatch(setLatestRequestsStat(result.items));\n        });\n\n        cache('flx_token_price', async () => {\n            return getTokenMarketInfoByTicker(COINGECKO_TOKEN_TICKER);\n        }, 10000).then((result) => {\n            dispatch(setTokenPriceStat(result.price));\n            dispatch(setTokenMarketCapStat(result.marketCap));\n        });\n    }\n}\n","import { ComponentType } from 'react';\nimport AccountPage from './pages/AccountPage';\nimport ConfigPage from './pages/ConfigPage';\nimport DataRequestDetailPage from './pages/DataRequestDetailPage';\nimport DataRequestsPage from './pages/DataRequestsPage';\nimport HomePage from './pages/HomePage';\nimport SearchResultPage from './pages/SearchResultPage';\nimport trans from './translation/trans';\n\ninterface RouteProps {\n    component: ComponentType;\n    exact: boolean;\n    path: string;\n    navPath: string;\n    inNavigation: boolean;\n    key: string;\n    label: string;\n    icon?: string;\n}\n\nexport const routePaths = {\n    root: () => '/',\n\n    account: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}`,\n    accountRequests: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}/requests`,\n    accountUnclaimed: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}/unclaimed`,\n\n    config: (provider = ':provider', id = ':id') => `/config/${provider}/${id}`,\n\n    search: (query = ':query') => `/search/${query}`,\n\n    dataRequests: (page = ':page') => `/requests/${page}`,\n    dataRequestDetail: (provider = ':provider', id = ':id') => `/request/${provider}/${id}`,\n}\n\nexport const routes: RouteProps[] = [\n    {\n        component: HomePage,\n        exact: true,\n        inNavigation: true,\n        key: 'home',\n        label: trans('routes.label.home'),\n        path: routePaths.root(),\n        navPath: routePaths.root(),\n    },\n    {\n        component: SearchResultPage,\n        exact: true,\n        inNavigation: false,\n        key: 'search',\n        label: trans('routes.label.search'),\n        path: routePaths.search(),\n        navPath: routePaths.search(),\n    },\n    {\n        component: AccountPage,\n        exact: false,\n        inNavigation: false,\n        key: 'account',\n        label: trans('routes.label.account'),\n        path: routePaths.account(),\n        navPath: routePaths.account(),\n    },\n    {\n        component: DataRequestDetailPage,\n        exact: false,\n        inNavigation: false,\n        key: 'data-request-detail',\n        label: 'Data request detail',\n        path: routePaths.dataRequestDetail(),\n        navPath: routePaths.dataRequestDetail(),\n    },\n    {\n        component: DataRequestsPage,\n        exact: true,\n        inNavigation: true,\n        key: 'data-requests',\n        label: trans('routes.label.dataRequests'),\n        path: routePaths.dataRequests(),\n        navPath: routePaths.dataRequests('0'),\n    },\n    {\n        component: ConfigPage,\n        exact: true,\n        inNavigation: false,\n        key: 'config-detail',\n        label: trans('routes.label.config'),\n        path: routePaths.config(),\n        navPath: routePaths.config(),\n    },\n];\n","import useInterval from '@use-it/interval';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HOME_REFRESH_INTERVAL } from '../../config';\nimport HomeDataRequestsConnector from '../../connectors/HomeDataRequestsConnector';\nimport HomeHeaderConnector from '../../connectors/HomeHeaderConnector';\nimport OracleStatsConnector from '../../connectors/OracleStatsConnector';\n\nimport Page from '../../containers/Page';\nimport { loadStats } from '../../redux/stats/statsActions';\nimport trans from '../../translation/trans';\n\n\nexport default function HomePage() {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(loadStats());\n    }, [dispatch]);\n\n    useInterval(() => {\n        dispatch(loadStats());\n    }, HOME_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <HomeHeaderConnector />\n            <OracleStatsConnector />\n            <h2>{trans('homePage.title.latestRequests')}</h2>\n            <HomeDataRequestsConnector />\n        </Page>\n    );\n}\n","import React from 'react';\nimport { useParams } from 'react-router';\n\nimport Page from '../../containers/Page';\nimport trans from '../../translation/trans';\n\nimport s from './SearchResultPage.module.scss';\n\ninterface Params {\n    query: string;\n}\n\nexport default function SearchResultPage() {\n    const params = useParams<Params>();\n\n    return (\n        <Page>\n            <div>\n                <h1 className={s.title}>{trans('searchResultPage.title', { query: params.query })}</h1>\n            </div>\n            <div>\n                {trans('searchResultPage.noResults')}\n            </div>\n        </Page>\n    );\n}\n","import CardContent from '@material-ui/core/CardContent';\nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Route, Switch, useHistory, useLocation, useParams } from 'react-router';\nimport Card from '../../components/Card';\nimport TabBar from '../../compositions/TabBar';\nimport { TabBarItem } from '../../compositions/TabBar/TabBar';\nimport AccountDetailsInfoCardConnector from '../../connectors/AccountDetailsInfoCardConnector';\nimport Page from '../../containers/Page';\nimport { loadAccount } from '../../redux/account/accountActions';\nimport { routePaths } from '../../routes';\nimport trans from '../../translation/trans';\nimport AccountStakesPage from './sub-pages/AccountStakesPage';\nimport AccountRequestsPage from './sub-pages/AccountRequestsPage';\n\nimport s from './AccountPage.module.scss';\nimport AccountUnclaimedPage from './sub-pages/AccountUnclaimedPage';\nimport WhitelistInfoCardConnector from '../../connectors/WhitelistInfoCardConnector';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountPage() {\n    const params = useParams<Params>();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const location = useLocation();\n\n    useEffect(() => {\n        dispatch(loadAccount(params.provider, params.accountId));\n    }, [dispatch, params]);\n\n    const onTabClick = useCallback((item: TabBarItem) => {\n        history.push(item.id);\n    }, [history]);\n\n    return (\n        <Page>\n            <div>\n                <h1 className={s.title}>{params.accountId}</h1>\n            </div>\n            <AccountDetailsInfoCardConnector />\n            <WhitelistInfoCardConnector />\n            <Card className={s.card}>\n                <CardContent>\n                    <TabBar\n                        activeId={location.pathname}\n                        className={s.tabBar}\n                        onTabClick={onTabClick}\n                        items={[{\n                            id: routePaths.account(params.provider, params.accountId),\n                            label: trans('accountPage.label.stakes'),\n                            show: true,\n                        }, {\n                            id: routePaths.accountUnclaimed(params.provider, params.accountId),\n                            label: trans('accountPage.label.unclaimed'),\n                            show: true,\n                        }, {\n                            id: routePaths.accountRequests(params.provider, params.accountId),\n                            label: trans('accountPage.label.requests'),\n                            show: true,\n                        }]}\n                    />\n                    <Switch>\n                        <Route exact path={routePaths.account()} component={AccountStakesPage} />\n                        <Route exact path={routePaths.accountRequests()} component={AccountRequestsPage} />\n                        <Route exact path={routePaths.accountUnclaimed()} component={AccountUnclaimedPage} />\n                    </Switch>\n                </CardContent>\n            </Card>\n        </Page>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport useInterval from '@use-it/interval';\nimport classnames from 'classnames';\n\nimport AccountStakesInfoCardConnector from '../../connectors/AccountStakesInfoCardConnector';\nimport CallDataInfoConnector from '../../connectors/CallDataInfoConnector';\nimport DataRequestDetailHeaderConnector from '../../connectors/DataRequestDetailHeaderConnector';\nimport RequestInfoConnector from '../../connectors/RequestInfoConnector';\nimport StakeDialogConnector from '../../connectors/StakeDialogConnector';\nimport ResolutionWindowsInfoConnector from '../../connectors/ResolutionWindowsInfoConnector';\nimport Page from '../../containers/Page';\nimport { loadDataRequestById, unloadDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { Reducers } from '../../redux/reducers';\nimport { REQUEST_DETAIL_REFRESH_INTERVAL } from '../../config';\nimport UnstakeDialogConnector from '../../connectors/UnstakeDialogConnector';\n\nimport s from './DataRequestDetailPage.module.scss';\n\ninterface RouterParams {\n    id: string;\n}\n\nexport default function DataRequestDetailPage() {\n    const dispatch = useDispatch();\n    const { id } = useParams<RouterParams>();\n    const account = useSelector((store: Reducers) => store.account.account);\n\n    useEffect(() => {\n        dispatch(loadDataRequestById(id));\n\n        return () => {\n            dispatch(unloadDataRequest());\n        }\n    }, [dispatch, id]);\n\n    useInterval(() => {\n        dispatch(loadDataRequestById(id));\n    }, REQUEST_DETAIL_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <DataRequestDetailHeaderConnector />\n            <StakeDialogConnector />\n            <UnstakeDialogConnector />\n            <RequestInfoConnector className={s.card} />\n            {account && <AccountStakesInfoCardConnector />}\n            <CallDataInfoConnector className={s.card} />\n            <ResolutionWindowsInfoConnector className={classnames(s.card, s.lastCard)} />\n        </Page>\n    );\n}\n","import useInterval from '@use-it/interval';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport DataRequestsOverviewConnector from '../../connectors/DataRequestsOverviewConnector';\nimport Page from '../../containers/Page';\nimport { loadDataRequests } from '../../redux/dataRequest/dataRequestAction';\nimport { REQUEST_LIST_REFRESH_INTERVAL } from '../../config';\nimport DataRequestsOverviewFiltersConnector from '../../connectors/DataRequestsOverviewFiltersConnector';\n\ninterface Params {\n    page: string;\n}\n\nexport default function DataRequestsPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useInterval(() => {\n        dispatch(loadDataRequests(Number(params.page)));\n    }, REQUEST_LIST_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <DataRequestsOverviewFiltersConnector />\n            <DataRequestsOverviewConnector page={Number(params.page)} />\n        </Page>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport OracleConfigInfoCardConnector from '../../connectors/OracleConfigInfoCardConnector';\nimport Page from '../../containers/Page';\nimport { loadOracleConfig } from '../../redux/oracleConfig/oracleConfigActions';\nimport trans from '../../translation/trans';\n\ninterface Params {\n    id: string;\n    provider: string;\n}\n\nexport default function ConfigPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadOracleConfig(params.id));\n    }, [dispatch, params.id]);\n\n    return (\n        <Page>\n            <h1>{trans('oracleConfig.title', { id: params.id })}</h1>\n            <OracleConfigInfoCardConnector />\n        </Page>\n    );\n}\n","import { getOracleConfigById } from '../../services/OracleConfigService';\nimport { setOracleConfigDetail, setOracleConfigLoading } from './oracleConfig';\n\nexport function loadOracleConfig(id: string) {\n    return async (dispatch: Function) => {\n        dispatch(setOracleConfigLoading(true));\n        const config = await getOracleConfigById(id);\n        dispatch(setOracleConfigDetail(config));\n        dispatch(setOracleConfigLoading(false));\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport dataRequest, { DataRequestsState } from './dataRequest/dataRequest';\nimport account, { AccountState } from './account/account';\nimport dialogs, { DialogsState } from './dialogs/dialogs';\nimport stats, { StatsState } from './stats/stats';\nimport oracleConfig, { OracleConfigState } from './oracleConfig/oracleConfig';\nimport appconfig, { AppConfigState } from './appconfig/appconfig';\n\nexport interface Reducers {\n    dataRequest: DataRequestsState;\n    account: AccountState;\n    dialogs: DialogsState;\n    stats: StatsState;\n    oracleConfig: OracleConfigState;\n    appconfig: AppConfigState;\n}\n\nexport default combineReducers<Reducers>({\n    account,\n    appconfig,\n    dataRequest,\n    dialogs,\n    stats,\n    oracleConfig,\n});\n","import {\n    applyMiddleware,\n    CombinedState,\n    createStore,\n    Store,\n    StoreEnhancer,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport reducers, { Reducers } from './reducers';\n\nconst createEnhancer = (): StoreEnhancer => (process.env.REACT_APP_APP_ENV !== 'production'\n    ? composeWithDevTools(applyMiddleware(thunk))\n    : applyMiddleware(thunk)\n);\n\nexport default function configureStore(preloadedState: Record<string, any> = {}): Store<CombinedState<Reducers>> {\n    const enhancer = createEnhancer();\n    return createStore(reducers, preloadedState, enhancer);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { StylesProvider } from '@material-ui/core/styles';\n\nimport { routes } from './routes';\nimport configureStore from './redux/store';\nimport { initProviders } from './services/providers/ProviderRegistry';\n\nimport './styles/global.module.scss';\n\nconst store = configureStore({});\ninitProviders();\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter basename=\"/\" hashType=\"hashbang\">\n            <StylesProvider injectFirst>\n                <Switch>\n                    {routes.map(route => <Route {...route} key={route.key} />)}\n                </Switch>\n            </StylesProvider>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"CallDataInfoCard_titleWrapper__27iZZ\",\"title\":\"CallDataInfoCard_title__y9qga\",\"label\":\"CallDataInfoCard_label__KSOgB\",\"table\":\"CallDataInfoCard_table__2FKa3\",\"tableHeadRow\":\"CallDataInfoCard_tableHeadRow__RWXv0\",\"tableItem\":\"CallDataInfoCard_tableItem__3hv8p\",\"tableItemInner\":\"CallDataInfoCard_tableItemInner__1JjPs\",\"possibleOutcomes\":\"CallDataInfoCard_possibleOutcomes__2zyN7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"AccountStakesInfoCard_card__2oQpV\",\"titleWrapper\":\"AccountStakesInfoCard_titleWrapper__XsRI6\",\"title\":\"AccountStakesInfoCard_title__xXeRR\",\"noStakes\":\"AccountStakesInfoCard_noStakes__nGDmS\",\"claim\":\"AccountStakesInfoCard_claim__2MMmZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"StakeDialog_form__2Jewc\",\"formItem\":\"StakeDialog_formItem__11Oc1\",\"formInput\":\"StakeDialog_formInput__1nO1v\",\"error\":\"StakeDialog_error__3U3jC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"DataRequestsOverview_root__1C_f3\",\"container\":\"DataRequestsOverview_container__gtVbk\",\"tableHead\":\"DataRequestsOverview_tableHead__1UCIA\",\"linkCell\":\"DataRequestsOverview_linkCell__v_ecT\",\"pagination\":\"DataRequestsOverview_pagination__3VSEr\",\"noRequests\":\"DataRequestsOverview_noRequests__2MHyM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"Dialog_paper__XrzDE\",\"title\":\"Dialog_title__2o5jO\",\"content\":\"Dialog_content__2Ebv9\",\"cancelButton\":\"Dialog_cancelButton__3SRaV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"DataRequestDetailHeader_header__22oVK\",\"button\":\"DataRequestDetailHeader_button__zUMJ0\"};"],"sourceRoot":""}