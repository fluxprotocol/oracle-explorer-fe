{"version":3,"sources":["containers/OutcomeStakesOverview/OutcomeStakesOverview.module.scss","components/OptionSwitch/OptionSwitch.module.scss","containers/ResolutionWindowAccordion/components/StakerReport/StakerReport.module.scss","containers/AccountStakesInfoCard/AccountStakesInfoCard.module.scss","containers/RequestInfoCard/RequestInfoCard.module.scss","containers/UnstakeDialog/UnstakeDialog.module.scss","pages/DataRequestDetailPage/DataRequestDetailPage.module.scss","compositions/TabBar/TabBar.module.scss","containers/AccountDetailsInfoCard/AccountDetailsInfoCard.module.scss","containers/Footer/Footer.module.scss","pages/AccountPage/AccountPage.module.scss","containers/ResolutionWindowAccordion/components/OutcomeStakeInfo/OutcomeStakeInfo.module.scss","containers/StakersReportInfoCard/ResolutionWindowInfoCard.module.scss","containers/ResolutionWindowAccordion/ResolutionWindowAccordion.module.scss","containers/HomeHeader/HomeHeader.module.scss","containers/OracleStats/components/StatCard/StatCard.module.scss","compositions/LabeledText/LabeledText.module.scss","containers/InformationRows/InformationRows.module.scss","containers/Page/Page.module.scss","containers/DataRequestsOverviewFilters/DataRequestsOverviewFilters.module.scss","components/Card/Card.module.scss","components/FakeLinkButton/FakeLinkButton.module.scss","containers/Pagination/Pagination.module.scss","components/Button/Button.module.scss","components/Select/Select.module.scss","components/Checkbox/Checkbox.module.scss","containers/OracleStats/OracleStats.module.scss","pages/SearchResultPage/SearchResultPage.module.scss","containers/Menu/Menu.module.scss","components/Card/Card.tsx","compositions/TabBar/TabBar.tsx","compositions/LabeledText/LabeledText.tsx","containers/InformationRows/InformationRows.tsx","translation/trans.ts","utils/tokenUtils.ts","containers/AccountDetailsInfoCard/AccountDetailsInfoCard.tsx","connectors/AccountDetailsInfoCardConnector/AccountDetailsInfoCardConnector.tsx","components/FakeLinkButton/FakeLinkButton.tsx","components/SearchInput/SearchInput.tsx","containers/SearchForm/SearchForm.tsx","models/DataRequestOutcome.ts","models/DataRequest.ts","utils/dateUtils.ts","models/OracleConfig.ts","models/UserStakes.ts","models/ResolutionWindow.ts","config.ts","services/GraphQLService.ts","services/DataRequestService.ts","services/SearchService.ts","connectors/SearchConnector/SearchConnector.tsx","containers/Menu/Menu.tsx","services/AccountService.ts","utils/cache.ts","services/providers/near/NearService.ts","services/providers/near/NearConnectService.ts","services/providers/ProviderRegistry.ts","services/providers/near/NearProvider.ts","models/OutcomeStake.ts","services/UserStakeService.ts","redux/account/account.ts","redux/account/accountActions.ts","connectors/MenuConnector/MenuConnector.tsx","containers/Footer/Footer.tsx","containers/Page/Page.tsx","containers/Pagination/Pagination.tsx","containers/OutcomeStakesOverview/OutcomeStakesOverview.tsx","connectors/AccountOutcomeStakesConnector/AccountOutcomeStakesConnector.tsx","pages/AccountPage/sub-pages/AccountStakesPage/AccountStakesPage.tsx","pages/AccountPage/sub-pages/AccountTransactionsPage/AccountTransactionsPage.tsx","connectors/AccountUnclaimedStakesConnector/AccountUnclaimedStakesConnector.tsx","pages/AccountPage/sub-pages/AccountUnclaimedPage/AccountUnclaimedPage.tsx","containers/ResolutionWindowAccordion/components/OutcomeStakeInfo/OutcomeStakeInfo.tsx","containers/AccountStakesInfoCard/AccountStakesInfoCard.tsx","connectors/AccountStakesInfoCardConnector/AccountStakesInfoCardConnector.tsx","containers/CallDataInfoCard/CallDataInfoCard.tsx","connectors/CallDataInfoConnector/CallDataInfoConnector.tsx","components/Button/Button.tsx","compositions/Countdown/Countdown.tsx","containers/DataRequestDetailHeader/DataRequestDetailHeader.tsx","utils/bigUtils.ts","redux/dataRequest/dataRequest.ts","redux/dataRequest/dataRequestAction.ts","redux/dialogs/dialogs.ts","connectors/DataRequestDetailHeaderConnector/DataRequestDetailHeaderConnector.tsx","containers/RequestInfoCard/RequestInfoCard.tsx","connectors/RequestInfoConnector/RequestInfoConnector.tsx","components/Input/Input.tsx","components/OptionSwitch/OptionSwitch.tsx","components/Select/Select.tsx","compositions/Dialog/Dialog.tsx","containers/StakeDialog/StakeDialog.tsx","containers/StakeDialog/services/createDefaultStakeFormValues.ts","containers/StakeDialog/services/validateStakeFormValues.ts","connectors/StakeDialogConnector/StakeDialogConnector.tsx","containers/ResolutionWindowAccordion/components/StakerReport/StakerReport.tsx","containers/ResolutionWindowAccordion/ResolutionWindowAccordion.tsx","containers/StakersReportInfoCard/ResolutionWindowInfoCard.tsx","connectors/ResolutionWindowsInfoConnector/ResolutionWindowsInfoConnector.tsx","compositions/NumberInput/NumberInput.tsx","containers/UnstakeDialog/UnstakeDialog.tsx","containers/UnstakeDialog/services/createDefaultUnstakeFormValues.ts","containers/UnstakeDialog/services/validateUnstakeFormValues.ts","connectors/UnstakeDialogConnector/UnstakeDialogConnector.tsx","containers/DataRequestsOverview/DataRequestsOverview.tsx","connectors/DataRequestsOverviewConnector/DataRequestsOverviewConnector.tsx","components/Checkbox/Checkbox.tsx","containers/DataRequestsOverviewFilters/DataRequestsOverviewFilters.tsx","connectors/DataRequestsOverviewFiltersConnector/DataRequestsOverviewFiltersConnector.tsx","connectors/HomeDataRequestsConnector/HomeDataRequestsConnector.tsx","containers/HomeHeader/HomeHeader.tsx","connectors/HomeHeaderConnector/HomeHeaderConnector.tsx","containers/OracleStats/components/StatCard/StatCard.tsx","containers/OracleStats/OracleStats.tsx","connectors/OracleStatsConnector/OracleStatsConnector.tsx","services/DashboardService.ts","redux/stats/stats.ts","redux/stats/statsActions.ts","routes.ts","pages/HomePage/HomePage.tsx","pages/SearchResultPage/SearchResultPage.tsx","pages/AccountPage/AccountPage.tsx","pages/DataRequestDetailPage/DataRequestDetailPage.tsx","pages/DataRequestsPage/DataRequestsPage.tsx","redux/reducers.ts","redux/store.ts","index.tsx","containers/CallDataInfoCard/CallDataInfoCard.module.scss","containers/StakeDialog/StakeDialog.module.scss","containers/DataRequestDetailHeader/DataRequestDetailHeader.module.scss","compositions/Dialog/Dialog.module.scss","containers/DataRequestsOverview/DataRequestsOverview.module.scss"],"names":["module","exports","Card","props","className","classnames","s","card","TabBar","items","onTabClick","activeId","variant","tabClassName","Tabs","classes","indicator","root","value","filter","tab","show","map","Tab","onClick","label","id","LabeledText","children","InformationRows","rows","row","item","trans","key","attributes","uppercaseFirstLetter","result","translations","text","resultWithAttributes","options","replace","word","undefined","replaceAttributes","charAt","toUpperCase","substring","formatToken","amount","decimals","dp","denominator","Big","pow","div","round","toFixed","toToken","mul","AccountDetailsInfoCard","account","accountInfo","CardContent","titleWrapper","title","balance","providerId","activeStaking","totalStaked","totalClaimed","AccountDetailsInfoCardConnector","accountDetail","useSelector","store","info","FakeLinkButton","button","SearchInput","onChange","handleChange","useCallback","event","currentTarget","TextField","type","InputProps","endAdornment","InputAdornment","position","SearchForm","onSearch","inputClassName","useState","query","setQuery","handleSearchSubmit","preventDefault","onSubmit","v","hidden","OutcomeType","DataRequestType","prettyFormatDate","date","format","transformToOutcome","outcome","Invalid","answer","slice","Answer","transfromOutcomeToString","transformToOracleConfig","data","resolutionFeePercentage","resolution_fee_percentage","transformToUserStakes","userStakes","forEach","userStake","currentOutcomeStakes","account_id","push","stake","total_stake","dataRequestId","data_request_id","accountId","finalizedOutcome","data_request","finalized_outcome","claimPayout","claim","payout","transformToDataRequestListItem","Date","Number","requestor","sources","length","Api","Arbitrator","transformToDataRequestViewModel","nanoSeconds","resolutionWindows","resolution_windows","rw","highestOutcomeStake","outcomeStakes","outcome_stakes","os","add","outcomeStake","lt","bondSize","bond_size","endTime","end_time","filled","eq","toString","user_stakes","bondedOutcome","bonded_outcome","winningOutcomeStake","transformToResolutionWindow","reduce","prev","curr","config","settlementTime","settlement_time","description","endPoint","end_point","sourcePath","source_path","outcomes","targetContract","target_contract","finalArbitratorTriggered","final_arbitrator_triggered","API_URL","process","COINGECKO_API_URL","DEFAULT_PAGINATION_LIMIT","NEAR_NETWORK","NEAR_NULL_CONTRACT","NEAR_FLUX_TOKEN_ID","NEAR_ORACLE_CONTRACT_ID","NEAR_MAX_GAS","STORAGE_BASE","PE","cache","InMemoryCache","link","createHttpLink","uri","graphqlClient","ApolloClient","defaultOptions","watchQuery","fetchPolicy","getAllDataRequests","a","limit","offset","onlyArbitratorRequests","gql","variables","response","paginatedDataRequests","dataRequests","dr","total","console","error","getDataRequestById","dataRequest","doesDataRequestExists","request","search","isNaN","url","routePaths","dataRequestDetail","SearchConnector","history","useHistory","handleSearch","Menu","onLoginClick","onLogoutClick","menuAnchorEl","setMenuAnchorEl","handleMenuClose","menu","topBar","to","logoWrapper","logo","bottomBar","menuItems","routes","route","inNavigation","menuItem","menuLink","activeClassName","exact","navPath","accountLinks","mobileMenu","IconButton","iconButton","anchorEl","keepMounted","open","Boolean","onClose","disabled","getAccountInfo","active_staking","total_staked","total_claimed","cacheStorage","Map","creationPromises","createCallback","ttl","get","onGoingRequest","createRequest","set","createdItem","setTimeout","delete","batchSendTransactions","walletConnection","txs","callbackUrl","getAccountId","_near","connection","signer","getPublicKey","networkId","localKey","provider","block","finality","blockHash","utils","serialize","base_decode","header","hash","Promise","all","index","receiverId","transactionOptions","actions","tx","transactions","functionCall","methodName","args","BN","gas","accessKeyForTransaction","accessKey","Error","publicKey","PublicKey","from","public_key","nonce","access_key","createTransaction","resultTxs","requestSignTransactions","getTokenBalance","viewFunction","getMinimumStorage","minimumBalance","getStorageBalance","storage","available","createNetworkConfig","connectConfig","nodeUrl","walletUrl","customNodeUrl","contractName","customWalletUrl","initialBalance","connectNear","nearInstance","networkConfig","connect","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","providerInitPromise","NearProvider","storageDeposit","near","sdkInstance","FluxSdk","network","nullContractId","this","WalletConnection","requestSignIn","signOut","isSignedIn","stakeOutcome","minimumStorageBalance","currentStorage","getLoggedInAccountId","receiver_id","msg","JSON","stringify","request_id","resolution_round","providers","p","init","getProviderById","find","getLoggedInProvider","isLoggedIn","loginWithProvider","login","logoutWithProvider","logout","getAccountInfoWithProvider","getLoggedInAccount","loggedInAccountId","stakeWithProvider","finalizeWithProvider","finalize","claimWithProvider","unstakeWithProvider","unstake","combineOutcomeStakes","internalId","currentItem","Array","values","getUserStakesByRequestIdAndAccountId","requestId","stakes","getUserStakesByRequestId","getUserStakesByAccountId","filters","getUnclaimedStakesByAccountId","initialState","loading","accountStakes","accountStakesTotal","unclaimedStakes","accountSlice","createSlice","name","reducers","setAccountErrors","state","action","payload","setAccountLoading","setAccount","setAccountDetail","setAccountStakes","setAccountStakesTotal","setAccountInfo","setAccountUnclaimedStakes","loadAccountStakes","page","dispatch","MenuConnector","useDispatch","handleLoginClick","handleLogoutClick","useEffect","Footer","footer","footerWrapper","Page","hasNavigation","body","Pagination","onChangePage","rowsPerPage","pagination","aria-label","currentPage","totalPages","OutcomeStakesOverview","onRequestPageChange","totalItems","showPagination","TableContainer","container","component","Paper","Table","table","TableHead","tableHead","TableRow","TableCell","TableBody","linkCell","Math","ceil","AccountOutcomeStakesConnector","params","useParams","setPage","handleRequestPageChange","newPage","AccountStakesPage","AccountTransactionsPage","AccountUnclaimedStakesConnector","AccountUnclaimedPage","OutcomeStakeInfo","tableComponent","outcomeInfo","EmptyDiv","AccountStakesInfoCard","noStakes","AccountStakesInfoCardConnector","CallDataInfoCard","tableHeadRow","source","tableItem","tableItemInner","possibleOutcomes","CallDataInfoConnector","Button","Countdown","onComplete","DataRequestDetailHeader","onStakeClick","onClaimClick","onUnstakeClick","onFinalizeClick","now","getTime","canInteract","setInteract","currentResolutionWindow","isFinalized","canFinalize","canDataRequestBeFinalized","roundStakes","stakedOnRound","roundStake","onCountdownComplete","gt","dataRequestsSlice","detailLoading","totalDataRequests","dataRequestFilters","setDataRequestsErrors","setDataRequestsLoading","setDataRequestDetailLoading","setDataRequests","setDataRequestDetail","setTotalDataRequest","setDataRequestAccountStakes","setDataRequestFilters","loadDataRequests","getState","loadDataRequestById","accountStakesRequest","accountOutcomeStakes","dialogsSlice","stakeDialog","unstakeDialog","setStakeDialogOpen","setUnstakeDialogOpen","DataRequestDetailHeaderConnector","handleStakeClick","handleUnstakeClick","handleFinalizeClick","finalizeDataRequest","handleClaimClick","claimDataRequest","RequestInfoCard","RequestInfoConnector","Input","input","helperText","OptionSwitch","labelA","labelB","Switch","thumb","track","switchBase","_","checked","Select","InputLabel","labelId","select","target","MenuItem","Dialog","isInfoDialog","onRequestClose","onSubmitClick","canSubmit","hideButtons","paperClassName","paper","DialogTitle","DialogContent","content","DialogActions","cancelButton","confirmButton","StakeDialog","amountFormatted","isInvalid","createDefaultStakeFormValues","formValues","setFormValues","handleAnswerChange","errors","message","accountBalance","includes","lte","currentRound","previousRound","validateStakeFormValues","form","formItem","formInput","StakeDialogConnector","dialogs","handleRequestClose","handleSubmit","stakeFormValues","stakeDataRequest","StakerReport","stakerReport","Object","keys","ResolutionWindowAccordion","resolutionWindow","defaultExpanded","percentageFilled","Accordion","accordion","AccordionSummary","expandIcon","roundTitle","AccordionDetails","details","ResolutionWindowInfoCard","reverse","noWindows","ResolutionWindowsInfoConnector","NumberInput","showMax","onMaxClick","UnstakeDialog","outcomeIndex","validateUnstakeFormValues","selectedOutcomeStake","UnstakeDialogConnector","unstakeDataRequest","DataRequestsOverview","DataRequestsOverviewConnector","pathname","location","Checkbox","FormControlLabel","control","e","DataRequestsOverviewFilters","totalRequests","onFilterChange","wrapper","subtitle","DataRequestsOverviewFiltersConnector","urlParams","URLSearchParams","append","HomeDataRequestsConnector","latestRequests","stats","HomeHeader","searchInput","HomeHeaderConnector","StatCard","statLabel","statValue","OracleStats","tokenMarketCap","tokenPrice","marketCapFormatted","millify","OracleStatsConnector","getTokenMarketInfoByTicker","ticker","currency","fetch","json","price","market_data","current_price","marketCap","market_cap","statsSlice","setTotalRequestsStat","setTokenPriceStat","setTokenMarketCapStat","setLatestRequestsStat","loadStats","then","accountTransactions","accountUnclaimed","useInterval","path","useLocation","tabBar","lastCard","combineReducers","createEnhancer","REACT_APP_APP_ENV","composeWithDevTools","applyMiddleware","thunk","preloadedState","enhancer","createStore","configureStore","initProviders","ReactDOM","render","basename","hashType","StylesProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.181b1a97.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"OutcomeStakesOverview_container__d2gou\",\"tableHead\":\"OutcomeStakesOverview_tableHead__2uKGi\",\"linkCell\":\"OutcomeStakesOverview_linkCell__1JQo4\",\"pagination\":\"OutcomeStakesOverview_pagination__9qflK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"OptionSwitch_root__URwjr\",\"options\":\"OptionSwitch_options__3MHNp\",\"thumb\":\"OptionSwitch_thumb__2cImY\",\"track\":\"OptionSwitch_track__2IbZB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"StakerReport_container__1KMDE\",\"link\":\"StakerReport_link__28dEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"AccountStakesInfoCard_card__2oQpV\",\"titleWrapper\":\"AccountStakesInfoCard_titleWrapper__XsRI6\",\"title\":\"AccountStakesInfoCard_title__xXeRR\",\"noStakes\":\"AccountStakesInfoCard_noStakes__nGDmS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"RequestInfoCard_titleWrapper__3noPW\",\"title\":\"RequestInfoCard_title__3_LHr\",\"requestDetails\":\"RequestInfoCard_requestDetails__1YEfP\",\"item\":\"RequestInfoCard_item__10SUD\",\"link\":\"RequestInfoCard_link__1uLuv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"UnstakeDialog_form__C2-VH\",\"formItem\":\"UnstakeDialog_formItem__3mtQ-\",\"formInput\":\"UnstakeDialog_formInput__3LoeJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"DataRequestDetailPage_card__3etft\",\"lastCard\":\"DataRequestDetailPage_lastCard__1-jEK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TabBar_root__2tnOA\",\"tab\":\"TabBar_tab__t4I0-\",\"indicator\":\"TabBar_indicator__2rgIT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"AccountDetailsInfoCard_titleWrapper__13sTy\",\"card\":\"AccountDetailsInfoCard_card__15fyo\",\"title\":\"AccountDetailsInfoCard_title__1q59t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__30IoI\",\"footerWrapper\":\"Footer_footerWrapper__2JRgQ\",\"logo\":\"Footer_logo__1GRAA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabBar\":\"AccountPage_tabBar__nyIhL\",\"card\":\"AccountPage_card__21C88\",\"title\":\"AccountPage_title__21f5o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"OutcomeStakeInfo_container__1nmxk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"ResolutionWindowInfoCard_titleWrapper__1xIda\",\"title\":\"ResolutionWindowInfoCard_title__14x7-\",\"noWindows\":\"ResolutionWindowInfoCard_noWindows__2uZTP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accordion\":\"ResolutionWindowAccordion_accordion__XN6Ij\",\"roundTitle\":\"ResolutionWindowAccordion_roundTitle__1OvP0\",\"details\":\"ResolutionWindowAccordion_details__9JJHE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HomeHeader_title__3isjk\",\"search\":\"HomeHeader_search__2w-zi\",\"searchInput\":\"HomeHeader_searchInput__39vB0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"StatCard_card__1M2jM\",\"statLabel\":\"StatCard_statLabel__N14eN\",\"statValue\":\"StatCard_statValue__F5gOf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"LabeledText_root___tErh\",\"label\":\"LabeledText_label__3rjG2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"InformationRows_root__1CR4v\",\"item\":\"InformationRows_item__1QOpX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Page_page__1vav1\",\"body\":\"Page_body__34Ach\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subtitle\":\"DataRequestsOverviewFilters_subtitle__3ViXR\",\"wrapper\":\"DataRequestsOverviewFilters_wrapper__2lMdn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__35wN0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FakeLinkButton_button__3y9OQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__CcIoD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Lf63\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"Select_select__JK0vz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checked\":\"Checkbox_checked__2Gh-t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"OracleStats_root__2Ae20\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"SearchResultPage_title__1YHPd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Menu_root__3JE0d\",\"menu\":\"Menu_menu__2sZJU\",\"topBar\":\"Menu_topBar__1xIMt\",\"bottomBar\":\"Menu_bottomBar__1J-Xi\",\"menuItems\":\"Menu_menuItems__1E3rU\",\"accountLinks\":\"Menu_accountLinks__3tRwW\",\"menuItem\":\"Menu_menuItem__3mHfR\",\"menuLink\":\"Menu_menuLink__2oVrc\",\"menuLink--active\":\"Menu_menuLink--active__3XNkb\",\"link\":\"Menu_link__1lvRI\",\"logoWrapper\":\"Menu_logoWrapper__3tZ4v\",\"logo\":\"Menu_logo__2SxFW\",\"mobileMenu\":\"Menu_mobileMenu__3VazV\"};","import React from 'react';\nimport classnames from 'classnames';\nimport { CardProps, default as MuiCard } from '@material-ui/core/Card';\n\nimport s from './Card.module.scss';\n\nexport default function Card(props: CardProps) {\n    return (\n        <MuiCard {...props} className={classnames(s.card, props.className)} />\n    );\n}\n","import React, { ReactElement } from 'react';\nimport classnames from 'classnames';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport s from './TabBar.module.scss';\n\nexport interface TabBarItem {\n    id: string;\n    label: string;\n    show: boolean;\n}\n\ninterface Props {\n    items: TabBarItem[];\n    activeId: string;\n    onTabClick: (item: TabBarItem) => void;\n    className?: string;\n    tabClassName?: string;\n    variant?: 'standard' | 'scrollable' | 'fullWidth';\n}\n\nexport default function TabBar({\n    items,\n    onTabClick,\n    activeId,\n    variant = 'standard',\n    tabClassName = '',\n    className = '',\n}: Props): ReactElement {\n    return (\n        <Tabs\n            classes={{ indicator: s.indicator }}\n            className={classnames(s.root, className)}\n            variant={variant}\n            value={activeId}\n        >\n            {items.filter(tab => tab.show).map(tab => (\n                <Tab\n                    key={tab.id}\n                    onClick={() => onTabClick(tab)}\n                    className={classnames(s.tab, tabClassName)}\n                    label={tab.label}\n                    value={tab.id}\n                />\n            ))}\n        </Tabs>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nimport s from './LabeledText.module.scss';\n\ninterface Props {\n    label: string;\n    className?: string;\n}\n\nexport default function LabeledText({\n    label,\n    children,\n    className,\n}: PropsWithChildren<Props>) {\n    return (\n        <div className={classnames(s.root, className)}>\n            <span className={s.label}>{label}</span>\n            <span>{children}</span>\n        </div>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport LabeledText from '../../compositions/LabeledText';\n\nimport s from './InformationRows.module.scss';\n\nexport interface InformationRow {\n    label: string;\n    value: ReactElement;\n}\n\ninterface Props {\n    rows: InformationRow[];\n}\n\nexport default function InformationRows({\n    rows,\n}: Props) {\n    return (\n        <div className={s.root}>\n            {rows.map((row) => {\n                return (\n                    <LabeledText key={row.label} className={s.item} label={row.label}>\n                        {row.value}\n                    </LabeledText>\n                );\n            })}\n        </div>\n    );\n}\n","import translations from './lang/translations.eng.json';\n\ninterface Attributes {\n    [key: string]: string;\n}\n\nfunction replaceAttributes(label: string, options: Attributes = {}): string {\n    // Replaces any \":key\" with a value in the options\n    return label.replace(/:(\\w+)/gi, (word) => {\n        const key = word.replace(/^:/, '');\n\n        if (options[key] === undefined || options[key] === null) {\n            return '';\n        }\n\n        return options[key];\n    });\n}\n\nexport function ucFirstLetter(text: string): string {\n    return text.charAt(0).toUpperCase() + text.substring(1);\n}\n\n\nexport default function trans(key: string, attributes?: Attributes, uppercaseFirstLetter?: boolean): string {\n    // @ts-ignore\n    const result: string = translations[key];\n\n    if (!result) {\n        return key;\n    }\n\n    const resultWithAttributes = replaceAttributes(result, attributes);\n    return uppercaseFirstLetter ? ucFirstLetter(resultWithAttributes) : resultWithAttributes;\n}\n\nexport function booleanToYesNo(bool = false): string {\n    return bool ? trans('global.yes') : trans('global.no');\n}\n","import Big from \"big.js\";\n\n/**\n * Converts the smalles unit to a human readable amount\n *\n * @export\n * @param {string} amount\n * @param {number} [decimals=18]\n * @param {number} [dp=2]\n * @return {string}\n */\nexport function formatToken(amount: string, decimals = 18, dp = 2): string {\n    const denominator = new Big(10).pow(decimals);\n    return new Big(amount).div(denominator).round(dp, 0).toFixed(dp);\n}\n\n/**\n * Converts the amount to the smallest unit (default 18)\n *\n * @export\n * @param {string} amount\n * @param {number} [decimals=18]\n * @return {string}\n */\nexport function toToken(amount: string, decimals = 18): string {\n    const denominator = new Big(10).pow(decimals);\n    return new Big(amount).mul(denominator).toFixed(0);\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\nimport InformationRows from '../InformationRows';\nimport trans from '../../translation/trans';\nimport { Account, AccountInfo } from '../../models/Account';\n\nimport s from './AccountDetailsInfoCard.module.scss';\nimport { formatToken } from '../../utils/tokenUtils';\n\nexport interface Props {\n    account?: Account;\n    accountInfo: AccountInfo;\n}\n\nexport default function AccountDetailsInfoCard({\n    account,\n    accountInfo,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('accountDetailsInfoCard.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[\n                        {\n                            label: trans('accountDetailsInfoCard.label.balance'),\n                            value: <span>{formatToken(account?.balance ?? '0')} FLX</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.provider'),\n                            value: <span>{account?.providerId}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.activeStaking'),\n                            value: <span>{formatToken(accountInfo.activeStaking)} FLX</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.totalStaked'),\n                            value: <span>{formatToken(accountInfo.totalStaked)} FLX</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.totalClaimed'),\n                            value: <span>{formatToken(accountInfo.totalClaimed)} FLX</span>,\n                        }\n                    ]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport AccountDetailsInfoCard from '../../containers/AccountDetailsInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\nexport default function AccountDetailsInfoCardConnector() {\n    const accountDetail = useSelector((store: Reducers) => store.account.accountDetail);\n\n    return (\n        <AccountDetailsInfoCard\n            account={accountDetail.account}\n            accountInfo={accountDetail.info}\n        />\n    );\n}\n","import React, { FormEvent, PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nimport s from './FakeLinkButton.module.scss';\n\ninterface Props {\n    className?: string;\n    onClick?: (event: FormEvent) => void;\n}\n\nexport default function FakeLinkButton({\n    children,\n    className,\n    onClick,\n}: PropsWithChildren<Props>) {\n    return (\n        <button onClick={onClick} className={classnames(s.button, className)}>\n            {children}\n        </button>\n    );\n}\n","import React, { FormEvent, useCallback } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SearchIcon from '@material-ui/icons/Search';\n\ninterface Props {\n    label: string;\n    value?: string;\n    className?: string;\n    onChange?: (value: string) => void;\n}\n\nexport default function SearchInput({\n    label,\n    className,\n    value,\n    onChange = () => {},\n}: Props) {\n    const handleChange = useCallback((event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        onChange(event.currentTarget.value);\n    }, [onChange]);\n\n    return (\n        <TextField\n            label={label}\n            className={className}\n            value={value}\n            type=\"search\"\n            onChange={handleChange}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"start\">\n                        <SearchIcon />\n                    </InputAdornment>\n                ),\n            }}\n        />\n    );\n}\n","import React, { FormEvent, useCallback, useState } from 'react';\nimport SearchInput from '../../components/SearchInput';\nimport trans from '../../translation/trans';\n\ninterface Props {\n    onSearch: (query: string) => void;\n    className?: string;\n    inputClassName?: string;\n}\n\nexport default function SearchForm({\n    onSearch,\n    className,\n    inputClassName,\n}: Props) {\n    const [query, setQuery] = useState('');\n    const handleSearchSubmit = useCallback((event: FormEvent) => {\n        event.preventDefault();\n        onSearch(query);\n    }, [query, onSearch]);\n\n    return (\n        <form className={className} onSubmit={handleSearchSubmit}>\n            <SearchInput\n                label={trans('menu.label.search')}\n                onChange={v => setQuery(v)}\n                value={query}\n                className={inputClassName}\n            />\n            <input type=\"submit\" hidden />\n        </form>\n    );\n}\n","import trans from \"../translation/trans\";\n\nexport enum OutcomeType {\n    Answer,\n    Invalid\n}\n\nexport interface OutcomeAnswer {\n    answer: string;\n    type: OutcomeType.Answer;\n}\n\nexport interface OutcomeInvalid {\n    type: OutcomeType.Invalid;\n}\n\nexport type Outcome = OutcomeAnswer | OutcomeInvalid;\n\nexport function transformToOutcome(outcome: string): Outcome {\n    if (outcome === 'Invalid') {\n        return {\n            type: OutcomeType.Invalid,\n        }\n    }\n\n    const answer = outcome.replace('Answer(', '');\n\n    return {\n        answer: answer.slice(0, -1),\n        type: OutcomeType.Answer,\n    };\n}\n\nexport function transfromOutcomeToString(outcome: Outcome): string {\n    if (outcome.type === OutcomeType.Invalid) {\n        return trans('outcome.invalid');\n    }\n\n    return `\"${outcome.answer}\"`;\n}\n","import Big from \"big.js\";\nimport trans from \"../translation/trans\";\nimport { nsToMs } from \"../utils/dateUtils\";\nimport { Outcome, transformToOutcome } from \"./DataRequestOutcome\";\nimport { OracleConfig, OracleConfigGraphData, transformToOracleConfig } from \"./OracleConfig\";\nimport { ResolutionWindow, ResolutionWindowGraphData, transformToResolutionWindow } from \"./ResolutionWindow\";\n\nexport interface DataRequestSource {\n    endPoint: string;\n    sourcePath: string;\n}\n\nexport enum DataRequestType {\n    Arbitrator,\n    Api\n}\nexport interface DataRequestListItem {\n    id: string;\n    date: Date;\n    requestor: string;\n    finalized_outcome?: Outcome;\n    type: DataRequestType;\n}\n\nexport interface DataRequestViewModel extends DataRequestListItem {\n    description?: string;\n    config: OracleConfig;\n    sources: DataRequestSource[];\n    outcomes?: string[];\n    resolutionWindows: ResolutionWindow[];\n    totalStaked: string;\n    finalized_outcome?: Outcome;\n    targetContract: string;\n    finalArbitratorTriggered: boolean;\n    settlementTime: Date;\n}\n\nexport interface DataRequestGraphData {\n    id: string;\n    block_height: string;\n    description: string | null;\n    settlement_time: string;\n    date: string;\n    final_arbitrator_triggered: boolean;\n    global_config_id: string;\n    initial_challenge_period: string;\n    outcomes: string[];\n    requestor: string;\n    target_contract: string;\n    finalized_outcome: string | null;\n    sources: {\n        end_point: string;\n        source_path: string;\n    }[];\n    config: OracleConfigGraphData;\n    resolution_windows: ResolutionWindowGraphData[];\n}\n\nexport function transformToDataRequestListItem(data: DataRequestGraphData): DataRequestListItem {\n    return {\n        id: data.id,\n        date: new Date(Number(data.date)),\n        requestor: data.requestor,\n        finalized_outcome: data.finalized_outcome ? transformToOutcome(data.finalized_outcome) : undefined,\n        type: data.sources.length ? DataRequestType.Api : DataRequestType.Arbitrator,\n    };\n}\n\nexport function transformToDataRequestViewModel(data: DataRequestGraphData): DataRequestViewModel {\n    const resolutionWindows = data.resolution_windows.map(rw => transformToResolutionWindow(rw));\n    const totalStaked = resolutionWindows.reduce((prev, curr) => prev.add(curr.totalStaked), new Big(0));\n\n    return {\n        ...transformToDataRequestListItem(data),\n        config: transformToOracleConfig(data.config),\n        settlementTime: new Date(nsToMs(Number(data.settlement_time))),\n        resolutionWindows,\n        description: data.description ?? undefined,\n        sources: data.sources.map((s) => ({\n            endPoint: s.end_point,\n            sourcePath: s.source_path,\n        })),\n        outcomes: data.outcomes,\n        totalStaked: totalStaked.toString(),\n        finalized_outcome: data.finalized_outcome ? transformToOutcome(data.finalized_outcome) : undefined,\n        targetContract: data.target_contract,\n        finalArbitratorTriggered: data.final_arbitrator_triggered,\n    };\n}\n\nexport function canDataRequestBeFinalized(dataRequest: DataRequestViewModel): boolean {\n    // Already finalized\n    if (dataRequest.finalized_outcome) {\n        return false;\n    }\n\n    const currentResolutionWindow = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1];\n    if (!currentResolutionWindow) return false;\n\n\n    const now = new Date().getTime();\n\n    // Latest resolution window must end\n    if (currentResolutionWindow.endTime.getTime() >= now) {\n        return false;\n    }\n\n    if (!currentResolutionWindow.filled) {\n        // The window has not been filled\n        // If it's the first round we cannot finalize till it's completely filled\n        if (currentResolutionWindow.round === 0) {\n            return false;\n        }\n    }\n\n    // Window has been filled, end time is met and we are not the first round\n    // Meaning that the previous round was filled and ready to be finalized\n    return true;\n}\n\nexport function getDataRequestTypeTranslation(type: DataRequestType) {\n    if (type === DataRequestType.Arbitrator) {\n        return trans('dataRequest.type.arbitrator');\n    }\n\n    return trans('dataRequest.type.api');\n}\n","import format from \"date-fns/format\";\n\nexport function prettyFormatDate(date: Date): string {\n    return format(date, 'MMMM d, yyyy HH:mm:ss');\n}\n\n/**\n * converts nano seconds to milliseconds\n *\n * @export\n * @param {number} nanoSeconds\n * @return {number}\n */\nexport function nsToMs(nanoSeconds: number): number {\n    return nanoSeconds / 1000000;\n}\n","export interface OracleConfig {\n    resolutionFeePercentage: number;\n}\n\nexport interface OracleConfigGraphData {\n    block_height: string;\n    bond_token: string;\n    date: string;\n    default_challenge_window_duration: string;\n    final_arbitrator: string;\n    final_arbitrator_invoke_amount: string;\n    gov: string;\n    id: string;\n    max_outcomes: number;\n    min_initial_challenge_window_duration: string;\n    resolution_fee_percentage: number;\n    stake_token: string;\n    validity_bond: string;\n}\n\nexport function transformToOracleConfig(data: OracleConfigGraphData): OracleConfig {\n    return {\n        resolutionFeePercentage: data.resolution_fee_percentage,\n    };\n}\n","import { transformToOutcome } from \"./DataRequestOutcome\";\nimport { OutcomeStake } from \"./OutcomeStake\";\n\nexport interface UserStakes {\n    [accountId: string]: OutcomeStake[];\n}\n\nexport interface UserStakeGraphData {\n    account_id: string;\n    data_request_id: string;\n    id: string;\n    outcome: string;\n    round: number;\n    total_stake: string;\n    data_request?: {\n        finalized_outcome: string | null;\n    }\n    claim?: {\n        payout: string;\n    }\n}\n\nexport function transformToUserStakes(userStakes: UserStakeGraphData[]) {\n    const result: UserStakes = {};\n\n    userStakes.forEach((userStake) => {\n        const currentOutcomeStakes = result[userStake.account_id] ?? [];\n\n        currentOutcomeStakes.push({\n            outcome: transformToOutcome(userStake.outcome),\n            stake: userStake.total_stake,\n            round: userStake.round,\n            dataRequestId: userStake.data_request_id,\n            accountId: userStake.account_id,\n            finalizedOutcome: userStake.data_request?.finalized_outcome ? transformToOutcome(userStake.data_request.finalized_outcome) : undefined,\n            claimPayout: userStake.claim?.payout,\n        });\n\n        result[userStake.account_id] = currentOutcomeStakes;\n    });\n\n    return result;\n}\n","import Big from \"big.js\";\nimport { Outcome, transformToOutcome } from \"./DataRequestOutcome\";\nimport { OutcomeStake } from \"./OutcomeStake\";\nimport { transformToUserStakes, UserStakeGraphData, UserStakes } from \"./UserStakes\";\n\n\nexport interface ResolutionWindow {\n    round: number;\n    bondedOutcome?: Outcome;\n    outcomeStakes: OutcomeStake[];\n    endTime: Date;\n    bondSize: string;\n    totalStaked: string;\n    filled: boolean;\n    userStakes: UserStakes;\n    winningOutcomeStake?: OutcomeStake;\n}\n\nexport interface ResolutionWindowGraphData {\n    block_height: string;\n    bond_size: string;\n    date: string;\n    dr_id: string;\n    end_time: string;\n    id: string;\n    round: number;\n    bonded_outcome: null | string;\n    outcome_stakes: {\n        data_request_id: string;\n        id: string;\n        round: number;\n        total_stake: string;\n        outcome: string;\n    }[];\n    user_stakes: UserStakeGraphData[];\n}\n\nexport function transformToResolutionWindow(data: ResolutionWindowGraphData): ResolutionWindow {\n    let totalStaked = new Big(0);\n    let highestOutcomeStake: OutcomeStake | undefined;\n\n    const outcomeStakes: OutcomeStake[] = data.outcome_stakes.map((os) => {\n        totalStaked = totalStaked.add(os.total_stake);\n\n        const outcomeStake: OutcomeStake = {\n            outcome: transformToOutcome(os.outcome),\n            stake: os.total_stake,\n            dataRequestId: os.data_request_id,\n            round: os.round,\n        };\n\n        // Find the highest stake\n        if (highestOutcomeStake) {\n            const highestStake = new Big(highestOutcomeStake.stake);\n\n            if (highestStake.lt(outcomeStake.stake)) {\n                highestOutcomeStake = outcomeStake;\n            }\n        } else {\n            highestOutcomeStake = outcomeStake;\n        }\n\n        return outcomeStake;\n    });\n\n    return {\n        bondSize: data.bond_size,\n        endTime: new Date(Number(data.end_time) / 1000000),\n        outcomeStakes,\n        filled: highestOutcomeStake?.stake ? new Big(highestOutcomeStake.stake).eq(data.bond_size) : false,\n        totalStaked: totalStaked.toString(),\n        round: data.round,\n        userStakes: transformToUserStakes(data.user_stakes),\n        bondedOutcome: data.bonded_outcome ? transformToOutcome(data.bonded_outcome) : undefined,\n        winningOutcomeStake: highestOutcomeStake,\n    };\n}\n","import Big from 'big.js';\n\nexport const API_URL = process.env.REACT_APP_API_URL ?? '';\nexport const COINGECKO_API_URL = process.env.REACT_APP_COINGECKO_API_URL || '';\nexport const DEFAULT_PAGINATION_LIMIT = 10;\nexport const COINGECKO_TOKEN_TICKER = 'near';\n\nexport const NEAR_NETWORK = process.env.REACT_APP_NEAR_NETWORK as any ?? 'testnet';\nexport const NEAR_NULL_CONTRACT = process.env.REACT_APP_NEAR_NULL_CONTRACT ?? 'null_address.near';\nexport const NEAR_FLUX_TOKEN_ID = process.env.REACT_APP_NEAR_FLUX_TOKEN_ID ?? '';\nexport const NEAR_ORACLE_CONTRACT_ID = process.env.REACT_APP_NEAR_ORACLE_CONTRACT_ID ?? 'oracle.flux-dev'\nexport const NEAR_MAX_GAS = '200000000000000';\nexport const STORAGE_BASE = '30000000000000000000000';\nexport const HOME_REFRESH_INTERVAL = 2000;\nexport const REQUEST_DETAIL_REFRESH_INTERVAL = 5000;\nexport const REQUEST_LIST_REFRESH_INTERVAL = 5000;\n\nBig.PE = 1000000;\n","import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { API_URL } from '../config';\n\nconst cache = new InMemoryCache();\nconst link = createHttpLink({\n    uri: API_URL,\n});\n\nexport const graphqlClient = new ApolloClient({\n    cache,\n    link,\n\n    defaultOptions: {\n        watchQuery: {\n            fetchPolicy: 'cache-and-network',\n        }\n    }\n});\n","import gql from \"graphql-tag\";\nimport { DataRequestListItem, transformToDataRequestListItem, transformToDataRequestViewModel } from \"../models/DataRequest\";\nimport { Pagination } from \"../models/Pagination\";\nimport { graphqlClient } from \"./GraphQLService\";\nexport interface DataRequestFilters {\n    onlyArbitratorRequests: boolean;\n}\n\ninterface DataRequestPagination {\n    limit: number;\n    offset: number;\n}\n\nexport async function getAllDataRequests({\n    limit,\n    offset,\n}: DataRequestPagination, {\n    onlyArbitratorRequests,\n}: DataRequestFilters): Promise<Pagination<DataRequestListItem>> {\n    try {\n        const response = await graphqlClient.query({\n            fetchPolicy: 'network-only',\n            query: gql`\n                query GetAllDataRequests($limit: Int, $offset: Int, $onlyArbitratorRequests: Boolean) {\n                    dataRequests: getDataRequests(limit: $limit, offset: $offset, onlyArbitratorRequests: $onlyArbitratorRequests) {\n                        total\n                        items {\n                            id\n                            date\n                            requestor\n                            finalized_outcome\n                            sources {\n                                end_point\n                                source_path\n                            }\n                        }\n                    }\n                }\n            `,\n            variables: {\n                limit,\n                offset,\n                onlyArbitratorRequests,\n            }\n        });\n\n        const paginatedDataRequests = response.data.dataRequests.items.map((dr: any) => transformToDataRequestListItem(dr));\n\n        return {\n            total: response.data.dataRequests.total,\n            items: paginatedDataRequests,\n        };\n    } catch (error) {\n        console.error('[getAllDataRequests]', error);\n\n        return {\n            total: 0,\n            items: [],\n        };\n    }\n}\n\nexport async function getDataRequestById(id: string) {\n    try {\n        const response = await graphqlClient.query({\n            fetchPolicy: 'network-only',\n            query: gql`\n                query GetDataRequest($id: String!) {\n                    dataRequest: getDataRequest(id: $id) {\n                        block_height\n                        date\n                        final_arbitrator_triggered\n                        global_config_id\n                        id\n                        initial_challenge_period\n                        outcomes\n                        requestor\n                        target_contract\n                        finalized_outcome\n                        description\n                        settlement_time\n                        sources {\n                            end_point\n                            source_path\n                        }\n                        config {\n                            block_height\n                            bond_token\n                            date\n                            default_challenge_window_duration\n                            final_arbitrator\n                            final_arbitrator_invoke_amount\n                            gov\n                            id\n                            max_outcomes\n                            min_initial_challenge_window_duration\n                            resolution_fee_percentage\n                            stake_token\n                            validity_bond\n                        }\n                        resolution_windows {\n                            block_height\n                            bond_size\n                            bonded_outcome\n                            date\n                            dr_id\n                            end_time\n                            id\n                            outcome_stakes {\n                                data_request_id\n                                id\n                                round\n                                total_stake\n                                outcome\n                            }\n                            round\n                            user_stakes {\n                                account_id\n                                data_request_id\n                                id\n                                outcome\n                                round\n                                total_stake\n                            }\n                        }\n                    }\n                }\n            `,\n            variables: {\n                id\n            }\n        });\n\n        return transformToDataRequestViewModel(response.data.dataRequest);\n    } catch(error) {\n        console.error('[getDataRequestById]', error);\n        return null;\n    }\n}\n\nexport async function doesDataRequestExists(id: string): Promise<boolean> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                query DataRequestExists($id: String!) {\n                    request: getDataRequest(id: $id) {\n                        id\n                    }\n                }\n            `,\n            variables: {\n                id,\n            }\n        });\n\n        if (!response.data.request || !response.data.request.id) {\n            return false;\n        }\n\n        return true;\n    } catch (error) {\n        console.error('[doesDataRequestExists]', error);\n        return false;\n    }\n}\n","import { Pagination } from \"../models/Pagination\";\nimport { routePaths } from \"../routes\";\nimport { doesDataRequestExists } from \"./DataRequestService\";\n\nexport interface SearchResult {\n    url: string;\n}\n\nexport async function search(query: string): Promise<Pagination<SearchResult>> {\n    try {\n        if (isNaN(Number(query))) {\n            return {\n                items: [{\n                    url: routePaths.account('near', query),\n                }],\n                total: 1,\n            };\n        }\n\n        const dataRequest = await doesDataRequestExists(query);\n\n        if (dataRequest) {\n            return {\n                items: [{\n                    url: routePaths.dataRequestDetail('near', query),\n                }],\n                total: 1,\n            };\n        }\n\n        return {\n            items: [],\n            total: 0,\n        };\n    } catch (error) {\n        return {\n            items: [],\n            total: 0,\n        };\n    }\n}\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router';\nimport SearchForm from '../../containers/SearchForm';\nimport { routePaths } from '../../routes';\nimport { search } from '../../services/SearchService';\n\ninterface Props {\n    className?: string;\n    inputClassName?: string;\n}\n\nexport default function SearchConnector({\n    className,\n    inputClassName,\n}: Props) {\n    const history = useHistory();\n    const handleSearch = useCallback(async (query) => {\n        const result = await search(query);\n\n        if (result.total === 0) {\n            history.push(routePaths.search(query));\n            return;\n        }\n\n        history.push(result.items[0].url);\n    }, [history]);\n\n    return (\n        <SearchForm\n            onSearch={handleSearch}\n            className={className}\n            inputClassName={inputClassName}\n        />\n    );\n}\n","import React, { FormEvent, useState } from 'react';\nimport MuiMenu from '@material-ui/core/Menu';\nimport MuiMenuItem from '@material-ui/core/MenuItem';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport IconButton from '@material-ui/core/IconButton';\nimport { NavLink, Link, useHistory } from 'react-router-dom';\nimport FakeLinkButton from '../../components/FakeLinkButton';\nimport SearchConnector from '../../connectors/SearchConnector';\nimport { Account } from '../../models/Account';\nimport { routePaths, routes } from '../../routes';\nimport trans from '../../translation/trans';\nimport { formatToken } from '../../utils/tokenUtils';\n\nimport s from './Menu.module.scss';\ninterface Props {\n    account?: Account;\n    onLoginClick: () => void;\n    onLogoutClick: () => void;\n}\n\nexport default function Menu({\n    account,\n    onLoginClick,\n    onLogoutClick\n}: Props) {\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element | null>(null);\n    const history = useHistory();\n\n    function handleMenuClick(event: FormEvent) {\n        setMenuAnchorEl(event.currentTarget);\n    }\n\n    function handleMenuClose() {\n        setMenuAnchorEl(null);\n    }\n\n    function handleLogoutClick() {\n        handleMenuClose();\n        onLogoutClick();\n    }\n\n    function handleAccountClick() {\n        if (!account) return;\n        handleMenuClose();\n\n        history.push(routePaths.account(account.providerId, account.accountId));\n    }\n\n    return (\n        <header className={s.root}>\n            <div className={s.menu}>\n                <div className={s.topBar}>\n                    <div>\n                        <Link to={routePaths.root()} className={s.logoWrapper}>\n                            <div className={s.logo} />\n                        </Link>\n                    </div>\n                    <div>\n                        <SearchConnector />\n                    </div>\n                </div>\n                <div className={s.bottomBar}>\n                    <ul className={s.menuItems}>\n                        {routes.map(route => {\n                            if (!route.inNavigation) {\n                                return null;\n                            }\n\n                            return (\n                                <li className={s.menuItem} key={route.key}>\n                                    <NavLink\n                                        className={s.menuLink}\n                                        activeClassName={s['menuLink--active']}\n                                        exact\n                                        to={route.navPath}\n                                    >\n                                        {route.label}\n                                    </NavLink>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                    <ul className={s.accountLinks}>\n                        {!account && (\n                            <li>\n                                <FakeLinkButton onClick={onLoginClick}>\n                                    {trans('menu.label.login')}\n                                </FakeLinkButton>\n                            </li>\n                        )}\n\n                        {account && (\n                            <>\n                                <li className={s.menuItem}>\n                                    <Link className={s.link} to={routePaths.account(account.providerId, account.accountId)}>{account.accountId}</Link>\n                                </li>\n                                <li className={s.menuItem}>\n                                    {formatToken(account.balance)} FLX\n                                </li>\n                                <li className={s.menuItem}>\n                                    <FakeLinkButton onClick={onLogoutClick}>\n                                        {trans('menu.label.logout')}\n                                    </FakeLinkButton>\n                                </li>\n                            </>\n                        )}\n                    </ul>\n                    <div className={s.mobileMenu}>\n                        {!account && (\n                            <FakeLinkButton onClick={onLoginClick}>\n                                {trans('menu.label.login')}\n                            </FakeLinkButton>\n                        )}\n                        {account && (\n                            <>\n                                <IconButton onClick={handleMenuClick} className={s.iconButton}>\n                                    <MoreVertIcon />\n                                </IconButton>\n                                <MuiMenu anchorEl={menuAnchorEl} keepMounted open={Boolean(menuAnchorEl)} onClose={handleMenuClose}>\n                                    <MuiMenuItem onClick={handleAccountClick}>{account.accountId}</MuiMenuItem>\n                                    <MuiMenuItem disabled>{formatToken(account.balance)} FLX</MuiMenuItem>\n                                    <MuiMenuItem onClick={handleLogoutClick}>{trans('menu.label.logout')}</MuiMenuItem>\n                                </MuiMenu>\n                            </>\n                        )}\n                    </div>\n\n                </div>\n            </div>\n        </header>\n    );\n}\n","import gql from \"graphql-tag\";\nimport { AccountInfo } from \"../models/Account\";\nimport { graphqlClient } from \"./GraphQLService\";\n\nexport async function getAccountInfo(accountId: string): Promise<AccountInfo> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query AccountInfo($accountId: String!) {\n                        accountInfo: getAccountInfo(accountId: $accountId) {\n                            active_staking\n                            total_staked\n                            total_claimed\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n            }\n        });\n\n        const data = response.data.accountInfo;\n\n        return {\n            activeStaking: data.active_staking,\n            totalStaked: data.total_staked,\n            totalClaimed: data.total_claimed,\n        }\n    } catch (error) {\n        console.error('[getAccountInfo]', error);\n\n        return {\n            activeStaking: '0',\n            totalStaked: '0',\n            totalClaimed: '0',\n        }\n    }\n}\n","const cacheStorage = new Map<string, any>();\nconst creationPromises = new Map<string, Promise<any>>();\n\n/**\n * Caches an item by it's id and returns it if it's requested again.\n * If it does not exist it asks you to create the item\n *\n * @export\n * @template T\n * @param {string} id\n * @param {() => Promise<T>} createCallback\n * @return {Promise<T>}\n */\nexport default async function cache<T>(id: string, createCallback: () => Promise<T>, ttl?: number): Promise<T> {\n    const item = cacheStorage.get(id);\n    if (item) return item;\n\n    // No need to create another item when the request is already going\n    // Instead we just redirect the promise back to this call\n    // Caching will be handled by the iniator\n    const onGoingRequest = creationPromises.get(id);\n    if (onGoingRequest) return onGoingRequest;\n\n    // Keep track of all ongoing promises\n    const createRequest = createCallback();\n    creationPromises.set(id, createRequest);\n\n    try {\n        const createdItem = await createRequest;\n        cacheStorage.set(id, createdItem);\n\n        if (ttl) {\n            setTimeout(() => {\n                cacheStorage.delete(id);\n            }, ttl);\n        }\n\n        return createdItem;\n    } catch (error) {\n        throw error;\n    } finally {\n        creationPromises.delete(id);\n    }\n}\n","import { WalletConnection, utils, transactions } from \"near-api-js\";\nimport BN from 'bn.js';\nimport { NEAR_FLUX_TOKEN_ID, NEAR_ORACLE_CONTRACT_ID } from \"../../../config\";\nimport Big from \"big.js\";\nimport cache from \"../../../utils/cache\";\n\nexport interface TransactionViewOptions {\n    methodName: string;\n    args?: object;\n}\n\nexport interface TransactionCallOptions extends TransactionViewOptions {\n    gas: string;\n    amount: string;\n}\n\nexport interface TransactionOption {\n    receiverId: string;\n    transactionOptions: TransactionCallOptions[];\n}\n\nexport async function batchSendTransactions(walletConnection: WalletConnection, txs: TransactionOption[], callbackUrl?: string) {\n    const accountId = walletConnection.getAccountId();\n    const localKey = await walletConnection._near.connection.signer.getPublicKey(accountId, walletConnection._near.connection.networkId);\n    const block = await walletConnection._near.connection.provider.block({ finality: 'final' });\n    const blockHash = utils.serialize.base_decode(block.header.hash);\n\n    const resultTxs = await Promise.all(txs.map(async ({ receiverId, transactionOptions }, index) => {\n        const actions = transactionOptions.map(tx => transactions.functionCall(tx.methodName, tx.args ?? {}, new BN(tx.gas), new BN(tx.amount)));\n        const accessKey = await walletConnection.account().accessKeyForTransaction(receiverId, actions, localKey);\n\n        if (!accessKey) {\n            throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);\n        }\n\n        const publicKey = utils.PublicKey.from(accessKey.public_key);\n        const nonce = accessKey.access_key.nonce + index + 1;\n\n        return transactions.createTransaction(accountId, publicKey, receiverId, nonce, actions, blockHash);\n    }));\n\n    return walletConnection.requestSignTransactions(resultTxs, callbackUrl);\n}\n\nexport async function getTokenBalance(walletConnection: WalletConnection, accountId: string): Promise<string> {\n    const account = walletConnection.account();\n    return account.viewFunction(NEAR_FLUX_TOKEN_ID, 'ft_balance_of', {\n        account_id: accountId,\n    });\n}\n\n/**\n * Gets the minimum amount storage required for a oracle transaction\n *\n * @export\n * @param {WalletConnection} walletConnection\n * @return {Promise<Big>}\n */\nexport async function getMinimumStorage(walletConnection: WalletConnection): Promise<Big> {\n    return cache(`${NEAR_ORACLE_CONTRACT_ID}_minimum_storage_balance`, async () => {\n        const account = walletConnection.account();\n        const minimumBalance = await account.viewFunction(NEAR_ORACLE_CONTRACT_ID, 'storage_minimum_balance', {});\n        return Big(minimumBalance);\n    });\n}\n\nexport async function getStorageBalance(walletConnection: WalletConnection): Promise<{ total: Big, available: Big }> {\n    try {\n        const account = walletConnection.account();\n        const storage = await account.viewFunction(NEAR_ORACLE_CONTRACT_ID, 'storage_balance_of', {\n            account_id: account.accountId,\n        });\n\n        return {\n            total: new Big(storage.total),\n            available: new Big(storage.available),\n        };\n    } catch (error) {\n        console.error('[getStorageBalance]', error);\n        return {\n            total: new Big(0),\n            available: new Big(0),\n        };\n    }\n}\n","import { connect, Near, WalletConnection, keyStores } from \"near-api-js\";\nimport { NEAR_NETWORK } from \"../../../config\";\n\nexport interface ConnectConfig {\n    accountId?: string;\n    nearInstance?: Near;\n    walletInstance?: WalletConnection;\n    customNodeUrl?: string;\n    customWalletUrl?: string;\n}\n\nexport interface NetworkConfig {\n    networkId: string,\n    nodeUrl: string,\n    contractName?: null,\n    walletUrl?: string,\n    initialBalance?: string\n}\n\nexport function createNetworkConfig(connectConfig: ConnectConfig): NetworkConfig {\n    if (NEAR_NETWORK === 'mainnet') {\n        return {\n            networkId: 'mainnet',\n            nodeUrl: 'https://rpc.mainnet.near.org',\n            walletUrl: 'https://wallet.near.org',\n        };\n    }\n\n    return {\n        networkId: 'testnet',\n        nodeUrl: connectConfig.customNodeUrl || 'https://rpc.testnet.near.org',\n        contractName: null,\n        walletUrl: connectConfig.customWalletUrl || 'https://wallet.testnet.near.org',\n        initialBalance: '100000000',\n    };\n}\n\n/**\n * Connects with NEAR\n *\n * @export\n * @param {ConnectConfig} connectConfig\n * @param {SdkConfig} sdkConfig\n * @return {Promise<Near>}\n */\nexport async function connectNear(connectConfig: ConnectConfig): Promise<Near> {\n    if (connectConfig.nearInstance) {\n        return connectConfig.nearInstance;\n    }\n\n    const networkConfig = createNetworkConfig(connectConfig);\n\n    return connect({\n        ...networkConfig,\n        deps: {\n            keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n        },\n    });\n}\n","import { Account } from \"../../models/Account\";\nimport { DataRequestViewModel } from \"../../models/DataRequest\";\nimport { Outcome } from \"../../models/DataRequestOutcome\";\nimport { IProvider } from \"./IProvider\";\nimport NearProvider from \"./near/NearProvider\";\n\nlet providers: IProvider[] = [];\nlet providerInitPromise: Promise<boolean[]>;\n\nexport async function initProviders() {\n    if (providerInitPromise) {\n        await providerInitPromise;\n        return;\n    }\n\n    providers = [\n        new NearProvider(),\n    ];\n\n    providerInitPromise = Promise.all(providers.map(p => p.init()));\n    await providerInitPromise;\n}\n\nexport function getProviderById(id: string): IProvider | undefined {\n    return providers.find(p => p.id === id);\n}\n\nexport function getLoggedInProvider() {\n    return providers.find(p => p.isLoggedIn());\n}\n\nexport async function loginWithProvider(providerId: string) {\n    const provider = getProviderById(providerId);\n    return provider?.login() ?? false;\n}\n\nexport async function logoutWithProvider(providerId: string) {\n    const provider = getProviderById(providerId);\n    return provider?.logout() ?? false;\n}\n\nexport function getLoggedInAccountId(): string | undefined {\n    const provider = getLoggedInProvider();\n    return provider ? provider.getLoggedInAccountId() : undefined;\n}\n\nexport async function getAccountInfoWithProvider(providerId: string, accountId: string): Promise<Account | undefined> {\n    const provider = getProviderById(providerId);\n    const account = await provider?.getAccountInfo(accountId);\n    if (!account || !provider) return undefined;\n\n    return {\n        accountId: account.accountId,\n        balance: account.balance,\n        providerId: provider.id,\n    };\n}\n\nexport async function getLoggedInAccount(): Promise<Account | undefined> {\n    const provider = getLoggedInProvider();\n\n    if (!provider) {\n        return undefined;\n    }\n\n    const loggedInAccountId = provider.getLoggedInAccountId();\n\n    if (!loggedInAccountId) {\n        return undefined;\n    }\n\n    return getAccountInfoWithProvider(provider.id, loggedInAccountId);\n}\n\nexport async function stakeWithProvider(providerId: string, amount: string, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.stake(amount, dataRequest, outcome) ?? false;\n}\n\nexport async function finalizeWithProvider(providerId: string, dataRequest: DataRequestViewModel): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.finalize(dataRequest) ?? false;\n}\n\nexport async function claimWithProvider(providerId: string, accountId: string, dataRequest: DataRequestViewModel): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.claim(accountId, dataRequest) ?? false;\n}\n\nexport async function unstakeWithProvider(providerId: string, amount: string, round: number, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.unstake(amount, round, dataRequest, outcome) ?? false;\n}\n","import { IProvider } from \"../IProvider\";\nimport FluxSdk from '@fluxprotocol/amm-sdk';\nimport { WalletConnection, Near } from 'near-api-js';\nimport { NEAR_FLUX_TOKEN_ID, NEAR_MAX_GAS, NEAR_NETWORK, NEAR_NULL_CONTRACT, NEAR_ORACLE_CONTRACT_ID, STORAGE_BASE } from \"../../../config\";\nimport { Outcome, OutcomeType } from \"../../../models/DataRequestOutcome\";\nimport { DataRequestViewModel } from \"../../../models/DataRequest\";\nimport Big from \"big.js\";\nimport { batchSendTransactions, getMinimumStorage, getStorageBalance, getTokenBalance, TransactionOption } from \"./NearService\";\nimport { connectNear } from \"./NearConnectService\";\nexport default class NearProvider implements IProvider {\n    id = 'near';\n\n    storageDeposit: Big = new Big(0);\n\n    near?: Near;\n    walletConnection?: WalletConnection;\n\n    sdkInstance = new FluxSdk({\n        network: NEAR_NETWORK,\n        nullContractId: NEAR_NULL_CONTRACT,\n    });\n\n    async init() {\n        this.near = await connectNear({});\n        this.walletConnection = new WalletConnection(this.near, NEAR_NULL_CONTRACT);\n\n        return true;\n    }\n\n    async login() {\n        this.walletConnection?.requestSignIn(NEAR_NULL_CONTRACT, 'oracle');\n        return true;\n    }\n\n    async logout() {\n        this.walletConnection?.signOut();\n        return true;\n    }\n\n    isLoggedIn() {\n        return this.walletConnection?.isSignedIn() ?? false;\n    }\n\n    getLoggedInAccountId(): string {\n        return this.walletConnection?.getAccountId();\n    }\n\n    async getAccountInfo(accountId: string) {\n        try {\n            if (!this.walletConnection) throw new Error('No wallet connection');\n            const balance = await getTokenBalance(this.walletConnection, accountId);\n\n            // TODO: Fetch the storage deposit from the oracle\n\n            return {\n                accountId,\n                balance,\n            };\n        } catch (error) {\n            return {\n                accountId,\n                balance: '0',\n            }\n        }\n    }\n\n    async stake(amount: string, dataRequest: DataRequestViewModel, outcome: Outcome) {\n        if (!this.walletConnection) return false;\n\n        const stakeOutcome = outcome.type === OutcomeType.Invalid ? 'Invalid' : { 'Answer': outcome.answer };\n        const minimumStorageBalance = await getMinimumStorage(this.walletConnection);\n        const currentStorage = await getStorageBalance(this.walletConnection);\n        const transactions: TransactionOption[] = [];\n\n        if (currentStorage.total.lt(minimumStorageBalance)) {\n            transactions.push({\n                receiverId: NEAR_ORACLE_CONTRACT_ID,\n                transactionOptions: [{\n                    amount: minimumStorageBalance.toString(),\n                    gas: NEAR_MAX_GAS,\n                    methodName: 'storage_deposit',\n                    args: {\n                        account_id: this.getLoggedInAccountId(),\n                    }\n                }],\n            });\n        }\n\n        transactions.push({\n            receiverId: NEAR_FLUX_TOKEN_ID,\n            transactionOptions: [{\n                amount: '1',\n                gas: NEAR_MAX_GAS,\n                methodName: 'ft_transfer_call',\n                args: {\n                    receiver_id: NEAR_ORACLE_CONTRACT_ID,\n                    amount,\n                    msg: JSON.stringify({\n                        'StakeDataRequest': {\n                            id: dataRequest.id,\n                            outcome: stakeOutcome,\n                        }\n                    })\n                }\n            }],\n        });\n\n        await batchSendTransactions(this.walletConnection, transactions);\n\n        return true;\n    }\n\n    async unstake(amount: string, round: number, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n        const account = this.sdkInstance.walletConnection?.account();\n        if (!account) return false;\n\n        // Formatting is weird in rust..\n        const stakeOutcome = outcome.type === OutcomeType.Invalid ? 'Invalid' : { 'Answer': outcome.answer };\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'dr_unstake', {\n            request_id: dataRequest.id,\n            resolution_round: round,\n            outcome: stakeOutcome,\n            amount,\n\n            // @ts-ignore\n        }, NEAR_MAX_GAS, STORAGE_BASE);\n\n        return true;\n    }\n\n    async finalize(dataRequest: DataRequestViewModel) {\n        const account = this.sdkInstance.walletConnection?.account();\n        if (!account) return false;\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'dr_finalize', {\n            request_id: dataRequest.id,\n            // @ts-ignore\n        }, NEAR_MAX_GAS, STORAGE_BASE);\n\n        return true;\n    }\n\n    async claim(accountId: string, dataRequest: DataRequestViewModel) {\n        const account = this.sdkInstance.walletConnection?.account();\n        if (!account) return false;\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'dr_claim', {\n            request_id: dataRequest.id,\n            account_id: accountId,\n            // @ts-ignore\n        }, NEAR_MAX_GAS, STORAGE_BASE);\n\n        return true;\n    }\n}\n","import Big from \"big.js\";\nimport { Outcome, OutcomeType } from \"./DataRequestOutcome\";\n\nexport interface OutcomeStake {\n    outcome: Outcome;\n    stake: string;\n    round: number;\n    dataRequestId: string;\n    accountId?: string;\n    finalizedOutcome?: Outcome;\n    claimPayout?: string;\n}\n\nexport function combineOutcomeStakes(outcomeStakes: OutcomeStake[] = []): OutcomeStake[] {\n    const result = new Map<string, OutcomeStake>();\n\n    outcomeStakes.forEach((outcomeStake) => {\n        let answer = '';\n\n        if (outcomeStake.outcome.type === OutcomeType.Invalid) {\n            answer = 'Invalid';\n        } else {\n            answer = `Answer(${outcomeStake.outcome.answer})`;\n        }\n\n        const internalId = `${answer}_${outcomeStake.dataRequestId}`;\n        const currentItem = result.get(internalId);\n\n        if (currentItem) {\n            let stake = new Big(currentItem.stake);\n            stake = stake.add(outcomeStake.stake);\n            result.set(internalId, {\n                ...currentItem,\n                stake: stake.toString(),\n            });\n        } else {\n            result.set(internalId, outcomeStake);\n        }\n    });\n\n    return Array.from(result.values());\n}\n","import gql from \"graphql-tag\";\nimport { combineOutcomeStakes, OutcomeStake } from \"../models/OutcomeStake\";\nimport { Pagination } from \"../models/Pagination\";\nimport { transformToUserStakes, UserStakes } from \"../models/UserStakes\";\nimport { graphqlClient } from \"./GraphQLService\";\n\nasync function getUserStakesByRequestIdAndAccountId(requestId: string, accountId: string) {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakesRequestAndAccount($requestId: String!, $accountId: String!) {\n                        stakes: getUserStakesByRequestId(id: $requestId, accountId: $accountId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                            claim {\n                                payout\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                requestId,\n                accountId,\n            }\n        });\n\n        const userStakes = transformToUserStakes(response.data.stakes);\n        return userStakes;\n    } catch (error) {\n        console.error('[getUserStakesByRequestIdAndAccountId]', error);\n        return {};\n    }\n}\n\nexport async function getUserStakesByRequestId(requestId: string, accountId?: string): Promise<UserStakes> {\n    try {\n        if (accountId) {\n            return getUserStakesByRequestIdAndAccountId(requestId, accountId);\n        }\n\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakes($requestId: String!) {\n                        stakes: getUserStakesByRequestId(id: $requestId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                        }\n                    }\n                `,\n            variables: {\n                requestId,\n            }\n        });\n\n        const userStakes = transformToUserStakes(response.data.stakes);\n        return userStakes;\n    } catch(error) {\n        console.error('[getUserStakesByRequestId]', error);\n        return {};\n    }\n}\n\nexport interface UserStakesForAccountFilters {\n    limit: number;\n    offset: number;\n}\n\nexport async function getUserStakesByAccountId(accountId: string, filters: UserStakesForAccountFilters): Promise<Pagination<OutcomeStake>> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakesAccount($accountId: String!, $limit: Int, $offset: Int) {\n                        stakes: getUserStakes(accountId: $accountId, limit: $limit, offset: $offset) {\n                            items {\n                                data_request_id\n                                account_id\n                                id\n                                outcome\n                                round\n                                total_stake\n                                data_request {\n                                    finalized_outcome\n                                }\n                            }\n                            total\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n                limit: filters.limit,\n                offset: filters.offset,\n            }\n        });\n\n        const items = transformToUserStakes(response.data.stakes.items);\n\n        return {\n            items: items[accountId],\n            total: response.data.stakes.total,\n        }\n    } catch (error) {\n        console.error('[getUserStakesByAccountId]', error);\n        return {\n            items: [],\n            total: 0,\n        };\n    }\n}\n\n\nexport async function getUnclaimedStakesByAccountId(accountId: string): Promise<OutcomeStake[]> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUnclaimedStakesAccount($accountId: String!) {\n                        stakes: getUnclaimedStakes(accountId: $accountId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                            data_request {\n                                finalized_outcome\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n            }\n        });\n\n        const items = transformToUserStakes(response.data.stakes);\n        return combineOutcomeStakes(items[accountId]);\n    } catch (error) {\n        console.error('[getUnclaimedStakesByAccountId]', error);\n        return [];\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Account, AccountInfo } from '../../models/Account';\nimport { OutcomeStake } from '../../models/OutcomeStake';\n\nexport type AccountState = Readonly<{\n    account?: Account;\n    accountDetail: {\n        account?: Account;\n        info: AccountInfo;\n        accountStakes: OutcomeStake[];\n        accountStakesTotal: number;\n        unclaimedStakes: OutcomeStake[];\n    };\n    error?: string[];\n    loading: boolean;\n}>;\n\nconst initialState: AccountState = {\n    loading: false,\n    accountDetail: {\n        account: undefined,\n        info: {\n            activeStaking: '0',\n            totalStaked: '0',\n            totalClaimed: '0',\n        },\n        accountStakes: [],\n        accountStakesTotal: 0,\n        unclaimedStakes: [],\n    }\n};\n\nconst accountSlice = createSlice({\n    initialState,\n    name: 'account',\n    reducers: {\n        setAccountErrors(state: AccountState, action: PayloadAction<string[]>): AccountState {\n            return ({\n                ...state,\n                error: action.payload,\n            });\n        },\n        setAccountLoading(state: AccountState, action: PayloadAction<boolean>): AccountState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n        setAccount(state: AccountState, action: PayloadAction<Account | undefined>): AccountState {\n            return ({\n                ...state,\n                account: action.payload,\n            });\n        },\n        setAccountDetail(state: AccountState, action: PayloadAction<Account>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    account: action.payload,\n                },\n            });\n        },\n        setAccountStakes(state: AccountState, action: PayloadAction<OutcomeStake[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountStakes: action.payload,\n                },\n            });\n        },\n        setAccountStakesTotal(state: AccountState, action: PayloadAction<number>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountStakesTotal: action.payload,\n                },\n            });\n        },\n        setAccountInfo(state: AccountState, action: PayloadAction<AccountInfo>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    info: action.payload,\n                },\n            });\n        },\n        setAccountUnclaimedStakes(state: AccountState, action: PayloadAction<OutcomeStake[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    unclaimedStakes: action.payload,\n                },\n            });\n        },\n    },\n});\n\nexport const {\n    setAccount,\n    setAccountErrors,\n    setAccountLoading,\n    setAccountDetail,\n    setAccountStakes,\n    setAccountStakesTotal,\n    setAccountInfo,\n    setAccountUnclaimedStakes,\n} = accountSlice.actions;\n\nexport default accountSlice.reducer;\n","import { DEFAULT_PAGINATION_LIMIT } from \"../../config\";\nimport { getAccountInfo } from \"../../services/AccountService\";\nimport { getAccountInfoWithProvider, getLoggedInAccount, loginWithProvider, logoutWithProvider } from \"../../services/providers/ProviderRegistry\";\nimport { getUnclaimedStakesByAccountId, getUserStakesByAccountId } from \"../../services/UserStakeService\";\nimport { setAccount, setAccountDetail, setAccountInfo, setAccountLoading, setAccountStakes, setAccountStakesTotal, setAccountUnclaimedStakes } from \"./account\";\n\nexport function loadLoggedInAccount() {\n    return async (dispatch: Function) => {\n        const account = await getLoggedInAccount();\n        if (!account) return;\n\n        dispatch(setAccount(account));\n    };\n}\n\nexport function loadAccount(providerId: string, accountId: string) {\n    return async (dispatch: Function) => {\n        const account = await getAccountInfoWithProvider(providerId, accountId);\n\n        if (!account) {\n            return;\n        }\n\n        const accountInfo = await getAccountInfo(accountId);\n        dispatch(setAccountDetail(account));\n        dispatch(setAccountInfo(accountInfo));\n    };\n}\n\n\nexport function loadAccountStakes(page: number, accountId: string, reset = false) {\n    return async (dispatch: Function) => {\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const stakes = await getUserStakesByAccountId(accountId, {\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        });\n\n        dispatch(setAccountStakesTotal(stakes.total));\n        dispatch(setAccountStakes(stakes.items));\n    }\n}\n\nexport function loadUnclaimedAccountStakes(accountId: string) {\n    return async (dispatch: Function) => {\n        const stakes = await getUnclaimedStakesByAccountId(accountId);\n        dispatch(setAccountUnclaimedStakes(stakes));\n    }\n}\n\nexport function loginAccount() {\n    return async (dispatch: Function) => {\n        dispatch(setAccountLoading(true));\n\n        await loginWithProvider('near');\n\n        dispatch(setAccountLoading(false));\n    };\n}\n\n\nexport function logoutAccount() {\n    return async (dispatch: Function) => {\n        await logoutWithProvider('near');\n        dispatch(setAccount(undefined));\n    };\n}\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Menu from '../../containers/Menu';\nimport { loadLoggedInAccount, loginAccount, logoutAccount } from '../../redux/account/accountActions';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function MenuConnector() {\n    const dispatch = useDispatch();\n    const account = useSelector((store: Reducers) => store.account.account);\n\n\n    const handleLoginClick = useCallback(() => {\n        dispatch(loginAccount());\n    }, [dispatch]);\n\n    const handleLogoutClick = useCallback(() => {\n        dispatch(logoutAccount());\n    }, [dispatch]);\n\n    useEffect(() => {\n        dispatch(loadLoggedInAccount());\n    }, [dispatch]);\n\n    return (\n        <Menu\n            onLoginClick={handleLoginClick}\n            account={account}\n            onLogoutClick={handleLogoutClick}\n        />\n    );\n}\n","import React from 'react';\n\nimport s from './Footer.module.scss';\n\n\nexport default function Footer() {\n    return (\n        <footer className={s.footer}>\n            <div className={s.footerWrapper}>\n                <div className={s.logo} />\n            </div>\n        </footer>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport MenuConnector from '../../connectors/MenuConnector';\nimport Footer from '../Footer';\n\nimport s from './Page.module.scss';\n\ninterface Props {\n    className?: string;\n    bodyClassName?: string;\n    hasNavigation?: boolean;\n}\n\nexport default function Page({\n    className,\n    children,\n    hasNavigation = true,\n}: PropsWithChildren<Props>) {\n    return (\n        <div className={s.page}>\n            <MenuConnector />\n            <main className={s.body}>\n                {children}\n            </main>\n            <Footer />\n        </div>\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport trans from '../../translation/trans';\n\nimport s from './Pagination.module.scss';\n\ninterface Props {\n    total: number;\n    page: number;\n    rowsPerPage: number;\n    onChangePage: (page: number) => void;\n    className?: string;\n}\n\nexport default function Pagination({\n    total,\n    page,\n    onChangePage,\n    rowsPerPage,\n    className\n}: Props) {\n    const handleFirstPageButtonClick = () => {\n        onChangePage(0);\n    };\n\n    const handleBackButtonClick = () => {\n        onChangePage(page - 1);\n    };\n\n    const handleNextButtonClick = () => {\n        onChangePage(page + 1);\n    };\n\n    const handleLastPageButtonClick = () => {\n        onChangePage(total);\n    };\n\n    return (\n        <div className={classnames(s.pagination, className)}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                <FirstPageIcon />\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                <KeyboardArrowLeft />\n            </IconButton>\n            <span>\n                {trans('pagination.pageIndication', {\n                    currentPage: (page + 1).toString(),\n                    totalPages: (total + 1).toString(),\n                })}\n            </span>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page === total}\n                aria-label=\"next page\"\n            >\n                <KeyboardArrowRight />\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page === total}\n                aria-label=\"last page\"\n            >\n                <LastPageIcon />\n            </IconButton>\n        </div>\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\nimport Pagination from '../Pagination/Pagination';\nimport { OutcomeStake } from '../../models/OutcomeStake';\n\nimport s from './OutcomeStakesOverview.module.scss';\nimport { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport trans from '../../translation/trans';\nimport { routePaths } from '../../routes';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport { formatToken } from '../../utils/tokenUtils';\n\ninterface Props {\n    outcomeStakes: OutcomeStake[];\n    page: number;\n    totalItems: number;\n    onRequestPageChange: (page: number) => void;\n    showPagination?: boolean;\n}\n\nexport default function OutcomeStakesOverview({\n    onRequestPageChange,\n    outcomeStakes = [],\n    page,\n    totalItems,\n    showPagination = true,\n}: Props) {\n    return (\n        <div>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.id')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.roud')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.finalizedOutcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.stake')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {outcomeStakes.map((stake) => (\n                            <TableRow key={`${stake.dataRequestId}_${stake.round}_${transfromOutcomeToString(stake.outcome)}`}>\n                                <TableCell className={s.linkCell}>\n                                    <Link to={routePaths.dataRequestDetail('near', stake.dataRequestId)}>\n                                        #{stake.dataRequestId}\n                                    </Link>\n                                </TableCell>\n                                <TableCell>\n                                    {stake.round}\n                                </TableCell>\n                                <TableCell>\n                                    {transfromOutcomeToString(stake.outcome)}\n                                </TableCell>\n                                <TableCell>\n                                    {stake.finalizedOutcome ? transfromOutcomeToString(stake.finalizedOutcome) : null}\n                                </TableCell>\n                                <TableCell>\n                                    {formatToken(stake.stake)} FLX\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {showPagination && (\n                <Pagination\n                    className={s.pagination}\n                    total={Math.ceil(totalItems / DEFAULT_PAGINATION_LIMIT) - 1}\n                    page={page}\n                    rowsPerPage={DEFAULT_PAGINATION_LIMIT}\n                    onChangePage={onRequestPageChange}\n                />\n            )}\n        </div>\n    );\n}\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport OutcomeStakesOverview from '../../containers/OutcomeStakesOverview';\nimport { loadAccountStakes } from '../../redux/account/accountActions';\nimport { Reducers } from '../../redux/reducers';\n\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountOutcomeStakesConnector() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n    const stakes = useSelector((store: Reducers) => store.account.accountDetail.accountStakes);\n    const total = useSelector((store: Reducers) => store.account.accountDetail.accountStakesTotal);\n    const [page, setPage] = useState(0);\n\n    const handleRequestPageChange = useCallback((newPage: number) => {\n        dispatch(loadAccountStakes(newPage, params.accountId, false));\n        setPage(newPage);\n    }, [dispatch, params]);\n\n    return (\n        <OutcomeStakesOverview\n            onRequestPageChange={handleRequestPageChange}\n            outcomeStakes={stakes}\n            totalItems={total}\n            page={page}\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountOutcomeStakesConnector from '../../../../connectors/AccountOutcomeStakesConnector';\nimport { loadAccountStakes } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountStakesPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadAccountStakes(0, params.accountId, true));\n    }, [dispatch, params]);\n\n    return (\n        <div>\n            <AccountOutcomeStakesConnector />\n        </div>\n    );\n}\n","import React from 'react';\n\n\nexport default function AccountTransactionsPage() {\n    return (\n        <div>\n            transactions!\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OutcomeStakesOverview from '../../containers/OutcomeStakesOverview';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function AccountUnclaimedStakesConnector() {\n    const unclaimedStakes = useSelector((store: Reducers) => store.account.accountDetail.unclaimedStakes);\n\n    return (\n        <OutcomeStakesOverview\n            totalItems={0}\n            page={0}\n            onRequestPageChange={() => {}}\n            outcomeStakes={unclaimedStakes}\n            showPagination={false}\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountUnclaimedStakesConnector from '../../../../connectors/AccountUnclaimedStakesConnector';\nimport { loadUnclaimedAccountStakes } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountUnclaimedPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadUnclaimedAccountStakes(params.accountId));\n    }, [dispatch, params]);\n\n    return (\n        <div>\n            <AccountUnclaimedStakesConnector />\n        </div>\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { OutcomeStake } from '../../../../models/OutcomeStake';\n\nimport s from './OutcomeStakeInfo.module.scss';\nimport trans from '../../../../translation/trans';\nimport { formatToken } from '../../../../utils/tokenUtils';\nimport { OutcomeType } from '../../../../models/DataRequestOutcome';\n\nexport interface Props {\n    outcomeStakes: OutcomeStake[];\n    tableComponent?: any;\n}\n\nexport default function OutcomeStakeInfo({\n    outcomeStakes,\n    tableComponent = Paper,\n}: Props) {\n    return (\n        <div>\n            <TableContainer className={s.container} component={tableComponent}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('outcomeStakeInfo.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakeInfo.table.label.stake')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {outcomeStakes.map((outcomeInfo, index) => {\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell>\n                                        {outcomeInfo.outcome.type === OutcomeType.Answer && (\n                                            <span>\"{outcomeInfo.outcome.answer}\"</span>\n                                        )}\n\n                                        {outcomeInfo.outcome.type === OutcomeType.Invalid && (\n                                            <span>{trans('outcomeStakeInfo.label.invalid')}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {formatToken(outcomeInfo.stake, 18)} FLX\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport trans from '../../translation/trans';\nimport OutcomeStakeInfo from '../ResolutionWindowAccordion/components/OutcomeStakeInfo/OutcomeStakeInfo';\n\nimport s from './AccountStakesInfoCard.module.scss';\n\ninterface Props {\n    accountStakes: OutcomeStake[];\n}\n\nfunction EmptyDiv(props: PropsWithChildren<{}>) {\n    return <div>{props.children}</div>\n}\n\nexport default function AccountStakesInfoCard({\n    accountStakes,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('accountStakesInfoCard.title')}</h2>\n                </div>\n\n                {accountStakes.length > 0 && (\n                    <OutcomeStakeInfo\n                        outcomeStakes={accountStakes}\n                        tableComponent={EmptyDiv}\n                    />\n                )}\n\n                {accountStakes.length === 0 && (\n                    <div className={s.noStakes}>\n                        {trans('accountStakesInfoCard.noStakes')}\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport AccountStakesInfoCard from '../../containers/AccountStakesInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function AccountStakesInfoCardConnector() {\n    const accountStakes = useSelector((store: Reducers) => store.dataRequest.accountStakes);\n\n    return (\n        <AccountStakesInfoCard\n            accountStakes={accountStakes}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\n\nimport s from './CallDataInfoCard.module.scss';\nimport LabeledText from '../../compositions/LabeledText';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function CallDataInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('callDataInfo.title')}</h2>\n                </div>\n\n                {dataRequest.description && (\n                    <LabeledText label={trans('callDataInfo.description')} className={s.label}>{dataRequest.description}</LabeledText>\n                )}\n\n                {dataRequest.sources.length > 0 && (\n                    <table className={s.table}>\n                        <thead>\n                            <tr className={s.tableHeadRow}>\n                                <th>{trans('callDataInfo.label.endPoint')}</th>\n                                <th>{trans('callDataInfo.label.sourcePath')}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {dataRequest.sources.map(source => (\n                                <tr key={`${source.endPoint}_${source.sourcePath}`}>\n                                    <td className={s.tableItem}>\n                                        <span className={s.tableItemInner}>{source.endPoint}</span>\n                                    </td>\n                                    <td className={s.tableItem}><pre>{source.sourcePath}</pre></td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n\n                {dataRequest.outcomes?.length && (\n                    <>\n                        <LabeledText label={trans('callDataInfo.outcomes.title')} />\n                        <pre className={s.possibleOutcomes}>\n                            {JSON.stringify(dataRequest.outcomes, null, 4)}\n                        </pre>\n                    </>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport CallDataInfoCard from '../../containers/CallDataInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function CallDataInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <CallDataInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\nimport { default as MuiButton } from '@material-ui/core/Button';\n\nimport s from './Button.module.scss';\n\ninterface Props {\n    className?: string;\n    disabled?: boolean;\n    onClick?: () => void;\n}\n\nexport default function Button({\n    children,\n    className,\n    disabled = false,\n    onClick = () => {},\n}: PropsWithChildren<Props>) {\n    return (\n        <MuiButton\n            className={classnames(className, s.button)}\n            variant=\"contained\"\n            onClick={onClick}\n            disabled={disabled}\n        >\n            {children}\n        </MuiButton>\n    );\n}\n","import React from 'react';\nimport { default as ReactCountdown } from 'react-countdown';\n\ninterface Props {\n    date: Date;\n    onComplete: () => void;\n}\n\nexport default function Countdown({\n    date,\n    onComplete,\n}: Props) {\n    return (\n        <ReactCountdown date={date} onComplete={onComplete} />\n    );\n}\n","import Big from 'big.js';\nimport React, { useCallback, useState } from 'react';\nimport Button from '../../components/Button';\nimport Countdown from '../../compositions/Countdown';\nimport { Account } from '../../models/Account';\nimport { canDataRequestBeFinalized, DataRequestViewModel } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport { ResolutionWindow } from '../../models/ResolutionWindow';\nimport trans from '../../translation/trans';\nimport { sumBigs } from '../../utils/bigUtils';\nimport { formatToken } from '../../utils/tokenUtils';\n\nimport s from './DataRequestDetailHeader.module.scss';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    onStakeClick: () => void;\n    onUnstakeClick: () => void;\n    onClaimClick: () => void;\n    onFinalizeClick: () => void;\n    account?: Account;\n    accountStakes: OutcomeStake[];\n}\n\nexport default function DataRequestDetailHeader({\n    dataRequest,\n    onStakeClick,\n    onClaimClick,\n    onUnstakeClick,\n    onFinalizeClick,\n    account,\n    accountStakes,\n}: Props) {\n    const now = new Date();\n    const [canInteract, setInteract] = useState(dataRequest.settlementTime.getTime() <= now.getTime());\n    const currentResolutionWindow: ResolutionWindow | undefined = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1] ?? undefined;\n    const isFinalized = typeof dataRequest.finalized_outcome !== 'undefined';\n    const canFinalize = canDataRequestBeFinalized(dataRequest);\n\n    const payout = accountStakes.find(stake => stake.claimPayout)?.claimPayout;\n    const roundStakes = accountStakes.filter(stake => stake.round === currentResolutionWindow?.round);\n    const stakedOnRound = sumBigs(roundStakes.map(roundStake => new Big(roundStake.stake)));\n\n    const onCountdownComplete = useCallback(() => {\n        setInteract(true);\n    }, []);\n\n    return (\n        <header className={s.header}>\n            <h1>{trans('dataRequestDetail.title', { id: dataRequest.id })}</h1>\n            <div className={s.actions}>\n                {!canInteract && (\n                    <span>\n                        {trans('dataRequestDetail.canBeResolvedIn')}\n                        <Countdown\n                            date={dataRequest.settlementTime}\n                            onComplete={onCountdownComplete}\n                        />\n                    </span>\n                )}\n\n                {canInteract && account && !isFinalized && (\n                    <Button className={s.button} onClick={onStakeClick}>\n                        {trans('dataRequestDetail.label.stake')}\n                    </Button>\n                )}\n\n                {canInteract && account && !isFinalized && stakedOnRound.gt(0) && (\n                    <Button className={s.button} onClick={onUnstakeClick}>\n                        {trans('dataRequestDetail.label.unstake')}\n                    </Button>\n                )}\n\n                {canInteract && account && canFinalize && (\n                    <Button className={s.button} onClick={onFinalizeClick}>\n                        {trans('dataRequestDetail.label.finalize')}\n                    </Button>\n                )}\n\n                {canInteract && account && !Boolean(payout) && accountStakes.length > 0 && isFinalized && (\n                    <Button className={s.button} onClick={onClaimClick}>\n                        {trans('dataRequestDetail.label.claim')}\n                    </Button>\n                )}\n\n                {payout && (\n                    <span>\n                        {trans('dataRequestDetail.label.claimed', {\n                            payout: formatToken(payout),\n                        })}\n                    </span>\n                )}\n            </div>\n        </header>\n    );\n}\n","import Big from \"big.js\";\n\nexport function sumBigs(bigs: Big[]) {\n    return bigs.reduce((prev, curr) => prev.add(curr), new Big(0));\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { DataRequestListItem, DataRequestViewModel } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\nexport type DataRequestsState = Readonly<{\n    dataRequests: DataRequestListItem[];\n    dataRequestFilters: DataRequestFilters;\n    totalDataRequests: number;\n    error?: string[];\n    detailLoading: boolean;\n    loading: boolean;\n    dataRequestDetail?: DataRequestViewModel;\n    accountStakes: OutcomeStake[];\n}>;\n\nconst initialState: DataRequestsState = {\n    detailLoading: false,\n    loading: false,\n    dataRequests: [],\n    totalDataRequests: 0,\n    accountStakes: [],\n    dataRequestFilters: {\n        onlyArbitratorRequests: false,\n    }\n};\n\nconst dataRequestsSlice = createSlice({\n    initialState,\n    name: 'dataRequests',\n    reducers: {\n        setDataRequestsErrors(state: DataRequestsState, action: PayloadAction<string[]>): DataRequestsState {\n            return ({\n                ...state,\n                error: action.payload,\n            });\n        },\n        setDataRequestsLoading(state: DataRequestsState, action: PayloadAction<boolean>): DataRequestsState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n        setDataRequestDetailLoading(state: DataRequestsState, action: PayloadAction<boolean>): DataRequestsState {\n            return ({\n                ...state,\n                detailLoading: action.payload,\n            });\n        },\n        setDataRequests(state: DataRequestsState, action: PayloadAction<DataRequestListItem[]>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequests: action.payload,\n            });\n        },\n        setDataRequestDetail(state: DataRequestsState, action: PayloadAction<DataRequestViewModel | undefined>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequestDetail: action.payload,\n            });\n        },\n        setTotalDataRequest(state: DataRequestsState, action: PayloadAction<number>): DataRequestsState {\n            return ({\n                ...state,\n                totalDataRequests: action.payload,\n            });\n        },\n        setDataRequestAccountStakes(state: DataRequestsState, action: PayloadAction<OutcomeStake[]>): DataRequestsState {\n            return ({\n                ...state,\n                accountStakes: action.payload,\n            });\n        },\n        setDataRequestFilters(state: DataRequestsState, action: PayloadAction<DataRequestFilters>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequestFilters: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setDataRequests,\n    setDataRequestsErrors,\n    setDataRequestsLoading,\n    setDataRequestDetail,\n    setDataRequestDetailLoading,\n    setTotalDataRequest,\n    setDataRequestAccountStakes,\n    setDataRequestFilters,\n} = dataRequestsSlice.actions;\n\nexport default dataRequestsSlice.reducer;\n","import { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport { StakeFormValues } from '../../containers/StakeDialog/services/createDefaultStakeFormValues';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport { Outcome, OutcomeType } from '../../models/DataRequestOutcome';\nimport { combineOutcomeStakes, OutcomeStake } from '../../models/OutcomeStake';\nimport { ResolutionWindow } from '../../models/ResolutionWindow';\nimport { getAllDataRequests, getDataRequestById } from '../../services/DataRequestService';\nimport { claimWithProvider, finalizeWithProvider, getLoggedInAccountId, stakeWithProvider, unstakeWithProvider } from '../../services/providers/ProviderRegistry';\nimport { getUserStakesByRequestId } from '../../services/UserStakeService';\nimport { Reducers } from '../reducers';\nimport { setDataRequestDetailLoading, setDataRequestDetail, setDataRequestsLoading, setDataRequests, setTotalDataRequest, setDataRequestsErrors, setDataRequestAccountStakes } from './dataRequest';\n\nexport function loadDataRequests(page: number) {\n    return async (dispatch: Function, getState: () => Reducers) => {\n        const store = getState();\n        dispatch(setDataRequestsLoading(true));\n\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const result = await getAllDataRequests({\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        }, store.dataRequest.dataRequestFilters);\n\n        dispatch(setDataRequests(result.items));\n        dispatch(setTotalDataRequest(result.total));\n        dispatch(setDataRequestsLoading(false));\n    }\n}\n\nexport function unloadDataRequest() {\n    return (dispatch: Function) => {\n        dispatch(setDataRequestDetail(undefined));\n        dispatch(setDataRequestAccountStakes([]));\n    }\n}\n\nexport function loadDataRequestById(id: string) {\n    return async (dispatch: Function) => {\n        dispatch(setDataRequestDetailLoading(true));\n        const accountId = getLoggedInAccountId();\n        const accountStakesRequest = getUserStakesByRequestId(id, accountId);\n        const dataRequest = await getDataRequestById(id);\n\n        if (!dataRequest) {\n            setDataRequestsErrors(['404']);\n            return;\n        }\n\n        const accountStakes = await accountStakesRequest;\n        let accountOutcomeStakes: OutcomeStake[] = [];\n\n        if (accountId && accountStakes[accountId]) {\n            accountOutcomeStakes = combineOutcomeStakes(accountStakes[accountId]);\n        }\n\n        dispatch(setDataRequestAccountStakes(accountOutcomeStakes));\n        dispatch(setDataRequestDetail(dataRequest));\n        dispatch(setDataRequestDetailLoading(false));\n    }\n}\n\nexport function stakeDataRequest(dataRequest: DataRequestViewModel, stakeFormValues: StakeFormValues) {\n    return async (dispatch: Function) => {\n        let outcome: Outcome = {\n            type: OutcomeType.Invalid,\n        };\n\n        if (!stakeFormValues.isInvalid) {\n            outcome = {\n                answer: stakeFormValues.answer,\n                type: OutcomeType.Answer,\n            };\n        }\n\n        await stakeWithProvider('near', stakeFormValues.amount, dataRequest, outcome);\n    }\n}\n\nexport function finalizeDataRequest(dataRequest: DataRequestViewModel) {\n    return async (dispatch: Function) => {\n        await finalizeWithProvider('near', dataRequest);\n    }\n}\n\nexport function claimDataRequest(accountId: string, dataRequest: DataRequestViewModel) {\n    return async (dispatch: Function) => {\n        await claimWithProvider('near', accountId, dataRequest);\n    }\n}\n\n//request_id: U64, resolution_round: u16, outcome: Outcome, amount: Balance\nexport function unstakeDataRequest(amount: string, dataRequest: DataRequestViewModel, outcome: Outcome) {\n    return async (dispatch: Function) => {\n        const currentResolutionWindow: ResolutionWindow | undefined = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1] ?? undefined;\n        if (!currentResolutionWindow) return;\n\n        await unstakeWithProvider('near', amount, currentResolutionWindow.round, dataRequest, outcome);\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { DataRequestViewModel } from '../../models/DataRequest';\n\nexport type DialogsState = Readonly<{\n    stakeDialog: {\n        open: boolean;\n        dataRequest?: DataRequestViewModel;\n    },\n    unstakeDialog: {\n        open: boolean;\n        dataRequest?: DataRequestViewModel;\n    },\n}>;\n\nconst initialState: DialogsState = {\n    stakeDialog: {\n        open: false,\n    },\n    unstakeDialog: {\n        open: false,\n    }\n};\n\nconst dialogsSlice = createSlice({\n    initialState,\n    name: 'dialogs',\n    reducers: {\n        setStakeDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['stakeDialog']>): DialogsState {\n            return ({\n                ...state,\n                stakeDialog: action.payload,\n            });\n        },\n\n        setUnstakeDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['unstakeDialog']>): DialogsState {\n            return ({\n                ...state,\n                unstakeDialog: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setStakeDialogOpen,\n    setUnstakeDialogOpen,\n} = dialogsSlice.actions;\n\nexport default dialogsSlice.reducer;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport DataRequestDetailHeader from '../../containers/DataRequestDetailHeader';\nimport { claimDataRequest, finalizeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setStakeDialogOpen, setUnstakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function DataRequestDetailHeaderConnector() {\n    const dispatch = useDispatch();\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const accountStakes = useSelector((store: Reducers) => store.dataRequest.accountStakes);\n\n    const handleStakeClick = useCallback(() => {\n        dispatch(setStakeDialogOpen({\n            open: true,\n            dataRequest,\n        }));\n    }, [dispatch, dataRequest]);\n\n    const handleUnstakeClick = useCallback(() => {\n        dispatch(setUnstakeDialogOpen({\n            open: true,\n            dataRequest\n        }));\n    }, [dispatch, dataRequest]);\n\n    const handleFinalizeClick = useCallback(() => {\n        if (!dataRequest) return;\n        dispatch(finalizeDataRequest(dataRequest));\n    }, [dispatch, dataRequest]);\n\n    const handleClaimClick = useCallback(() => {\n        if (!dataRequest || !account) return;\n        dispatch(claimDataRequest(account.accountId, dataRequest));\n    }, [dispatch, dataRequest, account]);\n\n    if (!dataRequest) return null;\n\n    return (\n        <DataRequestDetailHeader\n            dataRequest={dataRequest}\n            onStakeClick={handleStakeClick}\n            onFinalizeClick={handleFinalizeClick}\n            onClaimClick={handleClaimClick}\n            onUnstakeClick={handleUnstakeClick}\n            account={account}\n            accountStakes={accountStakes}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\n\nimport s from './RequestInfoCard.module.scss';\nimport InformationRows from '../InformationRows';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport { Link } from 'react-router-dom';\nimport { routePaths } from '../../routes';\nimport { prettyFormatDate } from '../../utils/dateUtils';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function RequestInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('requestInfo.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[{\n                        label: trans('requestInfo.label.requestor'),\n                        value: <Link className={s.link} to={routePaths.account('near', dataRequest.requestor)}>{dataRequest.requestor}</Link>,\n                    }, {\n                        label: trans('requestInfo.label.targetContract'),\n                        value: <Link className={s.link} to={routePaths.account('near', dataRequest.targetContract)}>{dataRequest.requestor}</Link>,\n                    }, {\n                        label: trans('requestInfo.label.dateCreated'),\n                        value: <span>{prettyFormatDate(dataRequest.date)}</span>,\n                    }, {\n                        label: trans('requestInfo.label.finalArbitratorTriggered'),\n                        value: <span>{dataRequest.finalArbitratorTriggered + ''}</span>,\n                    }, {\n                        label: trans('requestInfo.label.feePercentage'),\n                        value: <span>{`${dataRequest.config.resolutionFeePercentage / 100}%`}</span>,\n                    }, {\n                        label: trans('requestInfo.label.totalStaked'),\n                        value: <span>{`${formatToken(dataRequest.totalStaked)} FLX`}</span>,\n                    }, {\n                        label: trans('requestInfo.label.finalizedOutcome'),\n                        value: <span>{dataRequest.finalized_outcome ? transfromOutcomeToString(dataRequest.finalized_outcome) : 'null'}</span>,\n                    }]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport RequestInfoCard from '../../containers/RequestInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function RequestInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <RequestInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport TextField from '@material-ui/core/TextField';\n\nimport s from './Input.module.scss';\n\nexport interface InputProps {\n    label?: string;\n    className?: string;\n    type?: 'text' | 'number';\n    onChange?: (value: string) => void;\n    value?: string;\n    error?: string;\n    endAdornment?: any;\n}\n\nexport default function Input({\n    className,\n    label,\n    type,\n    onChange = () => {},\n    value,\n    error,\n    endAdornment,\n}: InputProps) {\n    return (\n        <TextField\n            label={label}\n            className={classnames(className, s.input)}\n            type={type}\n            onChange={(event) => onChange(event.currentTarget.value)}\n            value={value}\n            error={!!error}\n            helperText={error}\n            InputProps={{\n                endAdornment,\n            }}\n        />\n    );\n}\n","import React, { ReactElement } from 'react';\nimport classnames from 'classnames';\nimport Switch from '@material-ui/core/Switch';\n\nimport s from './OptionSwitch.module.scss';\n\ninterface Props {\n    className?: string;\n    label: string,\n    labelA: string;\n    labelB: string;\n    onChange?: (checked: boolean) => void;\n    value?: boolean;\n}\n\nexport default function OptionSwitch({\n    label,\n    labelA,\n    labelB,\n    onChange = () => {},\n    value,\n    className = '',\n}: Props): ReactElement {\n    return (\n        <span className={classnames(s.root, className)}>\n            <span>{label}</span>\n            <div className={s.options}>\n                <span>{labelA}</span>\n                <Switch\n                    value={value}\n                    classes={{\n                        thumb: s.thumb,\n                        track: s.track,\n                        switchBase: s.switchBase,\n                    }}\n                    onChange={(_, checked) => onChange(checked)}\n                />\n                <span>{labelB}</span>\n            </div>\n        </span>\n    );\n}\n","import React, { ChangeEvent } from 'react';\nimport { default as MuiSelect } from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport s from './Select.module.scss';\n\n\nexport interface SelectItem {\n    name: string;\n    value: string;\n}\n\ninterface Props {\n    id: string;\n    items: SelectItem[];\n    value: string;\n    label?: string;\n    onChange?: (value: string) => void;\n}\n\nexport default function Select({\n    items,\n    value,\n    label,\n    id,\n    onChange = () => {},\n}: Props) {\n    function handleChange(event: ChangeEvent<{ name?: string, value: unknown }>) {\n        onChange(event.target.value as string);\n    }\n\n    return (\n        <div>\n            <InputLabel id={id}>{label}</InputLabel>\n            <MuiSelect\n                value={value}\n                labelId={id}\n                className={s.select}\n                onChange={handleChange}\n            >\n                {items.map(item => (\n                    <MenuItem key={item.value} value={item.value}>{item.name}</MenuItem>\n                ))}\n            </MuiSelect>\n        </div>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\nimport { default as MuiDialog } from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport Button from '../../components/Button';\n\nimport s from './Dialog.module.scss';\nimport trans from '../../translation/trans';\n\ninterface Props {\n    title: string;\n    open: boolean;\n    isInfoDialog?: boolean;\n    onRequestClose: () => void;\n    onSubmitClick?: () => void;\n    canSubmit?: boolean;\n    hideButtons?: boolean;\n    paperClassName?: string;\n}\n\nexport default function Dialog({\n    title,\n    children,\n    open,\n    isInfoDialog = false,\n    onRequestClose,\n    onSubmitClick = () => {},\n    canSubmit = true,\n    hideButtons = false,\n    paperClassName = '',\n}: PropsWithChildren<Props>) {\n    return (\n        <MuiDialog open={open} classes={{ paper: classnames(s.paper, paperClassName) }}>\n            <DialogTitle className={s.title}>\n                {title}\n            </DialogTitle>\n            <DialogContent className={s.content}>\n                {children}\n            </DialogContent>\n            {isInfoDialog && (\n                <DialogActions>\n                    <Button className={s.cancelButton} onClick={onRequestClose}>\n                        {trans('global.action.close')}\n                    </Button>\n                </DialogActions>\n            )}\n\n            {!hideButtons && (\n                <DialogActions>\n                    <Button className={s.cancelButton} onClick={onRequestClose}>\n                        {trans('global.action.cancel')}\n                    </Button>\n                    <Button disabled={!canSubmit} className={s.confirmButton} onClick={onSubmitClick}>\n                        {trans('global.action.submit')}\n                    </Button>\n                </DialogActions>\n            )}\n        </MuiDialog>\n    );\n}\n","import React, { useState } from 'react';\nimport Input from '../../components/Input';\nimport OptionSwitch from '../../components/OptionSwitch/OptionSwitch';\nimport Select from '../../components/Select';\nimport Dialog from '../../compositions/Dialog';\nimport { Account } from '../../models/Account';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\nimport { toToken } from '../../utils/tokenUtils';\nimport createDefaultStakeFormValues, { StakeFormValues } from './services/createDefaultStakeFormValues';\nimport validateStakeFormValues from './services/validateStakeFormValues';\n\nimport s from './StakeDialog.module.scss';\n\ninterface Props {\n    onRequestClose: () => void;\n    onSubmit: (formValues: StakeFormValues) => void;\n    open: boolean;\n    account: Account;\n    dataRequest: DataRequestViewModel;\n}\n\nexport default function StakeDialog({\n    onRequestClose,\n    onSubmit,\n    open,\n    account,\n    dataRequest,\n}: Props) {\n    const [formValues, setFormValues] = useState(createDefaultStakeFormValues(dataRequest));\n\n    function handleValidityChange(isInvalid: boolean) {\n        setFormValues({\n            ...formValues,\n            isInvalid,\n        });\n    }\n\n    function handleAnswerChange(answer: string) {\n        setFormValues({\n            ...formValues,\n            answer,\n        });\n    }\n\n    function handleStakeChange(amount: string) {\n        setFormValues({\n            ...formValues,\n            amount: amount ? toToken(amount) : '0',\n            amountFormatted: amount ? amount : '0',\n        });\n    }\n\n    const errors = validateStakeFormValues(formValues, account, dataRequest);\n\n    return (\n        <Dialog\n            open={open}\n            onRequestClose={onRequestClose}\n            onSubmitClick={() => onSubmit(formValues)}\n            title={trans('stakeDialog.title')}\n            canSubmit={errors.canSubmit}\n        >\n            <form className={s.form}>\n                <div className={s.formItem}>\n                    <OptionSwitch\n                        label={trans('stakeDialog.label.validity')}\n                        labelA={trans('stakeDialog.label.valid')}\n                        labelB={trans('stakeDialog.label.invalid')}\n                        className={s.formInput}\n                        value={formValues.isInvalid}\n                        onChange={handleValidityChange}\n                    />\n                </div>\n\n                {!formValues.isInvalid && dataRequest.outcomes && (\n                    <div className={s.formItem}>\n                        <Select\n                            id=\"stake_dialog_outcome\"\n                            value={formValues.answer}\n                            label={trans('stakeDialog.label.answer')}\n                            onChange={handleAnswerChange}\n                            items={dataRequest.outcomes.map(outcome => ({\n                                name: outcome,\n                                value: outcome,\n                            }))}\n                        />\n                    </div>\n                )}\n\n                {!formValues.isInvalid && !dataRequest.outcomes && (\n                    <div className={s.formItem}>\n                        <Input\n                            label={trans('stakeDialog.label.answer')}\n                            className={s.formInput}\n                            value={formValues.answer}\n                            error={errors.answer}\n                            onChange={handleAnswerChange}\n                        />\n                    </div>\n                )}\n                <div className={s.formItem}>\n                    <Input\n                        label={trans('stakeDialog.label.stakeAmount')}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleStakeChange}\n                        type=\"number\"\n                        error={errors.amount}\n                    />\n                </div>\n                {errors.message && (<div className={s.error}>{errors.message}</div>)}\n            </form>\n        </Dialog>\n    );\n}\n","import { DataRequestViewModel } from \"../../../models/DataRequest\";\n\nexport interface StakeFormValues {\n    amount: string;\n    amountFormatted: string;\n    isInvalid: boolean;\n    answer: string;\n}\n\nexport default function createDefaultStakeFormValues(dataRequest: DataRequestViewModel): StakeFormValues {\n    return {\n        amount: '0',\n        amountFormatted: '0',\n        isInvalid: false,\n        answer: dataRequest.outcomes ? dataRequest.outcomes[0] : '',\n    };\n}\n","import Big from 'big.js';\nimport { Account } from '../../../models/Account';\nimport { DataRequestViewModel } from '../../../models/DataRequest';\nimport { OutcomeType } from '../../../models/DataRequestOutcome';\nimport trans from '../../../translation/trans';\nimport { StakeFormValues } from './createDefaultStakeFormValues';\n\ninterface StakeFormErrors {\n    amount: string;\n    answer: string;\n    message: string;\n    canSubmit: boolean;\n}\n\nexport default function validateStakeFormValues(formValues: StakeFormValues, account: Account, dataRequest: DataRequestViewModel): StakeFormErrors {\n    const errors: StakeFormErrors = {\n        amount: '',\n        answer: '',\n        message: '',\n        canSubmit: true,\n    };\n\n    const accountBalance = new Big(account.balance);\n\n    if (!formValues.isInvalid) {\n        if (!formValues.answer) {\n            errors.canSubmit = false;\n        }\n\n        if (dataRequest.outcomes && dataRequest.outcomes.length) {\n            if (!dataRequest.outcomes.includes(formValues.answer)) {\n                errors.answer = trans('stakeDialog.errors.mustBeAnOutcome');\n                errors.canSubmit = false;\n            }\n        }\n    }\n\n    if (accountBalance.lt(formValues.amount)) {\n        errors.amount = trans('stakeDialog.errors.notEnoughBalance')\n        errors.canSubmit = false;\n    }\n\n    if (new Big(formValues.amount).lte(0)) {\n        errors.canSubmit = false;\n    }\n\n    // You cannot stake on the same bonded outcome as the previous outcome\n    const currentRound = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1];\n    if (currentRound && currentRound.round !== 0) {\n        const previousRound = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 2];\n\n        if (previousRound?.bondedOutcome?.type === OutcomeType.Invalid && formValues.isInvalid) {\n            errors.canSubmit = false;\n            errors.message = trans('stakeDialog.errors.sameAnswerAsPreviousRound');\n        }\n\n        if (previousRound?.bondedOutcome?.type === OutcomeType.Answer && previousRound.bondedOutcome.answer === formValues.answer) {\n            errors.canSubmit = false;\n            errors.message = trans('stakeDialog.errors.sameAnswerAsPreviousRound');\n        }\n    }\n\n    return errors;\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport StakeDialog from '../../containers/StakeDialog';\nimport { StakeFormValues } from '../../containers/StakeDialog/services/createDefaultStakeFormValues';\nimport { stakeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setStakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\nexport default function StakeDialogConnector() {\n    const dispatch = useDispatch();\n    const open = useSelector((store: Reducers) => store.dialogs.stakeDialog.open);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const dataRequest = useSelector((store: Reducers) => store.dialogs.stakeDialog.dataRequest);\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setStakeDialogOpen({\n            open: false,\n            dataRequest: undefined,\n        }));\n    }, [dispatch]);\n\n    const handleSubmit = useCallback((formValues: StakeFormValues) => {\n        if (!dataRequest) return;\n\n        dispatch(stakeDataRequest(dataRequest, formValues))\n    }, [dispatch, dataRequest]);\n\n    if (!account || !dataRequest) return null;\n\n    return (\n        <StakeDialog\n            open={open}\n            onRequestClose={handleRequestClose}\n            onSubmit={handleSubmit}\n            account={account}\n            dataRequest={dataRequest}\n        />\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { ResolutionWindow } from '../../../../models/ResolutionWindow';\nimport trans from '../../../../translation/trans';\nimport { formatToken } from '../../../../utils/tokenUtils';\n\nimport s from './StakerReport.module.scss';\nimport { OutcomeType } from '../../../../models/DataRequestOutcome';\nimport { Link } from 'react-router-dom';\nimport { routePaths } from '../../../../routes';\n\nexport interface Props {\n    userStakes: ResolutionWindow['userStakes'];\n}\n\nexport default function StakerReport({\n    userStakes\n}: Props) {\n    return (\n        <div className={s.stakerReport}>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('stakeReport.table.label.accountId')}</TableCell>\n                            <TableCell>{trans('stakeReport.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('stakeReport.table.label.stake')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {Object.keys(userStakes).map((accountId, index) => {\n                            const outcomeInfo = userStakes[accountId][0];\n\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell>\n                                        <Link className={s.link} to={routePaths.account('near', accountId)}>{accountId}</Link>\n                                    </TableCell>\n                                    <TableCell>\n                                        {outcomeInfo.outcome.type === OutcomeType.Answer && (\n                                            <span>\"{outcomeInfo.outcome.answer}\"</span>\n                                        )}\n\n                                        {outcomeInfo.outcome.type === OutcomeType.Invalid && (\n                                            <span>{trans('stakerReport.label.invalid')}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {formatToken(outcomeInfo.stake, 18)} FLX\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    );\n}\n","import React from 'react';\nimport Accordion from '@material-ui/core/Accordion';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Big from 'big.js';\n\nimport { ResolutionWindow } from '../../models/ResolutionWindow';\nimport trans from '../../translation/trans';\nimport StakerReport from './components/StakerReport/StakerReport';\nimport InformationRows from '../InformationRows';\nimport { prettyFormatDate } from '../../utils/dateUtils';\nimport { formatToken } from '../../utils/tokenUtils';\nimport OutcomeStakeInfo from './components/OutcomeStakeInfo/OutcomeStakeInfo';\n\nimport s from './ResolutionWindowAccordion.module.scss';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\n\ninterface Props {\n    resolutionWindow: ResolutionWindow;\n    defaultExpanded?: boolean;\n}\n\nexport default function ResolutionWindowAccordion({\n    resolutionWindow,\n    defaultExpanded,\n}: Props) {\n    const percentageFilled = resolutionWindow.winningOutcomeStake ? new Big(resolutionWindow.winningOutcomeStake.stake).div(resolutionWindow.bondSize).mul(100).toString() : '0';\n\n    return (\n        <Accordion className={s.accordion} defaultExpanded={defaultExpanded}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <span className={s.roundTitle}>{trans('resolutionWindow.round', { round: resolutionWindow.round.toString() })}</span>\n                <span>{resolutionWindow.bondedOutcome ? transfromOutcomeToString(resolutionWindow.bondedOutcome) : ''}</span>\n            </AccordionSummary>\n            <AccordionDetails className={s.details}>\n                <InformationRows\n                    rows={[\n                        {\n                            label: trans('resolutionWindowAccordion.label.endTime'),\n                            value: <span>{prettyFormatDate(resolutionWindow.endTime)}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.bondSize'),\n                            value: <span>{`${formatToken(resolutionWindow.bondSize)} FLX`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.totalStaked'),\n                            value: <span>{`${formatToken(resolutionWindow.totalStaked)} FLX`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.percentageFilled'),\n                            value: <span>{`${percentageFilled}%`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.winningOutcome'),\n                            value: <span>{resolutionWindow.winningOutcomeStake ? transfromOutcomeToString(resolutionWindow.winningOutcomeStake.outcome) : ''}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.bondedOutcome'),\n                            value: <span>{resolutionWindow.bondedOutcome ? transfromOutcomeToString(resolutionWindow.bondedOutcome) : ''}</span>,\n                        }\n                    ]}\n                />\n                <h3>{trans('resolutionWindowAccordion.outcomeStakes.title')}</h3>\n                <OutcomeStakeInfo outcomeStakes={resolutionWindow.outcomeStakes} />\n                <h3>{trans('resolutionWindowAccordion.stakerReports.title')}</h3>\n                <StakerReport userStakes={resolutionWindow.userStakes} />\n            </AccordionDetails>\n        </Accordion>\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport Card from '../../components/Card';\nimport trans from '../../translation/trans';\n\nimport s from './ResolutionWindowInfoCard.module.scss';\nimport ResolutionWindowAccordion from '../ResolutionWindowAccordion';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function ResolutionWindowInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n    const resolutionWindows = dataRequest.resolutionWindows.slice().reverse();\n\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('stakerReportsInfo.title')}</h2>\n                </div>\n                <div>\n                    {resolutionWindows.map((resolutionWindow, index) => {\n                        return (\n                            <ResolutionWindowAccordion\n                                resolutionWindow={resolutionWindow}\n                                defaultExpanded={index === 0}\n                                key={resolutionWindow.round}\n                            />\n                        );\n                    })}\n                </div>\n                {resolutionWindows.length === 0 && (\n                    <div className={s.noWindows}>\n                        {trans('stakerReportsInfo.noWindows')}\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport StakerAnswersInfoCard from '../../containers/StakersReportInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function ResolutionWindowsInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <StakerAnswersInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import React from 'react';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport Input, { InputProps } from '../../components/Input/Input';\nimport trans from '../../translation/trans';\n\ninterface Props extends InputProps {\n    showMax?: boolean;\n    onMaxClick?: () => void,\n}\n\nexport default function NumberInput({\n    showMax = false,\n    onMaxClick = () => {},\n    ...props\n}: Props) {\n    return (\n        <Input\n            {...props}\n            type=\"number\"\n            endAdornment={\n                <>\n                    {showMax && (\n                        <InputAdornment position=\"end\">\n                            <Button onClick={onMaxClick}>\n                                {trans('global.max')}\n                            </Button>\n                        </InputAdornment>\n                    )}\n                </>\n            }\n        />\n    );\n}\n","import React, { useState } from 'react';\nimport Select from '../../components/Select';\nimport Dialog from '../../compositions/Dialog';\nimport NumberInput from '../../compositions/NumberInput';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport { ResolutionWindow } from '../../models/ResolutionWindow';\nimport trans from '../../translation/trans';\nimport { formatToken, toToken } from '../../utils/tokenUtils';\nimport { UnstakeFormValues, createDefaultUnstakeFormValues } from './services/createDefaultUnstakeFormValues';\nimport validateUnstakeFormValues from './services/validateUnstakeFormValues';\n\nimport s from './UnstakeDialog.module.scss';\n\ninterface Props {\n    onRequestClose: () => void;\n    onSubmit: (formValues: UnstakeFormValues) => void;\n    open: boolean;\n    accountStakes: OutcomeStake[];\n    dataRequest: DataRequestViewModel;\n}\n\n\nexport default function UnstakeDialog({\n    accountStakes,\n    dataRequest,\n    onRequestClose,\n    onSubmit,\n    open,\n}: Props) {\n    const currentResolutionWindow: ResolutionWindow | undefined = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1] ?? undefined;\n    const roundStakes = accountStakes.filter(stake => stake.round === currentResolutionWindow.round);\n\n    const [formValues, setFormValues] = useState(createDefaultUnstakeFormValues());\n\n    function handleStakeChange(amount: string) {\n        setFormValues({\n            ...formValues,\n            amount: amount ? toToken(amount) : '',\n            amountFormatted: amount ? amount : '',\n        });\n    }\n\n    function handleMaxClick() {\n        const selectedOutcomeStake = roundStakes[formValues.outcomeIndex];\n\n        setFormValues({\n            ...formValues,\n            amount: selectedOutcomeStake.stake,\n            amountFormatted: formatToken(selectedOutcomeStake.stake),\n        });\n    }\n\n    function handleOutcomeChange(outcomeIndex: string) {\n        setFormValues({\n            ...formValues,\n            outcomeIndex: Number(outcomeIndex),\n        });\n    }\n\n    const errors = validateUnstakeFormValues(formValues, roundStakes);\n\n    return (\n        <Dialog\n            open={open}\n            onRequestClose={onRequestClose}\n            onSubmitClick={() => onSubmit({\n                ...formValues,\n                outcome: roundStakes[formValues.outcomeIndex].outcome,\n            })}\n            title={trans('unstakeDialog.title')}\n            canSubmit={errors.canSubmit}\n        >\n            <form>\n                <div className={s.formItem}>\n                    <Select\n                        id=\"unstake_dialog_outcome\"\n                        value={formValues.outcomeIndex.toString()}\n                        label={trans('unstakeDialog.label.answer')}\n                        onChange={handleOutcomeChange}\n                        items={roundStakes.map((stake, index) => ({\n                            name: transfromOutcomeToString(stake.outcome),\n                            value: index.toString(),\n                        }))}\n                    />\n                </div>\n                <div className={s.formItem}>\n                    {trans('unstakeDialog.label.staked', {\n                        stake: formatToken(roundStakes[formValues.outcomeIndex].stake),\n                    })}\n                </div>\n                <div className={s.formItem}>\n                    <NumberInput\n                        label={trans('unstakeDialog.label.stakeAmount')}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleStakeChange}\n                        onMaxClick={handleMaxClick}\n                        showMax\n                        error={errors.amount}\n                    />\n                </div>\n            </form>\n        </Dialog>\n    );\n}\n","import { Outcome, OutcomeType } from \"../../../models/DataRequestOutcome\";\n\nexport interface UnstakeFormValues {\n    outcome: Outcome;\n    outcomeIndex: number;\n    amount: string;\n    amountFormatted: string;\n}\n\nexport function createDefaultUnstakeFormValues(): UnstakeFormValues {\n    return {\n        outcome: {\n            type: OutcomeType.Invalid,\n        },\n        amount: '',\n        amountFormatted: '',\n        outcomeIndex: 0,\n    };\n}\n","import Big from \"big.js\";\nimport { OutcomeStake } from \"../../../models/OutcomeStake\";\nimport trans from \"../../../translation/trans\";\nimport { UnstakeFormValues } from \"./createDefaultUnstakeFormValues\";\n\ninterface UnstakeFormErrors {\n    canSubmit: boolean;\n    amount: string;\n}\n\nexport default function validateUnstakeFormValues(formValues: UnstakeFormValues, roundStakes: OutcomeStake[]): UnstakeFormErrors {\n    const errors: UnstakeFormErrors = {\n        canSubmit: true,\n        amount: '',\n    };\n\n    const roundStake = roundStakes[formValues.outcomeIndex];\n\n    if (formValues.amount) {\n        const amount = new Big(formValues.amount);\n\n        if (amount.lte(0)) {\n            errors.canSubmit = false;\n        }\n\n        if (amount.gt(roundStake.stake)) {\n            errors.canSubmit = false;\n            errors.amount = trans('unstakeDialog.errors.notEnoughStaked');\n        }\n    } else {\n        errors.canSubmit = false;\n    }\n\n    return errors;\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport UnstakeDialog from '../../containers/UnstakeDialog';\nimport { UnstakeFormValues } from '../../containers/UnstakeDialog/services/createDefaultUnstakeFormValues';\nimport { unstakeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setUnstakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function UnstakeDialogConnector() {\n    const dispatch = useDispatch();\n    const open = useSelector((store: Reducers) => store.dialogs.unstakeDialog.open);\n    const accountStakes = useSelector((store: Reducers) => store.dataRequest.accountStakes);\n    const dataRequest = useSelector((store: Reducers) => store.dialogs.unstakeDialog.dataRequest);\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setUnstakeDialogOpen({\n            open: false,\n            dataRequest: undefined,\n        }));\n    }, [dispatch]);\n\n    const handleSubmit = useCallback((formValues: UnstakeFormValues) => {\n        if (!dataRequest) return;\n\n        dispatch(unstakeDataRequest(formValues.amount, dataRequest, formValues.outcome));\n    }, [dispatch, dataRequest]);\n\n    if (!dataRequest) return null;\n\n    return (\n        <UnstakeDialog\n            onRequestClose={handleRequestClose}\n            open={open}\n            dataRequest={dataRequest}\n            accountStakes={accountStakes}\n            onSubmit={handleSubmit}\n        />\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\n\nimport { DataRequestListItem, getDataRequestTypeTranslation } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\nimport { routePaths } from '../../routes';\nimport Pagination from '../Pagination/Pagination';\n\nimport s from './DataRequestsOverview.module.scss';\nimport { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport { prettyFormatDate } from '../../utils/dateUtils';\n\ninterface Props {\n    dataRequests: DataRequestListItem[];\n    page: number;\n    totalItems: number;\n    showPagination?: boolean;\n    onRequestPageChange: (page: number) => void;\n}\n\nexport default function DataRequestsOverview({\n    dataRequests,\n    page,\n    totalItems,\n    showPagination = true,\n    onRequestPageChange,\n}: Props) {\n    return (\n        <div className={s.root}>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('dataRequestsOverview.table.label.id')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.type')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.status')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.timestamp')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {dataRequests.map((request) => (\n                            <TableRow key={request.id}>\n                                <TableCell className={s.linkCell}>\n                                    <Link to={routePaths.dataRequestDetail('near', request.id)}>\n                                        #{request.id}\n                                    </Link>\n                                </TableCell>\n                                <TableCell>\n                                    {getDataRequestTypeTranslation(request.type)}\n                                </TableCell>\n                                <TableCell>\n                                    {request.finalized_outcome && (\n                                        <span>{trans('global.status.completed')}</span>\n                                    )}\n\n                                    {!request.finalized_outcome && (\n                                        <span>{trans('global.status.ongoing')}</span>\n                                    )}\n                                </TableCell>\n                                <TableCell>\n                                    {prettyFormatDate(request.date)}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            {showPagination && (\n                <Pagination\n                    className={s.pagination}\n                    total={Math.ceil(totalItems / DEFAULT_PAGINATION_LIMIT) - 1}\n                    page={page}\n                    rowsPerPage={DEFAULT_PAGINATION_LIMIT}\n                    onChangePage={onRequestPageChange}\n                />\n            )}\n        </div>\n    );\n}\n","import React, { useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { Reducers } from '../../redux/reducers';\nimport { routePaths } from '../../routes';\n\ninterface Props {\n    page: number;\n}\n\nexport default function DataRequestsOverviewConnector({\n    page,\n}: Props) {\n    const history = useHistory();\n    const dataRequests = useSelector((store: Reducers) => store.dataRequest.dataRequests);\n    const totalItems = useSelector((store: Reducers) => store.dataRequest.totalDataRequests);\n\n    const handleRequestPageChange = useCallback((page: number) => {\n        history.push({\n            pathname: routePaths.dataRequests(page.toString()),\n            search: history.location.search,\n        });\n    }, [history]);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={dataRequests}\n            page={page}\n            totalItems={totalItems}\n            onRequestPageChange={handleRequestPageChange}\n        />\n    );\n}\n","import React from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { default as MuiCheckbox } from '@material-ui/core/Checkbox';\n\nimport s from './Checkbox.module.scss';\n\ninterface Props {\n    checked: boolean;\n    onChange: (checked: boolean) => void;\n    label: string;\n}\n\nexport default function Checkbox({\n    checked,\n    label,\n    onChange,\n}: Props) {\n    return (\n        <FormControlLabel\n            control={\n                <MuiCheckbox\n                    checked={checked}\n                    onChange={(e) => onChange(e.target.checked)}\n                    classes={{\n                        checked: s.checked\n                    }}\n                />\n            }\n            label={label}\n        />\n    );\n}\n","import React from 'react';\nimport Checkbox from '../../components/Checkbox';\nimport trans from '../../translation/trans';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\nimport s from './DataRequestsOverviewFilters.module.scss';\ninterface Props {\n    totalRequests: string;\n    filters: DataRequestFilters;\n    onFilterChange: (filters: DataRequestFilters) => void;\n}\n\nexport default function DataRequestsOverviewFilters({\n    totalRequests,\n    filters,\n    onFilterChange,\n}: Props) {\n\n    function handleArbitratorCheckboxClick(checked: boolean) {\n        onFilterChange({\n            ...filters,\n            onlyArbitratorRequests: checked,\n        });\n    }\n\n    return (\n        <div>\n            <h1>{trans('dataRequests.title')}</h1>\n            <div className={s.wrapper}>\n                <span className={s.subtitle}>{trans('dataRequest.subtitle', { total: totalRequests })}</span>\n                <Checkbox\n                    label={trans('dataRequestFilters.label.arbitrator')}\n                    checked={filters.onlyArbitratorRequests}\n                    onChange={handleArbitratorCheckboxClick}\n                />\n            </div>\n        </div>\n    );\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router';\nimport DataRequestsOverviewFilters from '../../containers/DataRequestsOverviewFilters';\nimport { setDataRequestFilters } from '../../redux/dataRequest/dataRequest';\nimport { loadDataRequests } from '../../redux/dataRequest/dataRequestAction';\nimport { Reducers } from '../../redux/reducers';\nimport { routePaths } from '../../routes';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\ninterface Params {\n    page: string;\n}\n\nexport default function DataRequestsOverviewFiltersConnector() {\n    const dispatch = useDispatch();\n    const totalRequests = useSelector((store: Reducers) => store.dataRequest.totalDataRequests);\n    const params = useParams<Params>();\n    const history = useHistory();\n    const urlParams = new URLSearchParams(history.location.search);\n    const filters: DataRequestFilters = {\n        onlyArbitratorRequests: urlParams.get('onlyArbitratorRequests') === 'true',\n    };\n\n    function onFilterChange(filters: DataRequestFilters) {\n        const url = new URLSearchParams();\n        url.append('onlyArbitratorRequests', '' + filters.onlyArbitratorRequests);\n\n        history.replace({\n            pathname: routePaths.dataRequests(params.page),\n            search: url.toString(),\n        });\n    }\n\n    useEffect(() => {\n        dispatch(setDataRequestFilters(filters));\n        dispatch(loadDataRequests(Number(params.page)));\n    }, [urlParams.toString(), dispatch, params]);\n\n    return (\n        <DataRequestsOverviewFilters\n            totalRequests={totalRequests.toString()}\n            filters={filters}\n            onFilterChange={onFilterChange}\n        />\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function HomeDataRequestsConnector() {\n    const latestRequests = useSelector((store: Reducers) => store.stats.latestRequests);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={latestRequests}\n            page={0}\n            totalItems={latestRequests.length}\n            onRequestPageChange={() => {}}\n            showPagination={false}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\nimport SearchConnector from '../../connectors/SearchConnector';\nimport trans from '../../translation/trans';\n\nimport s from './HomeHeader.module.scss';\n\nexport default function HomeHeader() {\n    return (\n        <Card>\n            <CardContent>\n                <h1 className={s.title}>{trans('homeHeader.title')}</h1>\n                <SearchConnector inputClassName={s.searchInput} className={s.search} />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport HomeHeader from '../../containers/HomeHeader';\n\n\nexport default function HomeHeaderConnector() {\n    return (\n        <HomeHeader />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../../../components/Card';\n\nimport s from './StatCard.module.scss';\n\ninterface Props {\n    label: string;\n    value: string;\n}\n\nexport default function StatCard({\n    label,\n    value,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <h2 className={s.statLabel}>{label}</h2>\n                <span className={s.statValue}>{value}</span>\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport millify from 'millify';\n\nimport s from './OracleStats.module.scss';\nimport trans from '../../translation/trans';\nimport StatCard from './components/StatCard/StatCard';\n\ninterface Props {\n    totalRequests: string;\n    tokenPrice: number;\n    tokenMarketCap: number;\n}\n\nexport default function OracleStats({\n    totalRequests,\n    tokenMarketCap,\n    tokenPrice,\n}: Props) {\n    const marketCapFormatted = millify(tokenMarketCap);\n\n    return (\n        <div className={s.root}>\n            <StatCard\n                label={trans('oracleStats.label.totalRequests')}\n                value={totalRequests}\n            />\n            <StatCard\n                label={trans('oracleStats.label.tokenPrice')}\n                value={`$${tokenPrice}`}\n            />\n            <StatCard\n                label={trans('oracleStats.label.tokenMarketCap')}\n                value={`$${marketCapFormatted}`}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OracleStats from '../../containers/OracleStats';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function OracleStatsConnector() {\n    const totalRequests = useSelector((store: Reducers) => store.stats.totalRequests);\n    const tokenPrice = useSelector((store: Reducers) => store.stats.tokenPrice);\n    const tokenMarketCap = useSelector((store: Reducers) => store.stats.tokenMarketCap);\n\n    return (\n        <OracleStats\n            totalRequests={totalRequests}\n            tokenMarketCap={tokenMarketCap}\n            tokenPrice={tokenPrice}\n        />\n    );\n}\n","import { COINGECKO_API_URL } from '../config';\n\nexport interface TokenMarketInfoResponse {\n    price: number;\n    marketCap: number;\n}\n\nexport async function getTokenMarketInfoByTicker(ticker: string, currency = 'usd'): Promise<TokenMarketInfoResponse> {\n    try {\n        const response = await fetch(`${COINGECKO_API_URL}/coins/${ticker}?localization=false`);\n        const data = await response.json();\n\n        return {\n            price: data.market_data.current_price[currency],\n            marketCap: data.market_data.market_cap[currency],\n        };\n    } catch (error) {\n        console.error('[getTokenMarketInfoByTicker]', error);\n\n        return {\n            marketCap: 0,\n            price: 0,\n        };\n    }\n}\n\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { DataRequestListItem } from '../../models/DataRequest';\n\nexport type StatsState = Readonly<{\n    totalRequests: string;\n    tokenPrice: number;\n    tokenMarketCap: number;\n    latestRequests: DataRequestListItem[];\n}>;\n\nconst initialState: StatsState = {\n    totalRequests: '0',\n    tokenPrice: 0,\n    tokenMarketCap: 0,\n    latestRequests: [],\n};\n\nconst statsSlice = createSlice({\n    initialState,\n    name: 'stats',\n    reducers: {\n        setTotalRequestsStat(state: StatsState, action: PayloadAction<string>): StatsState {\n            return ({\n                ...state,\n                totalRequests: action.payload,\n            });\n        },\n\n        setTokenPriceStat(state: StatsState, action: PayloadAction<number>): StatsState {\n            return ({\n                ...state,\n                tokenPrice: action.payload,\n            });\n        },\n\n        setTokenMarketCapStat(state: StatsState, action: PayloadAction<number>): StatsState {\n            return ({\n                ...state,\n                tokenMarketCap: action.payload,\n            });\n        },\n\n        setLatestRequestsStat(state: StatsState, action: PayloadAction<DataRequestListItem[]>): StatsState {\n            return ({\n                ...state,\n                latestRequests: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setTokenMarketCapStat,\n    setTokenPriceStat,\n    setTotalRequestsStat,\n    setLatestRequestsStat,\n} = statsSlice.actions;\n\nexport default statsSlice.reducer;\n","import { COINGECKO_TOKEN_TICKER } from \"../../config\";\nimport { getTokenMarketInfoByTicker } from \"../../services/DashboardService\";\nimport { getAllDataRequests } from \"../../services/DataRequestService\"\nimport cache from \"../../utils/cache\";\nimport { setLatestRequestsStat, setTokenMarketCapStat, setTokenPriceStat, setTotalRequestsStat } from \"./stats\";\n\nexport function loadStats() {\n    return async (dispatch: Function) => {\n        getAllDataRequests({\n            limit: 10,\n            offset: 0,\n        }, { onlyArbitratorRequests: false }).then((result) => {\n            dispatch(setTotalRequestsStat(result.total.toString()));\n            dispatch(setLatestRequestsStat(result.items));\n        });\n\n        cache('flx_token_price', async () => {\n            return getTokenMarketInfoByTicker(COINGECKO_TOKEN_TICKER);\n        }, 10000).then((result) => {\n            dispatch(setTokenPriceStat(result.price));\n            dispatch(setTokenMarketCapStat(result.marketCap));\n        });\n    }\n}\n","import { ComponentType } from 'react';\nimport AccountPage from './pages/AccountPage';\nimport DataRequestDetailPage from './pages/DataRequestDetailPage';\nimport DataRequestsPage from './pages/DataRequestsPage';\nimport HomePage from './pages/HomePage';\nimport SearchResultPage from './pages/SearchResultPage';\nimport trans from './translation/trans';\n\ninterface RouteProps {\n    component: ComponentType;\n    exact: boolean;\n    path: string;\n    navPath: string;\n    inNavigation: boolean;\n    key: string;\n    label: string;\n    icon?: string;\n}\n\nexport const routePaths = {\n    root: () => '/',\n    account: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}`,\n    accountTransactions: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}/transactions`,\n    accountUnclaimed: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}/unclaimed`,\n\n    search: (query = ':query') => `/search/${query}`,\n    dataRequests: (page = ':page') => `/requests/${page}`,\n    dataRequestDetail: (provider = ':provider', id = ':id') => `/request/${provider}/${id}`,\n}\n\nexport const routes: RouteProps[] = [\n    {\n        component: HomePage,\n        exact: true,\n        inNavigation: true,\n        key: 'home',\n        label: trans('routes.label.home'),\n        path: routePaths.root(),\n        navPath: routePaths.root(),\n    },\n    {\n        component: SearchResultPage,\n        exact: true,\n        inNavigation: false,\n        key: 'search',\n        label: trans('routes.label.search'),\n        path: routePaths.search(),\n        navPath: routePaths.search(),\n    },\n    {\n        component: AccountPage,\n        exact: false,\n        inNavigation: false,\n        key: 'account',\n        label: trans('routes.label.account'),\n        path: routePaths.account(),\n        navPath: routePaths.account(),\n    },\n    {\n        component: DataRequestDetailPage,\n        exact: false,\n        inNavigation: false,\n        key: 'data-request-detail',\n        label: 'Data request detail',\n        path: routePaths.dataRequestDetail(),\n        navPath: routePaths.dataRequestDetail(),\n    },\n    {\n        component: DataRequestsPage,\n        exact: true,\n        inNavigation: true,\n        key: 'data-requests',\n        label: trans('routes.label.dataRequests'),\n        path: routePaths.dataRequests(),\n        navPath: routePaths.dataRequests('0'),\n    },\n];\n","import useInterval from '@use-it/interval';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HOME_REFRESH_INTERVAL } from '../../config';\nimport HomeDataRequestsConnector from '../../connectors/HomeDataRequestsConnector';\nimport HomeHeaderConnector from '../../connectors/HomeHeaderConnector';\nimport OracleStatsConnector from '../../connectors/OracleStatsConnector';\n\nimport Page from '../../containers/Page';\nimport { loadStats } from '../../redux/stats/statsActions';\nimport trans from '../../translation/trans';\n\n\nexport default function HomePage() {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(loadStats());\n    }, [dispatch]);\n\n    useInterval(() => {\n        dispatch(loadStats());\n    }, HOME_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <HomeHeaderConnector />\n            <OracleStatsConnector />\n            <h2>{trans('homePage.title.latestRequests')}</h2>\n            <HomeDataRequestsConnector />\n        </Page>\n    );\n}\n","import React from 'react';\nimport { useParams } from 'react-router';\n\nimport Page from '../../containers/Page';\nimport trans from '../../translation/trans';\n\nimport s from './SearchResultPage.module.scss';\n\ninterface Params {\n    query: string;\n}\n\nexport default function SearchResultPage() {\n    const params = useParams<Params>();\n\n    return (\n        <Page>\n            <div>\n                <h1 className={s.title}>{trans('searchResultPage.title', { query: params.query })}</h1>\n            </div>\n            <div>\n                {trans('searchResultPage.noResults')}\n            </div>\n        </Page>\n    );\n}\n","import CardContent from '@material-ui/core/CardContent';\nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Route, Switch, useHistory, useLocation, useParams } from 'react-router';\nimport Card from '../../components/Card';\nimport TabBar from '../../compositions/TabBar';\nimport { TabBarItem } from '../../compositions/TabBar/TabBar';\nimport AccountDetailsInfoCardConnector from '../../connectors/AccountDetailsInfoCardConnector';\nimport Page from '../../containers/Page';\nimport { loadAccount } from '../../redux/account/accountActions';\nimport { routePaths } from '../../routes';\nimport trans from '../../translation/trans';\nimport AccountStakesPage from './sub-pages/AccountStakesPage';\nimport AccountTransactionsPage from './sub-pages/AccountTransactionsPage';\n\nimport s from './AccountPage.module.scss';\nimport AccountUnclaimedPage from './sub-pages/AccountUnclaimedPage';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountPage() {\n    const params = useParams<Params>();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const location = useLocation();\n\n    useEffect(() => {\n        dispatch(loadAccount(params.provider, params.accountId));\n    }, [dispatch, params]);\n\n    const onTabClick = useCallback((item: TabBarItem) => {\n        history.push(item.id);\n    }, [history]);\n\n    return (\n        <Page>\n            <div>\n                <h1 className={s.title}>{params.accountId}</h1>\n            </div>\n            <AccountDetailsInfoCardConnector />\n            <Card className={s.card}>\n                <CardContent>\n                    <TabBar\n                        activeId={location.pathname}\n                        className={s.tabBar}\n                        onTabClick={onTabClick}\n                        items={[{\n                            id: routePaths.account(params.provider, params.accountId),\n                            label: trans('accountPage.label.stakes'),\n                            show: true,\n                        }, {\n                            id: routePaths.accountUnclaimed(params.provider, params.accountId),\n                            label: trans('accountPage.label.unclaimed'),\n                            show: true,\n                        }]}\n                    />\n                    <Switch>\n                        <Route exact path={routePaths.account()} component={AccountStakesPage} />\n                        <Route exact path={routePaths.accountTransactions()} component={AccountTransactionsPage} />\n                        <Route exact path={routePaths.accountUnclaimed()} component={AccountUnclaimedPage} />\n                    </Switch>\n                </CardContent>\n            </Card>\n        </Page>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport useInterval from '@use-it/interval';\nimport classnames from 'classnames';\n\nimport AccountStakesInfoCardConnector from '../../connectors/AccountStakesInfoCardConnector';\nimport CallDataInfoConnector from '../../connectors/CallDataInfoConnector';\nimport DataRequestDetailHeaderConnector from '../../connectors/DataRequestDetailHeaderConnector';\nimport RequestInfoConnector from '../../connectors/RequestInfoConnector';\nimport StakeDialogConnector from '../../connectors/StakeDialogConnector';\nimport ResolutionWindowsInfoConnector from '../../connectors/ResolutionWindowsInfoConnector';\nimport Page from '../../containers/Page';\nimport { loadDataRequestById, unloadDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { Reducers } from '../../redux/reducers';\nimport { REQUEST_DETAIL_REFRESH_INTERVAL } from '../../config';\nimport UnstakeDialogConnector from '../../connectors/UnstakeDialogConnector';\n\nimport s from './DataRequestDetailPage.module.scss';\n\ninterface RouterParams {\n    id: string;\n}\n\nexport default function DataRequestDetailPage() {\n    const dispatch = useDispatch();\n    const { id } = useParams<RouterParams>();\n    const account = useSelector((store: Reducers) => store.account.account);\n\n    useEffect(() => {\n        dispatch(loadDataRequestById(id));\n\n        return () => {\n            dispatch(unloadDataRequest());\n        }\n    }, [dispatch, id]);\n\n    useInterval(() => {\n        dispatch(loadDataRequestById(id));\n    }, REQUEST_DETAIL_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <DataRequestDetailHeaderConnector />\n            <StakeDialogConnector />\n            <UnstakeDialogConnector />\n            <RequestInfoConnector className={s.card} />\n            {account && <AccountStakesInfoCardConnector />}\n            <CallDataInfoConnector className={s.card} />\n            <ResolutionWindowsInfoConnector className={classnames(s.card, s.lastCard)} />\n        </Page>\n    );\n}\n","import useInterval from '@use-it/interval';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport DataRequestsOverviewConnector from '../../connectors/DataRequestsOverviewConnector';\nimport Page from '../../containers/Page';\nimport { loadDataRequests } from '../../redux/dataRequest/dataRequestAction';\nimport { REQUEST_LIST_REFRESH_INTERVAL } from '../../config';\nimport DataRequestsOverviewFiltersConnector from '../../connectors/DataRequestsOverviewFiltersConnector';\n\ninterface Params {\n    page: string;\n}\n\nexport default function DataRequestsPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useInterval(() => {\n        dispatch(loadDataRequests(Number(params.page)));\n    }, REQUEST_LIST_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <DataRequestsOverviewFiltersConnector />\n            <DataRequestsOverviewConnector page={Number(params.page)} />\n        </Page>\n    );\n}\n","import { combineReducers } from 'redux';\n\nimport dataRequest, { DataRequestsState } from './dataRequest/dataRequest';\nimport account, { AccountState } from './account/account';\nimport dialogs, { DialogsState } from './dialogs/dialogs';\nimport stats, { StatsState } from './stats/stats';\n\nexport interface Reducers {\n    dataRequest: DataRequestsState;\n    account: AccountState;\n    dialogs: DialogsState;\n    stats: StatsState;\n}\n\nexport default combineReducers<Reducers>({\n    account,\n    dataRequest,\n    dialogs,\n    stats,\n});\n","import {\n    applyMiddleware,\n    CombinedState,\n    createStore,\n    Store,\n    StoreEnhancer,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport reducers, { Reducers } from './reducers';\n\nconst createEnhancer = (): StoreEnhancer => (process.env.REACT_APP_APP_ENV !== 'production'\n    ? composeWithDevTools(applyMiddleware(thunk))\n    : applyMiddleware(thunk)\n);\n\nexport default function configureStore(preloadedState: Record<string, any> = {}): Store<CombinedState<Reducers>> {\n    const enhancer = createEnhancer();\n    return createStore(reducers, preloadedState, enhancer);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { StylesProvider } from '@material-ui/core/styles';\n\nimport { routes } from './routes';\nimport configureStore from './redux/store';\nimport { initProviders } from './services/providers/ProviderRegistry';\n\nimport './styles/global.module.scss';\n\nconst store = configureStore({});\ninitProviders();\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter basename=\"/\" hashType=\"hashbang\">\n            <StylesProvider injectFirst>\n                <Switch>\n                    {routes.map(route => <Route {...route} key={route.key} />)}\n                </Switch>\n            </StylesProvider>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"CallDataInfoCard_titleWrapper__27iZZ\",\"title\":\"CallDataInfoCard_title__y9qga\",\"label\":\"CallDataInfoCard_label__KSOgB\",\"table\":\"CallDataInfoCard_table__2FKa3\",\"tableHeadRow\":\"CallDataInfoCard_tableHeadRow__RWXv0\",\"tableItem\":\"CallDataInfoCard_tableItem__3hv8p\",\"tableItemInner\":\"CallDataInfoCard_tableItemInner__1JjPs\",\"possibleOutcomes\":\"CallDataInfoCard_possibleOutcomes__2zyN7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"StakeDialog_form__2Jewc\",\"formItem\":\"StakeDialog_formItem__11Oc1\",\"formInput\":\"StakeDialog_formInput__1nO1v\",\"error\":\"StakeDialog_error__3U3jC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"DataRequestDetailHeader_header__22oVK\",\"button\":\"DataRequestDetailHeader_button__zUMJ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"Dialog_paper__XrzDE\",\"title\":\"Dialog_title__2o5jO\",\"content\":\"Dialog_content__2Ebv9\",\"cancelButton\":\"Dialog_cancelButton__3SRaV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"DataRequestsOverview_root__1C_f3\",\"container\":\"DataRequestsOverview_container__gtVbk\",\"tableHead\":\"DataRequestsOverview_tableHead__1UCIA\",\"linkCell\":\"DataRequestsOverview_linkCell__v_ecT\",\"pagination\":\"DataRequestsOverview_pagination__3VSEr\"};"],"sourceRoot":""}