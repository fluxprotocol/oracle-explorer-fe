{"version":3,"sources":["compositions/Dialog/Dialog.module.scss","containers/OutcomeStakesOverview/OutcomeStakesOverview.module.scss","containers/DataRequestDetailHeader/DataRequestDetailHeader.module.scss","components/OptionSwitch/OptionSwitch.module.scss","containers/ResolutionWindowAccordion/components/StakerReport/StakerReport.module.scss","containers/RequestInfoCard/RequestInfoCard.module.scss","containers/UnstakeDialog/UnstakeDialog.module.scss","pages/DataRequestDetailPage/DataRequestDetailPage.module.scss","compositions/TabBar/TabBar.module.scss","compositions/LabeledText/LabeledText.module.scss","containers/AccountDetailsInfoCard/AccountDetailsInfoCard.module.scss","containers/Footer/Footer.module.scss","pages/AccountPage/AccountPage.module.scss","containers/WhitelistInfoCard/WhitelistInfoCard.module.scss","containers/OracleConfigInfoCard/OracleConfigInfoCard.module.scss","containers/StakersReportInfoCard/ResolutionWindowInfoCard.module.scss","containers/ResolutionWindowAccordion/components/OutcomeStakeInfo/OutcomeStakeInfo.module.scss","containers/ResolutionWindowAccordion/ResolutionWindowAccordion.module.scss","containers/HomeHeader/HomeHeader.module.scss","containers/OracleStats/components/StatCard/StatCard.module.scss","containers/InformationRows/InformationRows.module.scss","containers/StorageManagerDialog/StorageManagerDialog.module.scss","containers/Page/Page.module.scss","components/ToggleButtons/ToggleButtons.module.scss","containers/DataRequestsOverviewFilters/DataRequestsOverviewFilters.module.scss","components/Card/Card.module.scss","components/InfoToolTip/InfoToolTip.module.scss","components/FakeLinkButton/FakeLinkButton.module.scss","components/Button/Button.module.scss","containers/Pagination/Pagination.module.scss","components/ExternalLink/ExternalLink.module.scss","components/Select/Select.module.scss","components/Checkbox/Checkbox.module.scss","containers/OracleStats/OracleStats.module.scss","pages/SearchResultPage/SearchResultPage.module.scss","containers/Menu/Menu.module.scss","components/Card/Card.tsx","compositions/TabBar/TabBar.tsx","components/InfoToolTip/InfoToolTip.tsx","compositions/LabeledText/LabeledText.tsx","containers/InformationRows/InformationRows.tsx","translation/trans.ts","utils/tokenUtils.ts","containers/AccountDetailsInfoCard/AccountDetailsInfoCard.tsx","connectors/AccountDetailsInfoCardConnector/AccountDetailsInfoCardConnector.tsx","components/FakeLinkButton/FakeLinkButton.tsx","components/SearchInput/SearchInput.tsx","containers/SearchForm/SearchForm.tsx","utils/cache.ts","models/DataRequestOutcome.ts","config.ts","services/providers/near/NearService.ts","services/providers/near/NearConnectService.ts","services/providers/near/StorageManagerService.ts","services/providers/ProviderRegistry.ts","services/providers/near/NearProvider.ts","utils/dateUtils.ts","utils/jsonUtils.ts","models/Claim.ts","models/OracleConfig.ts","models/DataRequest.ts","models/UserStakes.ts","models/ResolutionWindow.ts","services/GraphQLService.ts","services/DataRequestService.ts","services/SearchService.ts","connectors/SearchConnector/SearchConnector.tsx","components/Button/Button.tsx","compositions/Dialog/Dialog.tsx","components/Input/Input.tsx","compositions/NumberInput/NumberInput.tsx","containers/StorageManagerDialog/StorageManagerDialog.tsx","containers/StorageManagerDialog/services/createDefaultStorageManagerFormValues.ts","containers/StorageManagerDialog/services/validateStorageManagerFormValues.ts","redux/dialogs/dialogs.ts","connectors/StorageManagerDialogConnector/StorageManagerDialogConnector.tsx","containers/Menu/Menu.tsx","models/WhitelistItem.ts","services/AccountService.ts","services/AnalyticsService.ts","models/OutcomeStake.ts","services/UserStakeService.ts","redux/account/account.ts","redux/account/accountActions.ts","redux/appconfig/appconfig.ts","connectors/MenuConnector/MenuConnector.tsx","redux/appconfig/appconfigActions.ts","containers/Footer/Footer.tsx","containers/Page/Page.tsx","containers/Pagination/Pagination.tsx","containers/OutcomeStakesOverview/OutcomeStakesOverview.tsx","connectors/AccountOutcomeStakesConnector/AccountOutcomeStakesConnector.tsx","pages/AccountPage/sub-pages/AccountStakesPage/AccountStakesPage.tsx","containers/DataRequestsOverview/DataRequestsOverview.tsx","connectors/AccountRequestsConnector/AccountRequestsConnector.tsx","pages/AccountPage/sub-pages/AccountRequestsPage/AccountRequestsPage.tsx","connectors/AccountUnclaimedStakesConnector/AccountUnclaimedStakesConnector.tsx","pages/AccountPage/sub-pages/AccountUnclaimedPage/AccountUnclaimedPage.tsx","components/ExternalLink/ExternalLink.tsx","containers/WhitelistInfoCard/WhitelistInfoCard.tsx","connectors/WhitelistInfoCardConnector/WhitelistInfoCardConnector.tsx","components/ToggleButtons/ToggleButtons.tsx","containers/LineChart/utils/generateLineChart.ts","containers/LineChart/LineChart.tsx","connectors/AccountAnalyticsConnector/AccountAnalyticsConnector.tsx","pages/AccountPage/sub-pages/AccountAnalyticsPage/AccountAnalyticsPage.tsx","connectors/RequestorAnalyticsConnector/RequestorAnalyticsConnector.tsx","pages/AccountPage/sub-pages/AccountRequestorAnalyticsPage/AccountRequestorAnalyticsPage.tsx","containers/OracleConfigInfoCard/OracleConfigInfoCard.tsx","utils/prettyFormatNumber.ts","connectors/OracleConfigInfoCardConnector/OracleConfigInfoCardConnector.tsx","services/OracleConfigService.ts","redux/oracleConfig/oracleConfig.ts","containers/AccountStakesInfoCard/AccountStakesInfoCard.tsx","connectors/AccountStakesInfoCardConnector/AccountStakesInfoCardConnector.tsx","containers/CallDataInfoCard/CallDataInfoCard.tsx","connectors/CallDataInfoConnector/CallDataInfoConnector.tsx","compositions/Countdown/Countdown.tsx","containers/DataRequestDetailHeader/DataRequestDetailHeader.tsx","redux/dataRequest/dataRequest.ts","redux/dataRequest/dataRequestAction.ts","connectors/DataRequestDetailHeaderConnector/DataRequestDetailHeaderConnector.tsx","containers/RequestInfoCard/RequestInfoCard.tsx","connectors/RequestInfoConnector/RequestInfoConnector.tsx","components/OptionSwitch/OptionSwitch.tsx","components/Select/Select.tsx","containers/StakeDialog/StakeDialog.tsx","containers/StakeDialog/services/createDefaultStakeFormValues.ts","containers/StakeDialog/services/validateStakeFormValues.ts","connectors/StakeDialogConnector/StakeDialogConnector.tsx","containers/ResolutionWindowAccordion/components/StakerReport/StakerReport.tsx","containers/ResolutionWindowAccordion/components/OutcomeStakeInfo/OutcomeStakeInfo.tsx","containers/ResolutionWindowAccordion/ResolutionWindowAccordion.tsx","containers/StakersReportInfoCard/ResolutionWindowInfoCard.tsx","connectors/ResolutionWindowsInfoConnector/ResolutionWindowsInfoConnector.tsx","containers/UnstakeDialog/UnstakeDialog.tsx","containers/UnstakeDialog/services/createDefaultUnstakeFormValues.ts","containers/UnstakeDialog/services/validateUnstakeFormValues.ts","connectors/UnstakeDialogConnector/UnstakeDialogConnector.tsx","connectors/DataRequestsOverviewConnector/DataRequestsOverviewConnector.tsx","components/Checkbox/Checkbox.tsx","containers/DataRequestsOverviewFilters/DataRequestsOverviewFilters.tsx","connectors/DataRequestsOverviewFiltersConnector/DataRequestsOverviewFiltersConnector.tsx","connectors/HomeDataRequestsConnector/HomeDataRequestsConnector.tsx","containers/HomeHeader/HomeHeader.tsx","connectors/HomeHeaderConnector/HomeHeaderConnector.tsx","containers/OracleStats/components/StatCard/StatCard.tsx","containers/OracleStats/OracleStats.tsx","connectors/OracleStatsConnector/OracleStatsConnector.tsx","services/DashboardService.ts","redux/stats/stats.ts","redux/stats/statsActions.ts","routes.ts","pages/HomePage/HomePage.tsx","pages/SearchResultPage/SearchResultPage.tsx","pages/AccountPage/AccountPage.tsx","pages/DataRequestDetailPage/DataRequestDetailPage.tsx","pages/DataRequestsPage/DataRequestsPage.tsx","pages/ConfigPage/ConfigPage.tsx","redux/oracleConfig/oracleConfigActions.ts","redux/reducers.ts","redux/store.ts","index.tsx","containers/CallDataInfoCard/CallDataInfoCard.module.scss","containers/AccountStakesInfoCard/AccountStakesInfoCard.module.scss","containers/StakeDialog/StakeDialog.module.scss","containers/DataRequestsOverview/DataRequestsOverview.module.scss"],"names":["module","exports","Card","props","className","classnames","s","card","TabBar","items","onTabClick","activeId","variant","tabClassName","Tabs","classes","indicator","root","value","filter","tab","show","map","Tab","onClick","label","id","InfoToolTip","text","Tooltip","title","arrow","infoTooltipWrapper","LabeledText","info","children","tooltip","InformationRows","rows","row","item","trans","key","attributes","uppercaseFirstLetter","result","translations","resultWithAttributes","options","replace","word","undefined","replaceAttributes","charAt","toUpperCase","substring","booleanToYesNo","bool","formatToken","amount","decimals","dp","denominator","Big","pow","div","round","toFixed","toToken","mul","AccountDetailsInfoCard","account","appConfig","accountInfo","CardContent","titleWrapper","balance","stakeTokenDecimals","stakeTokenSymbol","totalStaked","totalClaimed","totalDisputes","timesSlashed","totalSlashed","nativeToken","nativeTokenSymbol","storageUsed","nativeTokenDecimals","storageAvailable","AccountDetailsInfoCardConnector","accountDetail","useSelector","store","appconfig","FakeLinkButton","button","SearchInput","onChange","handleChange","useCallback","event","currentTarget","TextField","type","InputProps","endAdornment","InputAdornment","position","SearchForm","onSearch","inputClassName","useState","query","setQuery","handleSearchSubmit","preventDefault","onSubmit","v","hidden","cacheStorage","Map","creationPromises","cache","createCallback","ttl","a","get","onGoingRequest","createRequest","set","createdItem","setTimeout","delete","OutcomeType","API_URL","process","COINGECKO_API_URL","DEFAULT_PAGINATION_LIMIT","NEAR_NETWORK","NEAR_NULL_CONTRACT","NEAR_ORACLE_CONTRACT_ID","NEAR_MAX_GAS","transformToOutcome","outcome","Invalid","parsedOutcome","JSON","parse","Answer","answer","String","number","Number","multiplier","negative","toString","transfromOutcomeToString","isSameOutcome","b","stringify","PE","batchSendTransactions","walletConnection","txs","callbackUrl","accountId","getAccountId","_near","connection","signer","getPublicKey","networkId","localKey","provider","block","finality","blockHash","utils","serialize","base_decode","header","hash","Promise","all","index","receiverId","transactionOptions","actions","tx","transactions","functionCall","methodName","args","BN","gas","accessKeyForTransaction","accessKey","Error","publicKey","PublicKey","from","public_key","nonce","access_key","createTransaction","resultTxs","requestSignTransactions","getLatestOracleConfig","viewFunction","getTokenBalance","config","stake_token","account_id","createNearOutcome","dataRequest","data_type","isNegative","lt","number_multiplier","createNetworkConfig","connectConfig","nodeUrl","walletUrl","customNodeUrl","contractName","customWalletUrl","initialBalance","connectedNear","connectNear","nearInstance","networkConfig","connect","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","connectWallet","near","WalletConnection","getMinimumStorage","contractId","minimumBalance","min","console","error","getStorageBalance","storage","total","available","createStorageTransaction","extraStorage","minimumStorageRequired","storageBalance","storageRequired","add","sub","providerInitPromise","NearProvider","requestSignIn","signOut","wallet","isSignedIn","this","storageInfo","storageTotal","used","stakeOutcome","getLoggedInAccountId","loggedInAccount","storageTransaction","push","stakeToken","receiver_id","msg","request_id","resolution_round","oracleTransaction","unbondedStakes","loggedInAccountStakes","stake","bonded","totalStake","gt","halfGas","length","dataRequestId","some","finalized_outcome","getTokenInfo","payment_token","bondToken","symbol","bondTokenDecimals","bondTokenSymbol","providers","p","init","getProviderById","find","getLoggedInProvider","isLoggedIn","loginWithProvider","providerId","login","logoutWithProvider","logout","getAccountInfoWithProvider","getAccountInfo","getLoggedInAccount","loggedInAccountId","getAppConfigForProvider","getAppConfig","stakeWithProvider","finalizeWithProvider","finalize","claimWithProvider","claim","unstakeWithProvider","unstake","getProviderStorageBalance","token","name","prettyFormatDate","date","format","nsToMs","nanoSeconds","formatTimeToReadable","unit","Math","floor","m","h","days","hours","minutes","seconds","parseJson","str","e","transformToClaimViewModel","data","payout","userCorrectStake","user_correct_stake","transformToOracleConfig","blockHeight","block_height","Date","defaultChallengeWindowDuration","default_challenge_window_duration","finalArbitrator","final_arbitrator","finalArbitratorInvokeAmount","final_arbitrator_invoke_amount","gov","maxOutcomes","max_outcomes","minInitialChallengeWindowDuration","min_initial_challenge_window_duration","resolutionFeePercentage","resolution_fee_percentage","fee","validityBond","validity_bond","fluxMarketCap","flux_market_cap","totalValueStaked","total_value_staked","DataRequestType","transformToUserStakesViewModel","userStake","resolutionWindows","stakedResolutionWindow","stakedOutcome","bondedOutcome","data_request_id","total_stake","transformToUserStakes","userStakes","currentOutcomeStakes","data_request","finalStakeToken","finalizedOutcome","claimPayout","transformToResolutionWindow","bonded_outcome","outcomeStakes","outcome_stakes","os","outcomeStake","highestOutcomeStake","bond_size","end_time","eq","user_stakes","bondSize","endTime","filled","winningOutcomeStake","transformToDataRequestListItem","requestor","requestor_account_id","sources","Api","Arbitrator","transformToDataRequestViewModel","resolution_windows","rw","reduce","prev","curr","parsedDataType","settlement_time","description","endPoint","end_point","sourcePath","source_path","outcomes","final_arbitrator_triggered","tags","total_correct_bonded_staked","total_incorrect_staked","paid_fee","account_stakes","ac","settlementTime","finalArbitratorTriggered","totalCorrectStaked","totalIncorrectStaked","paidFee","loggedInAccountClaim","InMemoryCache","link","createHttpLink","uri","graphqlClient","ApolloClient","defaultOptions","watchQuery","fetchPolicy","getAllDataRequests","limit","offset","onlyArbitratorRequests","gql","variables","response","paginatedDataRequests","dataRequests","dr","getDataRequestById","doesDataRequestExists","request","search","isNaN","url","routePaths","dataRequestDetail","SearchConnector","history","useHistory","handleSearch","Button","disabled","Dialog","open","isInfoDialog","onRequestClose","onSubmitClick","canSubmit","hideButtons","paperClassName","paper","DialogTitle","DialogContent","content","DialogActions","cancelButton","confirmButton","Input","input","helperText","NumberInput","showMax","onMaxClick","StorageManagerDialog","amountFormatted","formValues","setFormValues","errors","amountToWithdraw","lte","validateStorageManagerFormValues","handleMaxClick","formItem","formInput","dialogsSlice","createSlice","initialState","stakeDialog","unstakeDialog","storageManager","reducers","setStakeDialogOpen","state","action","payload","setUnstakeDialogOpen","setStorageManagerDialogOpen","StorageManagerDialogConnector","dialogs","dispatch","useDispatch","handleRequestClose","handleSumbit","withdrawStorage","Menu","onLoginClick","onLogoutClick","onStorageManagerClick","menuAnchorEl","setMenuAnchorEl","handleMenuClose","menu","topBar","to","logoWrapper","logo","bottomBar","menuItems","routes","route","inNavigation","menuItem","menuLink","activeClassName","exact","navPath","rightMenu","accountLinks","moreMenu","IconButton","iconButton","anchorEl","keepMounted","Boolean","onClose","mobileOnly","transformToWhitelistItemViewModel","customFee","parsedCustomFee","custom_fee","Fixed","Multiplier","active","codeBaseUrl","code_base_url","interfaceName","interface_name","storageBalanceRequest","activeStaking","active_staking","total_staked","total_claimed","total_disputes","whitelistItem","whitelist_item","hasRequests","has_requests","hasStakes","has_stakes","times_slashed","total_amount_slashed","Period","DateMetric","getEndDateInfoForPeriod","period","now","chosenPeriodDate","metric","month","OneDay","subDays","hour","OneWeek","subWeeks","day","ThreeWeeks","OneMonth","subMonths","OneYear","subYears","All","getAccountAnalytics","beginTimestamp","getTime","points","getRequestorInvalidRequestsAnalytics","combineOutcomeStakes","forEach","internalId","currentItem","Array","values","getUserStakesByRequestIdAndAccountId","requestId","stakes","getUserStakesByRequestId","getUserStakesByAccountId","filters","getUnclaimedStakesByAccountId","loading","payoutAnalytics","invalidRequestsAnalytics","accountStakes","accountStakesTotal","accountRequests","accountRequestsTotal","unclaimedStakes","accountSlice","setAccountErrors","setAccountLoading","setAccount","setAccountDetail","setAccountStakes","setAccountStakesTotal","setAccountInfo","setAccountUnclaimedStakes","setAccountRequests","setAccountRequestsTotal","setAccountPayoutAnalyticsLoading","setAccountPayoutAnalyticsData","setRequestorInvalidAnalyticsLoading","setRequestorInvalidAnalyticsData","loadAccountStakes","page","loadAccountRequests","requests","appConfigSlice","setAppConfigLoading","setAppConfig","MenuConnector","handleLoginClick","handleLogoutClick","handleStorageManagerClick","useEffect","Footer","footer","footerWrapper","Page","hasNavigation","body","Pagination","onChangePage","rowsPerPage","pagination","aria-label","currentPage","totalPages","OutcomeStakesOverview","onRequestPageChange","totalItems","showPagination","TableContainer","container","component","Paper","Table","table","TableHead","tableHead","TableRow","TableCell","TableBody","linkCell","empty","ceil","AccountOutcomeStakesConnector","params","useParams","setPage","handleRequestPageChange","newPage","AccountStakesPage","DataRequestsOverview","noRequests","AccountRequestsConnector","dataRequestsTotal","AccountRequestsPage","AccountUnclaimedStakesConnector","AccountUnclaimedPage","ExternalLink","href","window","WhitelistInfoCard","whitelist","WhitelistInfoCardConnector","ToggleButtons","exclusive","selectedClassName","buttonClassName","ToggleButtonGroup","_","selected","createChartDatasets","chartItems","chartItem","borderColor","lineColor","backgroundColor","pointBorderWidth","fill","LineChart","labels","onPeriodChange","canvas","useRef","chart","current","datasets","Chart","defaults","plugins","callbacks","context","dataset","afterTextLabel","datasetIndex","afterText","parsed","y","update","updateLineChart","getContext","mode","intersect","chartConfig","responsive","animation","duration","generateLineChart","handlePeriodChange","ref","AccountAnalyticsConnector","setPeriod","payoutPoints","loadAccountAnalytics","newPeriod","point","AccountAnalyticsPage","RequestorAnalyticsConnector","dataPoints","loadRequestorInvalidAnalytics","AccountRequestorAnalyticsPage","OracleConfigInfoCard","num","oracleConfig","OracleConfigInfoCardConnector","detail","getOracleConfigById","oracleConfigSlice","setOracleConfigDetail","setOracleConfigLoading","EmptyDiv","AccountStakesInfoCard","finalizedRound","tokenSymbol","stakeInfo","noStakes","AccountStakesInfoCardConnector","CallDataInfoCard","tableHeadRow","source","tableItem","tableItemInner","possibleOutcomes","CallDataInfoConnector","Countdown","onComplete","DataRequestDetailHeader","onStakeClick","onClaimClick","onUnstakeClick","onFinalizeClick","canInteract","setInteract","isFinalized","canFinalize","currentResolutionWindow","canDataRequestBeFinalized","hasClaimed","canUnstake","onCountdownComplete","dataRequestsSlice","detailLoading","totalDataRequests","dataRequestFilters","setDataRequestsErrors","setDataRequestsLoading","setDataRequestDetailLoading","setDataRequests","setDataRequestDetail","setTotalDataRequest","setDataRequestAccountStakes","setDataRequestFilters","loadDataRequests","getState","loadDataRequestById","accountStakesRequest","accountOutcomeStakes","DataRequestDetailHeaderConnector","handleStakeClick","handleUnstakeClick","handleFinalizeClick","finalizeDataRequest","handleClaimClick","claimDataRequest","RequestInfoCard","t","join","RequestInfoConnector","OptionSwitch","labelA","labelB","Switch","thumb","track","switchBase","checked","Select","InputLabel","labelId","select","target","MenuItem","StakeDialog","isInvalid","createDefaultStakeFormValues","handleAnswerChange","message","accountBalance","includes","currentRound","previousRound","validateStakeFormValues","form","StakeDialogConnector","handleSubmit","stakeFormValues","stakeDataRequest","StakerReport","stakerReport","Object","keys","outcomeInfo","OutcomeStakeInfo","tableComponent","ResolutionWindowAccordion","resolutionWindow","defaultExpanded","isWindowClosed","setWindowClosed","percentageFilled","Accordion","accordion","AccordionSummary","expandIcon","roundTitle","AccordionDetails","details","ResolutionWindowInfoCard","slice","reverse","noWindows","ResolutionWindowsInfoConnector","UnstakeDialog","selectedStakedOutcome","stakeIndex","validateUnstakeFormValues","outcomeIndex","selectedOutcomeStake","UnstakeDialogConnector","unstakeDataRequest","DataRequestsOverviewConnector","pathname","location","Checkbox","FormControlLabel","control","DataRequestsOverviewFilters","totalRequests","onFilterChange","wrapper","subtitle","DataRequestsOverviewFiltersConnector","urlParams","URLSearchParams","append","HomeDataRequestsConnector","latestRequests","stats","HomeHeader","searchInput","HomeHeaderConnector","StatCard","statLabel","statValue","OracleStats","tokenMarketCap","tokenPrice","marketCapFormatted","millify","OracleStatsConnector","getTokenMarketInfoByTicker","ticker","currency","fetch","json","price","market_data","current_price","marketCap","market_cap","statsSlice","setTotalRequestsStat","setTokenPriceStat","setTokenMarketCapStat","setLatestRequestsStat","loadStats","then","accountUnclaimed","accountAnalytics","accountRequestorAnalytics","useInterval","path","useLocation","accountDetailInfo","tabBar","lastCard","combineReducers","createEnhancer","REACT_APP_APP_ENV","composeWithDevTools","applyMiddleware","thunk","preloadedState","enhancer","createStore","configureStore","initProviders","ReactDOM","render","basename","hashType","StylesProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.797d99f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"Dialog_paper__XrzDE\",\"title\":\"Dialog_title__2o5jO\",\"content\":\"Dialog_content__2Ebv9\",\"cancelButton\":\"Dialog_cancelButton__3SRaV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"OutcomeStakesOverview_container__d2gou\",\"tableHead\":\"OutcomeStakesOverview_tableHead__2uKGi\",\"linkCell\":\"OutcomeStakesOverview_linkCell__1JQo4\",\"pagination\":\"OutcomeStakesOverview_pagination__9qflK\",\"empty\":\"OutcomeStakesOverview_empty__2dWxV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"DataRequestDetailHeader_header__22oVK\",\"button\":\"DataRequestDetailHeader_button__zUMJ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"OptionSwitch_root__URwjr\",\"options\":\"OptionSwitch_options__3MHNp\",\"thumb\":\"OptionSwitch_thumb__2cImY\",\"track\":\"OptionSwitch_track__2IbZB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"StakerReport_container__1KMDE\",\"link\":\"StakerReport_link__28dEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"RequestInfoCard_titleWrapper__3noPW\",\"title\":\"RequestInfoCard_title__3_LHr\",\"requestDetails\":\"RequestInfoCard_requestDetails__1YEfP\",\"item\":\"RequestInfoCard_item__10SUD\",\"link\":\"RequestInfoCard_link__1uLuv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"UnstakeDialog_form__C2-VH\",\"formItem\":\"UnstakeDialog_formItem__3mtQ-\",\"formInput\":\"UnstakeDialog_formInput__3LoeJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"DataRequestDetailPage_card__3etft\",\"lastCard\":\"DataRequestDetailPage_lastCard__1-jEK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TabBar_root__2tnOA\",\"tab\":\"TabBar_tab__t4I0-\",\"indicator\":\"TabBar_indicator__2rgIT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"LabeledText_root___tErh\",\"label\":\"LabeledText_label__3rjG2\",\"tooltip\":\"LabeledText_tooltip__1GkBn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"AccountDetailsInfoCard_titleWrapper__13sTy\",\"card\":\"AccountDetailsInfoCard_card__15fyo\",\"title\":\"AccountDetailsInfoCard_title__1q59t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__30IoI\",\"footerWrapper\":\"Footer_footerWrapper__2JRgQ\",\"logo\":\"Footer_logo__1GRAA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabBar\":\"AccountPage_tabBar__nyIhL\",\"card\":\"AccountPage_card__21C88\",\"title\":\"AccountPage_title__21f5o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"WhitelistInfoCard_titleWrapper__aGhS9\",\"card\":\"WhitelistInfoCard_card__3P3YS\",\"title\":\"WhitelistInfoCard_title__38y1w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"OracleConfigInfoCard_titleWrapper__1ddeR\",\"title\":\"OracleConfigInfoCard_title__3mNUJ\",\"card\":\"OracleConfigInfoCard_card__ut_iI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"ResolutionWindowInfoCard_titleWrapper__1xIda\",\"title\":\"ResolutionWindowInfoCard_title__14x7-\",\"noWindows\":\"ResolutionWindowInfoCard_noWindows__2uZTP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"OutcomeStakeInfo_container__1nmxk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accordion\":\"ResolutionWindowAccordion_accordion__XN6Ij\",\"roundTitle\":\"ResolutionWindowAccordion_roundTitle__1OvP0\",\"details\":\"ResolutionWindowAccordion_details__9JJHE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HomeHeader_title__3isjk\",\"search\":\"HomeHeader_search__2w-zi\",\"searchInput\":\"HomeHeader_searchInput__39vB0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"StatCard_card__1M2jM\",\"statLabel\":\"StatCard_statLabel__N14eN\",\"statValue\":\"StatCard_statValue__F5gOf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"InformationRows_root__1CR4v\",\"item\":\"InformationRows_item__1QOpX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"StorageManagerDialog_form__2SPdU\",\"formItem\":\"StorageManagerDialog_formItem__1Ps1x\",\"formInput\":\"StorageManagerDialog_formInput__12vWX\",\"error\":\"StorageManagerDialog_error__3REyq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Page_page__1vav1\",\"body\":\"Page_body__34Ach\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ToggleButtons_button__3I0Ud\",\"selected\":\"ToggleButtons_selected__DQend\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subtitle\":\"DataRequestsOverviewFilters_subtitle__3ViXR\",\"wrapper\":\"DataRequestsOverviewFilters_wrapper__2lMdn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__35wN0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoTooltipWrapper\":\"InfoToolTip_infoTooltipWrapper__tIv_o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FakeLinkButton_button__3y9OQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Lf63\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__CcIoD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"ExternalLink_link__1Kew6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"Select_select__JK0vz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checked\":\"Checkbox_checked__2Gh-t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"OracleStats_root__2Ae20\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"SearchResultPage_title__1YHPd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Menu_root__3JE0d\",\"menu\":\"Menu_menu__2sZJU\",\"topBar\":\"Menu_topBar__1xIMt\",\"bottomBar\":\"Menu_bottomBar__1J-Xi\",\"menuItems\":\"Menu_menuItems__1E3rU\",\"accountLinks\":\"Menu_accountLinks__3tRwW\",\"menuItem\":\"Menu_menuItem__3mHfR\",\"menuLink\":\"Menu_menuLink__2oVrc\",\"menuLink--active\":\"Menu_menuLink--active__3XNkb\",\"link\":\"Menu_link__1lvRI\",\"logoWrapper\":\"Menu_logoWrapper__3tZ4v\",\"logo\":\"Menu_logo__2SxFW\",\"rightMenu\":\"Menu_rightMenu__GMj4U\",\"moreMenu\":\"Menu_moreMenu__1jmd5\",\"mobileOnly\":\"Menu_mobileOnly__Yj8kA\"};","import React from 'react';\nimport classnames from 'classnames';\nimport { CardProps, default as MuiCard } from '@material-ui/core/Card';\n\nimport s from './Card.module.scss';\n\nexport default function Card(props: CardProps) {\n    return (\n        <MuiCard {...props} className={classnames(s.card, props.className)} />\n    );\n}\n","import React, { ReactElement } from 'react';\nimport classnames from 'classnames';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport s from './TabBar.module.scss';\n\nexport interface TabBarItem {\n    id: string;\n    label: string;\n    show: boolean;\n}\n\ninterface Props {\n    items: TabBarItem[];\n    activeId: string;\n    onTabClick: (item: TabBarItem) => void;\n    className?: string;\n    tabClassName?: string;\n    variant?: 'standard' | 'scrollable' | 'fullWidth';\n}\n\nexport default function TabBar({\n    items,\n    onTabClick,\n    activeId,\n    variant = 'standard',\n    tabClassName = '',\n    className = '',\n}: Props): ReactElement {\n    return (\n        <Tabs\n            classes={{ indicator: s.indicator }}\n            className={classnames(s.root, className)}\n            variant={variant}\n            value={activeId}\n        >\n            {items.filter(tab => tab.show).map(tab => (\n                <Tab\n                    key={tab.id}\n                    onClick={() => onTabClick(tab)}\n                    className={classnames(s.tab, tabClassName)}\n                    label={tab.label}\n                    value={tab.id}\n                />\n            ))}\n        </Tabs>\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport InfoIcon from '@material-ui/icons/Info';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport s from './InfoToolTip.module.scss';\n\ninterface Props {\n    text: string;\n    className?: string;\n}\n\nexport default function InfoToolTip({\n    text,\n    className = '',\n}: Props) {\n    return (\n        <Tooltip title={text} arrow>\n            <div className={classnames(className, s.infoTooltipWrapper)}>\n                <InfoIcon />\n            </div>\n        </Tooltip>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nimport s from './LabeledText.module.scss';\nimport InfoToolTip from '../../components/InfoToolTip';\n\ninterface Props {\n    label: string;\n    info?: string;\n    className?: string;\n}\n\nexport default function LabeledText({\n    label,\n    info = '',\n    children,\n    className,\n}: PropsWithChildren<Props>) {\n    return (\n        <div className={classnames(s.root, className)}>\n            <span className={s.label}>\n                {label}\n                {info && <InfoToolTip className={s.tooltip} text={info} />}\n            </span>\n            <span>{children}</span>\n        </div>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport LabeledText from '../../compositions/LabeledText';\n\nimport s from './InformationRows.module.scss';\n\nexport interface InformationRow {\n    label: string;\n    value: ReactElement;\n    info?: string;\n}\n\ninterface Props {\n    rows: InformationRow[];\n}\n\nexport default function InformationRows({\n    rows,\n}: Props) {\n    return (\n        <div className={s.root}>\n            {rows.map((row) => {\n                return (\n                    <LabeledText key={row.label} className={s.item} label={row.label} info={row.info}>\n                        {row.value}\n                    </LabeledText>\n                );\n            })}\n        </div>\n    );\n}\n","import translations from './lang/translations.eng.json';\n\ninterface Attributes {\n    [key: string]: string;\n}\n\nfunction replaceAttributes(label: string, options: Attributes = {}): string {\n    // Replaces any \":key\" with a value in the options\n    return label.replace(/:(\\w+)/gi, (word) => {\n        const key = word.replace(/^:/, '');\n\n        if (options[key] === undefined || options[key] === null) {\n            return '';\n        }\n\n        return options[key];\n    });\n}\n\nexport function ucFirstLetter(text: string): string {\n    return text.charAt(0).toUpperCase() + text.substring(1);\n}\n\n\nexport default function trans(key: string, attributes?: Attributes, uppercaseFirstLetter?: boolean): string {\n    // @ts-ignore\n    const result: string = translations[key];\n\n    if (!result) {\n        return key;\n    }\n\n    const resultWithAttributes = replaceAttributes(result, attributes);\n    return uppercaseFirstLetter ? ucFirstLetter(resultWithAttributes) : resultWithAttributes;\n}\n\nexport function booleanToYesNo(bool = false): string {\n    return bool ? trans('global.yes') : trans('global.no');\n}\n","import Big from \"big.js\";\n\n/**\n * Converts the smalles unit to a human readable amount\n *\n * @export\n * @param {string} amount\n * @param {number} [decimals=18]\n * @param {number} [dp=2]\n * @return {string}\n */\nexport function formatToken(amount: string, decimals = 18, dp = 2): string {\n    const denominator = new Big(10).pow(decimals);\n    return new Big(amount).div(denominator).round(dp, 0).toFixed(dp);\n}\n\n/**\n * Converts the amount to the smallest unit (default 18)\n *\n * @export\n * @param {string} amount\n * @param {number} [decimals=18]\n * @return {string}\n */\nexport function toToken(amount: string, decimals = 18): string {\n    const denominator = new Big(10).pow(decimals);\n    return new Big(amount).mul(denominator).toFixed(0);\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\nimport InformationRows from '../InformationRows';\nimport trans from '../../translation/trans';\nimport { Account, AccountInfo } from '../../models/Account';\n\nimport s from './AccountDetailsInfoCard.module.scss';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { AppConfig } from '../../models/AppConfig';\n\nexport interface Props {\n    account?: Account;\n    appConfig: AppConfig;\n    accountInfo: AccountInfo;\n}\n\nexport default function AccountDetailsInfoCard({\n    account,\n    appConfig,\n    accountInfo,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('accountDetailsInfoCard.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[\n                        {\n                            label: trans('accountDetailsInfoCard.label.balance'),\n                            value: <span>{formatToken(account?.balance ?? '0', appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.totalStaked'),\n                            value: <span>{formatToken(accountInfo.totalStaked, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.totalClaimed'),\n                            value: <span>{formatToken(accountInfo.totalClaimed, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.totalDisputes'),\n                            value: <span>{accountInfo.totalDisputes}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.timesSlashed'),\n                            value: <span>{accountInfo.timesSlashed}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.totalSlashed'),\n                            value: <span>{ formatToken(accountInfo.totalSlashed, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.storageUsed'),\n                            info: trans('accountDetailsInfoCard.info.storageUsed', { nativeToken: appConfig.nativeTokenSymbol }),\n                            value: <span>{formatToken(accountInfo.storageUsed, appConfig.nativeTokenDecimals, 4)} {appConfig.nativeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.storageUnused'),\n                            info: trans('accountDetailsInfoCard.info.storageUnused', { nativeToken: appConfig.nativeTokenSymbol }),\n                            value: <span>{formatToken(accountInfo.storageAvailable, appConfig.nativeTokenDecimals, 4)} {appConfig.nativeTokenSymbol}</span>,\n                        },\n                    ]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport AccountDetailsInfoCard from '../../containers/AccountDetailsInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\nexport default function AccountDetailsInfoCardConnector() {\n    const accountDetail = useSelector((store: Reducers) => store.account.accountDetail);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    return (\n        <AccountDetailsInfoCard\n            account={accountDetail.account}\n            accountInfo={accountDetail.info}\n            appConfig={appConfig}\n        />\n    );\n}\n","import React, { FormEvent, PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nimport s from './FakeLinkButton.module.scss';\n\ninterface Props {\n    className?: string;\n    onClick?: (event: FormEvent) => void;\n}\n\nexport default function FakeLinkButton({\n    children,\n    className,\n    onClick,\n}: PropsWithChildren<Props>) {\n    return (\n        <button onClick={onClick} className={classnames(s.button, className)}>\n            {children}\n        </button>\n    );\n}\n","import React, { FormEvent, useCallback } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SearchIcon from '@material-ui/icons/Search';\n\ninterface Props {\n    label: string;\n    value?: string;\n    className?: string;\n    onChange?: (value: string) => void;\n}\n\nexport default function SearchInput({\n    label,\n    className,\n    value,\n    onChange = () => {},\n}: Props) {\n    const handleChange = useCallback((event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        onChange(event.currentTarget.value);\n    }, [onChange]);\n\n    return (\n        <TextField\n            label={label}\n            className={className}\n            value={value}\n            type=\"search\"\n            onChange={handleChange}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"start\">\n                        <SearchIcon />\n                    </InputAdornment>\n                ),\n            }}\n        />\n    );\n}\n","import React, { FormEvent, useCallback, useState } from 'react';\nimport SearchInput from '../../components/SearchInput';\nimport trans from '../../translation/trans';\n\ninterface Props {\n    onSearch: (query: string) => void;\n    className?: string;\n    inputClassName?: string;\n}\n\nexport default function SearchForm({\n    onSearch,\n    className,\n    inputClassName,\n}: Props) {\n    const [query, setQuery] = useState('');\n    const handleSearchSubmit = useCallback((event: FormEvent) => {\n        event.preventDefault();\n        onSearch(query);\n    }, [query, onSearch]);\n\n    return (\n        <form className={className} onSubmit={handleSearchSubmit}>\n            <SearchInput\n                label={trans('menu.label.search')}\n                onChange={v => setQuery(v)}\n                value={query}\n                className={inputClassName}\n            />\n            <input type=\"submit\" hidden />\n        </form>\n    );\n}\n","const cacheStorage = new Map<string, any>();\nconst creationPromises = new Map<string, Promise<any>>();\n\n/**\n * Caches an item by it's id and returns it if it's requested again.\n * If it does not exist it asks you to create the item\n *\n * @export\n * @template T\n * @param {string} id\n * @param {() => Promise<T>} createCallback\n * @return {Promise<T>}\n */\nexport default async function cache<T>(id: string, createCallback: () => Promise<T>, ttl?: number): Promise<T> {\n    const item = cacheStorage.get(id);\n    if (item) return item;\n\n    // No need to create another item when the request is already going\n    // Instead we just redirect the promise back to this call\n    // Caching will be handled by the iniator\n    const onGoingRequest = creationPromises.get(id);\n    if (onGoingRequest) return onGoingRequest;\n\n    // Keep track of all ongoing promises\n    const createRequest = createCallback();\n    creationPromises.set(id, createRequest);\n\n    try {\n        const createdItem = await createRequest;\n        cacheStorage.set(id, createdItem);\n\n        if (ttl) {\n            setTimeout(() => {\n                cacheStorage.delete(id);\n            }, ttl);\n        }\n\n        return createdItem;\n    } catch (error) {\n        throw error;\n    } finally {\n        creationPromises.delete(id);\n    }\n}\n","import Big from \"big.js\";\nimport trans from \"../translation/trans\";\n\nexport enum OutcomeType {\n    Answer,\n    Invalid\n}\n\nexport interface OutcomeAnswer {\n    answer: string;\n    type: OutcomeType.Answer;\n}\n\nexport interface OutcomeInvalid {\n    type: OutcomeType.Invalid;\n}\n\nexport type Outcome = OutcomeAnswer | OutcomeInvalid;\n\n\nexport interface OutcomeNumber {\n    Number: {\n        value: string;\n        multiplier: string;\n        negative: boolean;\n    }\n}\n\nexport interface OutcomeString {\n    String: string;\n}\n\nexport interface ParsedOutcome {\n    Answer: OutcomeNumber | OutcomeString;\n}\n\nexport function transformToOutcome(outcome: string): Outcome {\n    if (outcome === 'Invalid') {\n        return {\n            type: OutcomeType.Invalid,\n        }\n    }\n\n    const parsedOutcome: ParsedOutcome = JSON.parse(outcome);\n\n    if ('String' in parsedOutcome.Answer) {\n        return {\n            answer: parsedOutcome.Answer.String,\n            type: OutcomeType.Answer,\n        };\n    }\n\n    const number = new Big(parsedOutcome.Answer.Number.value).div(parsedOutcome.Answer.Number.multiplier);\n\n    if (parsedOutcome.Answer.Number.negative) {\n        number.s = -1;\n    }\n\n    return {\n        answer: number.toString(),\n        type: OutcomeType.Answer,\n    };\n}\n\nexport function transfromOutcomeToString(outcome: Outcome): string {\n    if (outcome.type === OutcomeType.Invalid) {\n        return trans('outcome.invalid');\n    }\n\n    return `\"${outcome.answer}\"`;\n}\n\nexport function isSameOutcome(a?: Outcome, b?: Outcome): boolean {\n    if (typeof a === 'undefined' || typeof b === 'undefined') {\n        return false;\n    }\n\n    if (a.type === OutcomeType.Invalid && b.type === OutcomeType.Invalid) {\n        return true;\n    }\n\n    return JSON.stringify(a) === JSON.stringify(b);\n}\n","import Big from 'big.js';\n\nexport const API_URL = process.env.REACT_APP_API_URL ?? '';\nexport const COINGECKO_API_URL = process.env.REACT_APP_COINGECKO_API_URL || '';\nexport const DEFAULT_PAGINATION_LIMIT = 10;\nexport const COINGECKO_TOKEN_TICKER = 'near';\n\nexport const NEAR_NETWORK = process.env.REACT_APP_NEAR_NETWORK as any ?? 'testnet';\nexport const NEAR_NULL_CONTRACT = process.env.REACT_APP_NEAR_NULL_CONTRACT ?? 'null_address.near';\nexport const NEAR_ORACLE_CONTRACT_ID = process.env.REACT_APP_NEAR_ORACLE_CONTRACT_ID ?? 'oracle.flux-dev'\nexport const NEAR_MAX_GAS = '250000000000000';\nexport const STORAGE_BASE = '30000000000000000000000';\nexport const HOME_REFRESH_INTERVAL = 2000;\nexport const REQUEST_DETAIL_REFRESH_INTERVAL = 5000;\nexport const REQUEST_LIST_REFRESH_INTERVAL = 5000;\n\nBig.PE = 1000000;\n","import { WalletConnection, utils, transactions } from \"near-api-js\";\nimport BN from 'bn.js';\nimport { NEAR_ORACLE_CONTRACT_ID } from \"../../../config\";\nimport { Outcome, OutcomeType } from \"../../../models/DataRequestOutcome\";\nimport { DataRequestViewModel } from \"../../../models/DataRequest\";\nimport Big from \"big.js\";\nimport { OracleConfigGraphData } from \"../../../models/OracleConfig\";\nimport cache from \"../../../utils/cache\";\n\nexport interface TransactionViewOptions {\n    methodName: string;\n    args?: object;\n}\n\nexport interface TransactionCallOptions extends TransactionViewOptions {\n    gas: string;\n    amount: string;\n}\n\nexport interface TransactionOption {\n    receiverId: string;\n    transactionOptions: TransactionCallOptions[];\n}\n\nexport async function batchSendTransactions(walletConnection: WalletConnection, txs: TransactionOption[], callbackUrl?: string) {\n    const accountId = walletConnection.getAccountId();\n    const localKey = await walletConnection._near.connection.signer.getPublicKey(accountId, walletConnection._near.connection.networkId);\n    const block = await walletConnection._near.connection.provider.block({ finality: 'final' });\n    const blockHash = utils.serialize.base_decode(block.header.hash);\n\n    const resultTxs = await Promise.all(txs.map(async ({ receiverId, transactionOptions }, index) => {\n        const actions = transactionOptions.map(tx => transactions.functionCall(tx.methodName, tx.args ?? {}, new BN(tx.gas), new BN(tx.amount)));\n        const accessKey = await walletConnection.account().accessKeyForTransaction(receiverId, actions, localKey);\n\n        if (!accessKey) {\n            throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);\n        }\n\n        const publicKey = utils.PublicKey.from(accessKey.public_key);\n        const nonce = accessKey.access_key.nonce + index + 1;\n\n        return transactions.createTransaction(accountId, publicKey, receiverId, nonce, actions, blockHash);\n    }));\n\n    return walletConnection.requestSignTransactions(resultTxs, callbackUrl);\n}\n\nexport async function getLatestOracleConfig(walletConnection: WalletConnection): Promise<OracleConfigGraphData> {\n    const account = walletConnection.account();\n\n    return cache('near_latest_oracle_config', async () => {\n        return account.viewFunction(NEAR_ORACLE_CONTRACT_ID, 'get_config', {});\n    });\n}\n\nexport async function getTokenBalance(walletConnection: WalletConnection, accountId: string): Promise<string> {\n    const account = walletConnection.account();\n    const config = await getLatestOracleConfig(walletConnection);\n\n    return account.viewFunction(config.stake_token, 'ft_balance_of', {\n        account_id: accountId,\n    });\n}\n\nexport function createNearOutcome(dataRequest: DataRequestViewModel, outcome: Outcome): any {\n    if (outcome.type === OutcomeType.Invalid) {\n        return 'Invalid';\n    }\n\n    if (dataRequest.data_type === 'String') {\n        return {\n            'Answer': {\n                'String': outcome.answer,\n            }\n        }\n    }\n\n    let number = new Big(outcome.answer);\n    const isNegative = number.lt(0);\n\n    number = number.mul(dataRequest.number_multiplier!);\n\n    // Convert back to positive to store inside a u128\n    if (isNegative) {\n        number = number.mul(-1);\n    }\n\n    return {\n        'Answer': {\n            'Number': {\n                value: number.toFixed(0),\n                negative: isNegative,\n                multiplier: dataRequest.number_multiplier,\n            }\n        }\n    }\n}\n","import { connect, Near, WalletConnection, keyStores } from \"near-api-js\";\nimport { NEAR_NETWORK, NEAR_NULL_CONTRACT } from \"../../../config\";\n\nexport interface ConnectConfig {\n    accountId?: string;\n    nearInstance?: Near;\n    walletInstance?: WalletConnection;\n    customNodeUrl?: string;\n    customWalletUrl?: string;\n}\n\nexport interface NetworkConfig {\n    networkId: string,\n    nodeUrl: string,\n    contractName?: null,\n    walletUrl?: string,\n    initialBalance?: string\n}\n\nexport function createNetworkConfig(connectConfig: ConnectConfig): NetworkConfig {\n    if (NEAR_NETWORK === 'mainnet') {\n        return {\n            networkId: 'mainnet',\n            nodeUrl: 'https://rpc.mainnet.near.org',\n            walletUrl: 'https://wallet.near.org',\n        };\n    }\n\n    return {\n        networkId: 'testnet',\n        nodeUrl: connectConfig.customNodeUrl || 'https://rpc.testnet.near.org',\n        contractName: null,\n        walletUrl: connectConfig.customWalletUrl || 'https://wallet.testnet.near.org',\n        initialBalance: '100000000',\n    };\n}\n\nlet connectedNear: Near | undefined = undefined;\n\n/**\n * Connects with NEAR\n *\n * @export\n * @param {ConnectConfig} connectConfig\n * @param {SdkConfig} sdkConfig\n * @return {Promise<Near>}\n */\nexport async function connectNear(connectConfig: ConnectConfig): Promise<Near> {\n    if (connectConfig.nearInstance) {\n        return connectConfig.nearInstance;\n    }\n\n    if (connectedNear) {\n        return connectedNear;\n    }\n\n    const networkConfig = createNetworkConfig(connectConfig);\n\n    connectedNear = await connect({\n        ...networkConfig,\n        deps: {\n            keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n        },\n    });\n\n    return connectedNear;\n}\n\nlet walletConnection: WalletConnection | undefined = undefined;\n\nexport async function connectWallet() {\n    if (walletConnection) {\n        return walletConnection;\n    }\n\n    const near = await connectNear({});\n    walletConnection = new WalletConnection(near, NEAR_NULL_CONTRACT);\n\n    return walletConnection;\n}\n","import Big from \"big.js\";\nimport { WalletConnection } from \"near-api-js\";\nimport { NEAR_MAX_GAS } from \"../../../config\";\nimport cache from \"../../../utils/cache\";\nimport { TransactionOption } from \"./NearService\";\n\n/**\n * Gets the minimum amount storage required for a oracle transaction\n *\n * @export\n * @param {WalletConnection} walletConnection\n * @return {Promise<Big>}\n */\nexport async function getMinimumStorage(contractId: string, walletConnection: WalletConnection): Promise<Big> {\n    try {\n        const result = await cache(`${contractId}_minimum_storage_balance`, async () => {\n            const account = walletConnection.account();\n            const minimumBalance = await account.viewFunction(contractId, 'storage_balance_bounds', {});\n            return Big(minimumBalance.min);\n        });\n\n        return result;\n    } catch (error) {\n        console.error('[getMinimumStorage]', error);\n        return new Big(0);\n    }\n}\n\n/**\n * Get the current storage balance of the specific account\n *\n * @export\n * @param {WalletConnection} walletConnection\n * @return {Promise<{ total: Big, available: Big }>}\n */\nexport async function getStorageBalance(contractId: string, accountId: string, walletConnection: WalletConnection): Promise<{ total: Big, available: Big }> {\n    try {\n        const account = walletConnection.account();\n        const storage = await account.viewFunction(contractId, 'storage_balance_of', {\n            account_id: accountId,\n        });\n\n        return {\n            total: storage ? new Big(storage.total) : new Big(0),\n            available: storage ? new Big(storage.available) : new Big(0),\n        };\n    } catch (error) {\n        console.error('[getStorageBalance]', error);\n        return {\n            total: new Big(0),\n            available: new Big(0),\n        };\n    }\n}\n\n/**\n * Creates a storage deposit transaction if it's required\n *\n * @export\n * @param {string} contractId\n * @param {string} accountId\n * @param {WalletConnection} walletConnection\n * @param {Big} extraStorage Can be used for calls that require way more than the minimum storage requirements\n * @return {(Promise<TransactionOption | null>)}\n */\nexport async function createStorageTransaction(contractId: string, accountId: string, walletConnection: WalletConnection, extraStorage: Big = new Big(0)): Promise<TransactionOption | null> {\n    const minimumStorageRequired = await getMinimumStorage(contractId, walletConnection);\n    const storageBalance = await getStorageBalance(contractId, accountId, walletConnection);\n    const storageRequired = minimumStorageRequired.add(extraStorage);\n\n    if (storageBalance.available.lt(storageRequired)) {\n        return {\n            receiverId: contractId,\n            transactionOptions: [{\n                amount: storageRequired.sub(storageBalance.available).toString(),\n                gas: NEAR_MAX_GAS,\n                methodName: 'storage_deposit',\n                args: {\n                    accountId,\n                }\n            }],\n        };\n    }\n\n    return null;\n}\n","import { Account } from \"../../models/Account\";\nimport { AppConfig } from \"../../models/AppConfig\";\nimport { DataRequestViewModel } from \"../../models/DataRequest\";\nimport { Outcome } from \"../../models/DataRequestOutcome\";\nimport { TokenViewModel } from \"../../models/Token\";\nimport cache from \"../../utils/cache\";\nimport { IProvider } from \"./IProvider\";\nimport NearProvider from \"./near/NearProvider\";\n\nlet providers: IProvider[] = [];\nlet providerInitPromise: Promise<boolean[]>;\n\nexport async function initProviders() {\n    if (providerInitPromise) {\n        await providerInitPromise;\n        return;\n    }\n\n    providers = [\n        new NearProvider(),\n    ];\n\n    providerInitPromise = Promise.all(providers.map(p => p.init()));\n    await providerInitPromise;\n}\n\nexport function getProviderById(id: string): IProvider | undefined {\n    return providers.find(p => p.id === id);\n}\n\nexport function getLoggedInProvider() {\n    return providers.find(p => p.isLoggedIn());\n}\n\nexport async function loginWithProvider(providerId: string) {\n    const provider = getProviderById(providerId);\n    return provider?.login() ?? false;\n}\n\nexport async function logoutWithProvider(providerId: string) {\n    const provider = getProviderById(providerId);\n    return provider?.logout() ?? false;\n}\n\nexport async function getLoggedInAccountId(): Promise<string | undefined> {\n    const provider = getLoggedInProvider();\n    return provider ? provider.getLoggedInAccountId() : undefined;\n}\n\nexport async function getAccountInfoWithProvider(providerId: string, accountId: string): Promise<Account | undefined> {\n    const provider = getProviderById(providerId);\n    const account = await provider?.getAccountInfo(accountId);\n    if (!account || !provider) return undefined;\n\n    return {\n        accountId: account.accountId,\n        balance: account.balance,\n        providerId: provider.id,\n        storageAvailable: account.storageAvailable,\n        storageTotal: account.storageTotal,\n        storageUsed: account.storageUsed,\n    };\n}\n\nexport async function getLoggedInAccount(): Promise<Account | undefined> {\n    const provider = getLoggedInProvider();\n\n    if (!provider) {\n        return undefined;\n    }\n\n    const loggedInAccountId = await provider.getLoggedInAccountId();\n\n    if (!loggedInAccountId) {\n        return undefined;\n    }\n\n    return getAccountInfoWithProvider(provider.id, loggedInAccountId);\n}\n\nexport async function getAppConfigForProvider(providerId: string): Promise<AppConfig> {\n    const provider = getProviderById(providerId);\n    const config = await provider?.getAppConfig();\n\n    return {\n        nativeTokenDecimals: config?.nativeTokenDecimals ?? 18,\n        nativeTokenSymbol: config?.nativeTokenSymbol ?? '?',\n        stakeTokenDecimals: config?.stakeTokenDecimals ?? 18,\n        stakeTokenSymbol: config?.stakeTokenSymbol ?? '?',\n        bondTokenDecimals: config?.bondTokenDecimals ?? 18,\n        bondTokenSymbol: config?.bondTokenSymbol ?? '?',\n    };\n}\n\nexport async function stakeWithProvider(providerId: string, amount: string, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.stake(amount, dataRequest, outcome) ?? false;\n}\n\nexport async function finalizeWithProvider(providerId: string, dataRequest: DataRequestViewModel): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.finalize(dataRequest) ?? false;\n}\n\nexport async function claimWithProvider(providerId: string, accountId: string, dataRequest: DataRequestViewModel): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.claim(accountId, dataRequest) ?? false;\n}\n\nexport async function unstakeWithProvider(providerId: string, amount: string, round: number, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.unstake(amount, round, dataRequest, outcome) ?? false;\n}\n\nexport async function getProviderStorageBalance(providerId: string, accountId: string): Promise<{ total: string, used: string, available: string }> {\n    const provider = getProviderById(providerId);\n    return provider?.getStorageBalance(accountId) ?? { total: '0', available: '0', used: '0' };\n}\n\nexport function withdrawStorage(providerId: string, amount: string) {\n    const provider = getProviderById(providerId);\n    provider?.withdrawStorage(amount);\n}\n\nexport async function getTokenInfo(providerId: string, contractId: string): Promise<TokenViewModel> {\n    return cache(`tokeninfo_${providerId}_${contractId}`, async () => {\n        const provider = getProviderById(providerId);\n        const token = await provider?.getTokenInfo(contractId);\n\n        return {\n            decimals: token?.decimals ?? 18,\n            name: token?.name ?? contractId,\n            symbol: token?.symbol ?? contractId,\n            contractId,\n        };\n    });\n}\n","import { IProvider } from \"../IProvider\";\nimport { NEAR_MAX_GAS, NEAR_NULL_CONTRACT, NEAR_ORACLE_CONTRACT_ID, STORAGE_BASE } from \"../../../config\";\nimport { isSameOutcome, Outcome } from \"../../../models/DataRequestOutcome\";\nimport { DataRequestViewModel } from \"../../../models/DataRequest\";\nimport Big from \"big.js\";\nimport { batchSendTransactions, createNearOutcome, getLatestOracleConfig, getTokenBalance, TransactionOption } from \"./NearService\";\nimport { connectWallet } from \"./NearConnectService\";\nimport { createStorageTransaction } from \"./StorageManagerService\";\nimport { Account } from \"../../../models/Account\";\nimport { TokenViewModel } from \"../../../models/Token\";\nimport { AppConfig } from \"../../../models/AppConfig\";\n\nexport default class NearProvider implements IProvider {\n    id = 'near';\n    nativeTokenSymbol = 'NEAR';\n    nativeTokenDecimals = 24;\n\n    async init() {\n        return true;\n    }\n\n    async login() {\n        const wallet = await connectWallet();\n        wallet.requestSignIn(NEAR_NULL_CONTRACT, 'oracle');\n        return true;\n    }\n\n    async logout() {\n        const wallet = await connectWallet();\n        wallet.signOut();\n        return true;\n    }\n\n    async isLoggedIn() {\n        const wallet = await connectWallet();\n        return wallet.isSignedIn();\n    }\n\n    async getLoggedInAccountId(): Promise<string> {\n        const wallet = await connectWallet();\n        return wallet.getAccountId();\n    }\n\n    async getAccountInfo(accountId: string): Promise<Omit<Account, 'providerId'>> {\n        try {\n            const wallet = await connectWallet();\n            const balance = await getTokenBalance(wallet, accountId);\n            const storageInfo = await this.getStorageBalance(accountId);\n\n            return {\n                accountId,\n                balance,\n                storageAvailable: storageInfo.available,\n                storageTotal: storageInfo.total,\n                storageUsed: storageInfo.used,\n            };\n        } catch (error) {\n            return {\n                accountId,\n                balance: '0',\n                storageAvailable: '0',\n                storageTotal: '0',\n                storageUsed: '0',\n            }\n        }\n    }\n\n    async stake(amount: string, dataRequest: DataRequestViewModel, outcome: Outcome) {\n        const wallet = await connectWallet();\n\n        const stakeOutcome = createNearOutcome(dataRequest, outcome);\n        const loggedInAccount = await this.getLoggedInAccountId();\n        const storageTransaction = await createStorageTransaction(NEAR_ORACLE_CONTRACT_ID, loggedInAccount, wallet);\n        const transactions: TransactionOption[] = [];\n\n        if (storageTransaction) {\n            transactions.push(storageTransaction);\n        }\n\n        transactions.push({\n            receiverId: dataRequest.config.stakeToken.contractId,\n            transactionOptions: [{\n                amount: '1',\n                gas: NEAR_MAX_GAS,\n                methodName: 'ft_transfer_call',\n                args: {\n                    receiver_id: NEAR_ORACLE_CONTRACT_ID,\n                    amount,\n                    msg: JSON.stringify({\n                        'StakeDataRequest': {\n                            id: dataRequest.id,\n                            outcome: stakeOutcome,\n                        }\n                    })\n                }\n            }],\n        });\n\n        await batchSendTransactions(wallet, transactions);\n\n        return true;\n    }\n\n    async unstake(amount: string, round: number, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n        if (!account) return false;\n\n        const stakeOutcome = createNearOutcome(dataRequest, outcome);\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'dr_unstake', {\n            request_id: dataRequest.id,\n            resolution_round: round,\n            outcome: stakeOutcome,\n            amount,\n\n            // @ts-ignore\n        }, NEAR_MAX_GAS, '1');\n\n        return true;\n    }\n\n    async finalize(dataRequest: DataRequestViewModel) {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n        if (!account) return false;\n\n        const transactions: TransactionOption[] = [];\n\n        transactions.push({\n            receiverId: NEAR_ORACLE_CONTRACT_ID,\n            transactionOptions: [{\n                amount: '0',\n                gas: NEAR_MAX_GAS,\n                methodName: 'dr_finalize',\n                args: {\n                    request_id: dataRequest.id,\n                }\n            }],\n        });\n\n        await batchSendTransactions(wallet, transactions);\n\n        return true;\n    }\n\n    async claim(accountId: string, dataRequest: DataRequestViewModel) {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n        if (!account) return false;\n\n        const oracleTransaction: TransactionOption = {\n            receiverId: NEAR_ORACLE_CONTRACT_ID,\n            transactionOptions: [],\n        };\n\n        const unbondedStakes = dataRequest.loggedInAccountStakes.filter(stake => !stake.bonded && new Big(stake.totalStake).gt(0));\n        const halfGas = new Big(NEAR_MAX_GAS).div(2).round(0, 0);\n\n        // Claim back any unbonded stake\n        if (unbondedStakes.length) {\n            oracleTransaction.transactionOptions = unbondedStakes.map(stake => {\n                const outcome = createNearOutcome(dataRequest, stake.outcome);\n\n                return {\n                    amount: '1',\n                    gas: halfGas.div(unbondedStakes.length).round(0, 0).toString(),\n                    methodName: 'dr_unstake',\n                    args: {\n                        request_id: stake.dataRequestId,\n                        resolution_round: stake.round,\n                        outcome,\n                        amount: stake.totalStake.toString(),\n                    },\n                }\n            });\n        }\n\n        // Only claim if we actually have something to claim otherwise this would just cost gas\n        const canClaim = dataRequest.loggedInAccountStakes.some(stake => isSameOutcome(stake.outcome, dataRequest.finalized_outcome));\n\n        if (canClaim) {\n            oracleTransaction.transactionOptions.push({\n                amount: STORAGE_BASE,\n                gas: halfGas.toString(),\n                methodName: 'dr_claim',\n                args: {\n                    request_id: dataRequest.id,\n                    account_id: accountId,\n                },\n            });\n        }\n\n        await batchSendTransactions(wallet, [oracleTransaction]);\n\n        return true;\n    }\n\n    async getStorageBalance(accountId: string): Promise<{ total: string, available: string, used: string }> {\n        try {\n            const wallet = await connectWallet();\n            const account = wallet.account();\n            if (!account) {\n                return {\n                    total: '0',\n                    available: '0',\n                    used: '0',\n                };\n            }\n\n            const storageBalance = await account.viewFunction(NEAR_ORACLE_CONTRACT_ID, 'storage_balance_of', {\n                account_id: accountId,\n            });\n\n            const used = new Big(storageBalance.total).sub(storageBalance.available);\n\n            return {\n                total: storageBalance.total,\n                available: storageBalance.available,\n                used: used.toString(),\n            }\n        } catch (error) {\n            console.error('[getStorageBalance -> NEAR]', error);\n            return {\n                total: '0',\n                available: '0',\n                used: '0',\n            }\n        }\n    }\n\n    async withdrawStorage(amount: string): Promise<boolean> {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'storage_withdraw', {\n            amount,\n            // @ts-ignore\n        }, NEAR_MAX_GAS, '1');\n\n        return true;\n    }\n\n    async getTokenInfo(contractId: string): Promise<TokenViewModel | undefined> {\n        try {\n            const wallet = await connectWallet();\n            const account = wallet.account();\n            const result = await account.viewFunction(contractId, 'ft_metadata', {});\n\n            return result;\n        } catch (error) {\n            console.error('[NearProvider-getTokenInfo]', error);\n            return undefined;\n        }\n    }\n\n    async getAppConfig(): Promise<AppConfig> {\n        const wallet = await connectWallet();\n        const config = await getLatestOracleConfig(wallet);\n        const stakeToken = await this.getTokenInfo(config.stake_token);\n        const bondToken = await this.getTokenInfo(config.payment_token);\n\n        return {\n            nativeTokenDecimals: this.nativeTokenDecimals,\n            nativeTokenSymbol: this.nativeTokenSymbol,\n            stakeTokenDecimals: stakeToken?.decimals ?? 18,\n            stakeTokenSymbol: stakeToken?.symbol ?? config.stake_token,\n            bondTokenDecimals: bondToken?.decimals ?? 18,\n            bondTokenSymbol: bondToken?.symbol ?? config.payment_token,\n        };\n    }\n}\n","import format from \"date-fns/format\";\n\nexport function prettyFormatDate(date: Date): string {\n    return format(date, 'MMMM d, yyyy HH:mm:ss');\n}\n\n/**\n * converts nano seconds to milliseconds\n *\n * @export\n * @param {number} nanoSeconds\n * @return {number}\n */\nexport function nsToMs(nanoSeconds: number): number {\n    return nanoSeconds / 1000000;\n}\n\n/**\n * Formats a time number to a human readable format\n *\n * @export\n * @param {number} number\n * @param {('sec' | 'ms')} unit\n */\nexport function formatTimeToReadable(number: number, unit: 'sec' | 'ms' | 'ns') {\n    let s = 0;\n\n    if (unit === 'sec') {\n        s = number\n    } else if (unit === 'ns') {\n        s = Math.floor(number / 1000000000);\n    } else {\n        s = Math.floor(number / 1000)\n    }\n\n    let m = Math.floor(s / 60)\n    s = s % 60\n    let h = Math.floor(m / 60)\n    m = m % 60\n    const d = Math.floor(h / 24)\n    h = h % 24\n\n    return { days: d, hours: h, minutes: m, seconds: s }\n}\n","/**\n * Safely parse json without throwing any errors\n *\n * @export\n * @param {string} str\n * @return {(object | null)}\n */\nexport function parseJson<T>(str: string): T | null {\n    try {\n        return JSON.parse(str);\n    } catch (e) {\n        return null;\n    }\n}\n","export interface ClaimGraphData {\n    payout: string;\n    user_correct_stake: string;\n    total_incorrect_staked: string;\n    total_correct_bonded_staked: string;\n}\n\nexport interface ClaimViewModel {\n    payout: string;\n    userCorrectStake: string;\n}\n\nexport function transformToClaimViewModel(data: ClaimGraphData): ClaimViewModel {\n    return {\n        payout: data.payout,\n        userCorrectStake: data.user_correct_stake,\n    };\n}\n","import { getTokenInfo } from \"../services/providers/ProviderRegistry\";\nimport { TokenViewModel } from \"./Token\";\n\nexport interface OracleConfig {\n    blockHeight: string;\n    date: Date;\n    defaultChallengeWindowDuration: string;\n    finalArbitrator: string;\n    finalArbitratorInvokeAmount: string;\n    gov: string;\n    id: string;\n    maxOutcomes: number;\n    minInitialChallengeWindowDuration: string;\n    resolutionFeePercentage: number;\n    validityBond: string;\n    stakeToken: TokenViewModel;\n    bondToken: TokenViewModel;\n    fluxMarketCap: string;\n    totalValueStaked: string;\n}\n\nexport interface OracleConfigGraphData {\n    block_height: string;\n    payment_token: string;\n    date: string;\n    default_challenge_window_duration: string;\n    final_arbitrator: string;\n    final_arbitrator_invoke_amount: string;\n    gov: string;\n    id: string;\n    max_outcomes: number;\n    min_initial_challenge_window_duration: string;\n    resolution_fee_percentage: number;\n    stake_token: string;\n    validity_bond: string;\n    fee: {\n        flux_market_cap: string;\n        total_value_staked: string;\n        resolution_fee_percentage: number;\n    };\n}\n\nexport async function transformToOracleConfig(data: OracleConfigGraphData): Promise<OracleConfig> {\n    const stakeToken = await getTokenInfo('near', data.stake_token);\n    const bondToken = await getTokenInfo('near', data.payment_token);\n\n    return {\n        blockHeight: data.block_height,\n        bondToken: bondToken,\n        date: new Date(Number(data.date)),\n        defaultChallengeWindowDuration: data.default_challenge_window_duration,\n        finalArbitrator: data.final_arbitrator,\n        finalArbitratorInvokeAmount: data.final_arbitrator_invoke_amount,\n        gov: data.gov,\n        id: data.id,\n        maxOutcomes: data.max_outcomes,\n        minInitialChallengeWindowDuration: data.min_initial_challenge_window_duration,\n        resolutionFeePercentage: data.resolution_fee_percentage ?? data.fee.resolution_fee_percentage,\n        stakeToken: stakeToken,\n        validityBond: data.validity_bond,\n        fluxMarketCap: data.fee.flux_market_cap,\n        totalValueStaked: data.fee.total_value_staked,\n    };\n}\n","import Big from \"big.js\";\nimport { getTokenInfo } from \"../services/providers/ProviderRegistry\";\nimport trans from \"../translation/trans\";\nimport { nsToMs } from \"../utils/dateUtils\";\nimport { parseJson } from \"../utils/jsonUtils\";\nimport { ClaimGraphData, ClaimViewModel, transformToClaimViewModel } from \"./Claim\";\nimport { Outcome, transformToOutcome } from \"./DataRequestOutcome\";\nimport { OracleConfig, OracleConfigGraphData, transformToOracleConfig } from \"./OracleConfig\";\nimport { ResolutionWindow, ResolutionWindowGraphData, transformToResolutionWindow } from \"./ResolutionWindow\";\nimport { TokenViewModel } from \"./Token\";\nimport { transformToUserStakesViewModel, UserStakeGraphData, UserStakeViewModel } from \"./UserStakes\";\n\nexport interface DataRequestSource {\n    endPoint: string;\n    sourcePath: string;\n}\n\nexport enum DataRequestType {\n    Arbitrator,\n    Api\n}\nexport interface DataRequestListItem {\n    id: string;\n    date: Date;\n    requestor: string;\n    finalized_outcome?: Outcome;\n    type: DataRequestType;\n}\n\nexport interface DataRequestViewModel extends DataRequestListItem {\n    loggedInAccountStakes: UserStakeViewModel[];\n    loggedInAccountClaim?: ClaimViewModel;\n    description?: string;\n    config: OracleConfig;\n    sources: DataRequestSource[];\n    outcomes?: string[];\n    resolutionWindows: ResolutionWindow[];\n    totalStaked: string;\n    fee: string;\n    paidFee?: string;\n    finalized_outcome?: Outcome;\n    finalArbitratorTriggered: boolean;\n    settlementTime: Date;\n    tags: string[];\n    stakeToken: TokenViewModel;\n    bondToken: TokenViewModel;\n    totalCorrectStaked?: string;\n    totalIncorrectStaked?: string;\n    number_multiplier?: string;\n    data_type: 'String' | 'Number';\n}\n\nexport interface DataRequestGraphData {\n    account_stakes: UserStakeGraphData[];\n    id: string;\n    fee: string;\n    claim: ClaimGraphData | null;\n    block_height: string;\n    description: string | null;\n    settlement_time: string;\n    date: string;\n    final_arbitrator_triggered: boolean;\n    global_config_id: string;\n    initial_challenge_period: string;\n    total_correct_bonded_staked?: string;\n    total_incorrect_staked?: string;\n    outcomes: string[];\n    requestor_account_id: string;\n    finalized_outcome: string | null;\n    tags: string[] | null;\n    paid_fee: string | null;\n    data_type: string;\n    whitelist_item: {\n        active: boolean;\n        code_base_url: string;\n        custom_fee: string;\n        interface_name: string;\n    },\n    sources: {\n        end_point: string;\n        source_path: string;\n    }[];\n    config: OracleConfigGraphData;\n    resolution_windows: ResolutionWindowGraphData[];\n}\n\ninterface NumberDataType {\n    Number: string;\n}\n\nexport function transformToDataRequestListItem(data: DataRequestGraphData): DataRequestListItem {\n    return {\n        id: data.id,\n        date: new Date(Number(data.date)),\n        requestor: data.requestor_account_id,\n        finalized_outcome: data.finalized_outcome ? transformToOutcome(data.finalized_outcome) : undefined,\n        type: data.sources.length ? DataRequestType.Api : DataRequestType.Arbitrator,\n    };\n}\n\nexport async function transformToDataRequestViewModel(data: DataRequestGraphData): Promise<DataRequestViewModel> {\n    const stakeToken = await getTokenInfo('near', data.config.stake_token);\n    const bondToken = await getTokenInfo('near', data.config.payment_token);\n\n    const resolutionWindows = await Promise.all(data.resolution_windows.map(rw => transformToResolutionWindow(rw, stakeToken)));\n    const totalStaked = resolutionWindows.reduce((prev, curr) => prev.add(curr.totalStaked), new Big(0));\n    const parsedDataType = parseJson<NumberDataType>(data.data_type);\n\n    return {\n        ...transformToDataRequestListItem(data),\n        config: await transformToOracleConfig(data.config),\n        settlementTime: new Date(nsToMs(Number(data.settlement_time))),\n        resolutionWindows: resolutionWindows,\n        description: data.description ?? undefined,\n        sources: data.sources.map((s) => ({\n            endPoint: s.end_point,\n            sourcePath: s.source_path,\n        })),\n        fee: data.fee ?? '0',\n        outcomes: data.outcomes,\n        totalStaked: totalStaked.toString(),\n        finalized_outcome: data.finalized_outcome ? transformToOutcome(data.finalized_outcome) : undefined,\n        finalArbitratorTriggered: data.final_arbitrator_triggered,\n        tags: data.tags ?? [],\n        data_type: parsedDataType ? \"Number\" : \"String\",\n        number_multiplier: parsedDataType ? parsedDataType.Number : undefined,\n        stakeToken,\n        bondToken,\n        totalCorrectStaked: data.total_correct_bonded_staked,\n        totalIncorrectStaked: data.total_incorrect_staked,\n        paidFee: data.paid_fee ?? undefined,\n        loggedInAccountClaim: data.claim ? transformToClaimViewModel(data.claim) : undefined,\n        loggedInAccountStakes: data.account_stakes.map(ac => transformToUserStakesViewModel(ac, resolutionWindows)),\n    };\n}\n\nexport function canDataRequestBeFinalized(dataRequest: DataRequestViewModel): boolean {\n    // Already finalized\n    if (dataRequest.finalized_outcome) {\n        return false;\n    }\n\n    if (dataRequest.finalArbitratorTriggered) {\n        return false;\n    }\n\n    const currentResolutionWindow = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1];\n    if (!currentResolutionWindow) return false;\n\n    const now = new Date().getTime();\n\n    // Latest resolution window must end\n    if (currentResolutionWindow.endTime.getTime() >= now) {\n        return false;\n    }\n\n    if (!currentResolutionWindow.filled) {\n        // The window has not been filled\n        // If it's the first round we cannot finalize till it's completely filled\n        if (currentResolutionWindow.round === 0) {\n            return false;\n        }\n    }\n\n    // Window has been filled, end time is met and we are not the first round\n    // Meaning that the previous round was filled and ready to be finalized\n    return true;\n}\n\nexport function getDataRequestTypeTranslation(type: DataRequestType) {\n    if (type === DataRequestType.Arbitrator) {\n        return trans('dataRequest.type.arbitrator');\n    }\n\n    return trans('dataRequest.type.api');\n}\n","import { getTokenInfo } from \"../services/providers/ProviderRegistry\";\nimport { isSameOutcome, Outcome, transformToOutcome } from \"./DataRequestOutcome\";\nimport { OutcomeStake } from \"./OutcomeStake\";\nimport { ResolutionWindow } from \"./ResolutionWindow\";\nimport { TokenViewModel } from \"./Token\";\n\n/** @deprecated */\nexport interface UserStakes {\n    [accountId: string]: OutcomeStake[];\n}\n\nexport interface UserStakeViewModel {\n    outcome: Outcome;\n    accountId: string;\n    dataRequestId: string;\n    round: number;\n    totalStake: string;\n    bonded: boolean;\n}\n\nexport interface UserStakeGraphData {\n    account_id: string;\n    data_request_id: string;\n    id: string;\n    outcome: string;\n    round: number;\n    total_stake: string;\n    data_request?: {\n        finalized_outcome: string | null;\n        config: {\n            stake_token: string;\n        }\n    }\n    claim?: {\n        payout: string;\n    }\n}\n\nexport function transformToUserStakesViewModel(userStake: UserStakeGraphData, resolutionWindows: ResolutionWindow[] = []): UserStakeViewModel {\n    let bonded = false;\n    const stakedResolutionWindow = resolutionWindows[userStake.round];\n    const stakedOutcome = transformToOutcome(userStake.outcome);\n\n    if (stakedResolutionWindow && isSameOutcome(stakedResolutionWindow.bondedOutcome, stakedOutcome)) {\n        bonded = true;\n    }\n\n    return {\n        outcome: stakedOutcome,\n        accountId: userStake.account_id,\n        dataRequestId: userStake.data_request_id,\n        totalStake: userStake.total_stake,\n        round: userStake.round,\n        bonded,\n    }\n}\n\nexport async function transformToUserStakes(userStakes: UserStakeGraphData[], stakeToken?: TokenViewModel) {\n    // TODO: Investigate if this is still needed\n    const result: UserStakes = {};\n\n    for await (const userStake of userStakes) {\n        const currentOutcomeStakes = result[userStake.account_id] ?? [];\n        const finalStakeToken = stakeToken ?? await getTokenInfo('near', userStake.data_request?.config.stake_token ?? '');\n\n        currentOutcomeStakes.push({\n            outcome: transformToOutcome(userStake.outcome),\n            stake: userStake.total_stake,\n            round: userStake.round,\n            dataRequestId: userStake.data_request_id,\n            accountId: userStake.account_id,\n            finalizedOutcome: userStake.data_request?.finalized_outcome ? transformToOutcome(userStake.data_request.finalized_outcome) : undefined,\n            claimPayout: userStake.claim?.payout,\n            stakeToken: finalStakeToken,\n            bonded: false,\n        });\n\n        result[userStake.account_id] = currentOutcomeStakes;\n    }\n\n    return result;\n}\n","import Big from \"big.js\";\nimport { isSameOutcome, Outcome, transformToOutcome } from \"./DataRequestOutcome\";\nimport { OutcomeStake } from \"./OutcomeStake\";\nimport { TokenViewModel } from \"./Token\";\nimport { transformToUserStakes, UserStakeGraphData, UserStakes } from \"./UserStakes\";\n\n\nexport interface ResolutionWindow {\n    round: number;\n    bondedOutcome?: Outcome;\n    outcomeStakes: OutcomeStake[];\n    endTime: Date;\n    bondSize: string;\n    totalStaked: string;\n    filled: boolean;\n    userStakes: UserStakes;\n    winningOutcomeStake?: OutcomeStake;\n}\n\nexport interface ResolutionWindowGraphData {\n    block_height: string;\n    bond_size: string;\n    date: string;\n    dr_id: string;\n    end_time: string;\n    id: string;\n    round: number;\n    bonded_outcome: null | string;\n    outcome_stakes: {\n        data_request_id: string;\n        id: string;\n        round: number;\n        total_stake: string;\n        outcome: string;\n    }[];\n    user_stakes: UserStakeGraphData[];\n}\n\nexport async function transformToResolutionWindow(data: ResolutionWindowGraphData, stakeToken?: TokenViewModel): Promise<ResolutionWindow> {\n    let totalStaked = new Big(0);\n    let highestOutcomeStake: OutcomeStake | undefined;\n    const bondedOutcome = data.bonded_outcome ? transformToOutcome(data.bonded_outcome) : undefined;\n\n    const outcomeStakes: OutcomeStake[] = data.outcome_stakes.map((os) => {\n        totalStaked = totalStaked.add(os.total_stake);\n        const outcome = transformToOutcome(os.outcome);\n\n        const outcomeStake: OutcomeStake = {\n            outcome,\n            stake: os.total_stake,\n            dataRequestId: os.data_request_id,\n            round: os.round,\n            bonded: bondedOutcome ? isSameOutcome(outcome, bondedOutcome) : false,\n            stakeToken: stakeToken ?? {\n                contractId: '',\n                decimals: 18,\n                name: '',\n                symbol: '',\n            }\n        };\n\n        // Find the highest stake\n        if (highestOutcomeStake) {\n            const highestStake = new Big(highestOutcomeStake.stake);\n\n            if (highestStake.lt(outcomeStake.stake)) {\n                highestOutcomeStake = outcomeStake;\n            }\n        } else {\n            highestOutcomeStake = outcomeStake;\n        }\n\n        return outcomeStake;\n    });\n\n    return {\n        bondSize: data.bond_size,\n        endTime: new Date(Number(data.end_time) / 1000000),\n        outcomeStakes,\n        filled: highestOutcomeStake?.stake ? new Big(highestOutcomeStake.stake).eq(data.bond_size) : false,\n        totalStaked: totalStaked.toString(),\n        round: data.round,\n        userStakes: await transformToUserStakes(data.user_stakes, stakeToken),\n        bondedOutcome,\n        winningOutcomeStake: highestOutcomeStake,\n    };\n}\n","import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { API_URL } from '../config';\n\nconst cache = new InMemoryCache();\nconst link = createHttpLink({\n    uri: API_URL,\n});\n\nexport const graphqlClient = new ApolloClient({\n    cache,\n    link,\n\n    defaultOptions: {\n        watchQuery: {\n            fetchPolicy: 'cache-and-network',\n        }\n    }\n});\n","import gql from \"graphql-tag\";\nimport { DataRequestGraphData, DataRequestListItem, transformToDataRequestListItem, transformToDataRequestViewModel } from \"../models/DataRequest\";\nimport { Pagination } from \"../models/Pagination\";\nimport { graphqlClient } from \"./GraphQLService\";\n\nexport interface DataRequestFilters {\n    onlyArbitratorRequests: boolean;\n    requestor?: string;\n}\n\ninterface DataRequestPagination {\n    limit: number;\n    offset: number;\n}\n\nexport async function getAllDataRequests({\n    limit,\n    offset,\n}: DataRequestPagination, {\n    onlyArbitratorRequests,\n    requestor,\n}: DataRequestFilters): Promise<Pagination<DataRequestListItem>> {\n    try {\n        const response = await graphqlClient.query({\n            fetchPolicy: 'network-only',\n            query: gql`\n                query GetAllDataRequests($limit: Int, $offset: Int, $onlyArbitratorRequests: Boolean, $requestor: String) {\n                    dataRequests: getDataRequests(limit: $limit, offset: $offset, onlyArbitratorRequests: $onlyArbitratorRequests, requestor: $requestor) {\n                        total\n                        items {\n                            id\n                            date\n                            requestor_account_id\n                            finalized_outcome\n                            sources {\n                                end_point\n                                source_path\n                            }\n                        }\n                    }\n                }\n            `,\n            variables: {\n                limit,\n                offset,\n                onlyArbitratorRequests,\n                requestor,\n            }\n        });\n\n        const paginatedDataRequests: DataRequestListItem[] = response.data.dataRequests.items.map((dr: DataRequestGraphData) => transformToDataRequestListItem(dr));\n\n        return {\n            total: response.data.dataRequests.total,\n            items: paginatedDataRequests,\n        };\n    } catch (error) {\n        console.error('[getAllDataRequests]', error);\n\n        return {\n            total: 0,\n            items: [],\n        };\n    }\n}\n\nexport async function getDataRequestById(id: string, accountId?: string) {\n    try {\n        const response = await graphqlClient.query({\n            fetchPolicy: 'network-only',\n            query: gql`\n                query GetDataRequest($id: String!, $accountId: String) {\n                    dataRequest: getDataRequest(id: $id) {\n                        block_height\n                        date\n                        final_arbitrator_triggered\n                        global_config_id\n                        total_incorrect_staked\n                        total_correct_bonded_staked\n                        id\n                        claim(accountId: $accountId) {\n                            payout\n                            user_correct_stake\n                        }\n                        initial_challenge_period\n                        outcomes\n                        requestor_account_id\n                        finalized_outcome\n                        paid_fee\n                        description\n                        settlement_time\n                        tags\n                        data_type\n                        fee\n                        account_stakes(accountId: $accountId) {\n                            outcome\n                            total_stake\n                            round\n                            account_id\n                            data_request_id\n                        }\n                        whitelist_item {\n                            active\n                            code_base_url\n                            custom_fee\n                            interface_name\n                        }\n                        sources {\n                            end_point\n                            source_path\n                        }\n                        config {\n                            block_height\n                            payment_token\n                            date\n                            default_challenge_window_duration\n                            final_arbitrator\n                            final_arbitrator_invoke_amount\n                            gov\n                            id\n                            max_outcomes\n                            min_initial_challenge_window_duration\n                            resolution_fee_percentage\n                            stake_token\n                            validity_bond\n                            fee {\n                                flux_market_cap\n                                resolution_fee_percentage\n                                total_value_staked\n                            }\n                        }\n                        resolution_windows {\n                            block_height\n                            bond_size\n                            bonded_outcome\n                            date\n                            dr_id\n                            end_time\n                            id\n                            outcome_stakes {\n                                data_request_id\n                                id\n                                round\n                                total_stake\n                                outcome\n                            }\n                            round\n                            user_stakes {\n                                account_id\n                                data_request_id\n                                id\n                                outcome\n                                round\n                                total_stake\n                            }\n                        }\n                    }\n                }\n            `,\n            variables: {\n                id,\n                accountId,\n            }\n        });\n\n        return transformToDataRequestViewModel(response.data.dataRequest);\n    } catch(error) {\n        console.error('[getDataRequestById]', error);\n        return null;\n    }\n}\n\nexport async function doesDataRequestExists(id: string): Promise<boolean> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                query DataRequestExists($id: String!) {\n                    request: getDataRequest(id: $id) {\n                        id\n                    }\n                }\n            `,\n            variables: {\n                id,\n            }\n        });\n\n        if (!response.data.request || !response.data.request.id) {\n            return false;\n        }\n\n        return true;\n    } catch (error) {\n        console.error('[doesDataRequestExists]', error);\n        return false;\n    }\n}\n\n","import { Pagination } from \"../models/Pagination\";\nimport { routePaths } from \"../routes\";\nimport { doesDataRequestExists } from \"./DataRequestService\";\n\nexport interface SearchResult {\n    url: string;\n}\n\nexport async function search(query: string): Promise<Pagination<SearchResult>> {\n    try {\n        if (isNaN(Number(query))) {\n            return {\n                items: [{\n                    url: routePaths.account('near', query),\n                }],\n                total: 1,\n            };\n        }\n\n        const dataRequest = await doesDataRequestExists(query);\n\n        if (dataRequest) {\n            return {\n                items: [{\n                    url: routePaths.dataRequestDetail('near', query),\n                }],\n                total: 1,\n            };\n        }\n\n        return {\n            items: [],\n            total: 0,\n        };\n    } catch (error) {\n        return {\n            items: [],\n            total: 0,\n        };\n    }\n}\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router';\nimport SearchForm from '../../containers/SearchForm';\nimport { routePaths } from '../../routes';\nimport { search } from '../../services/SearchService';\n\ninterface Props {\n    className?: string;\n    inputClassName?: string;\n}\n\nexport default function SearchConnector({\n    className,\n    inputClassName,\n}: Props) {\n    const history = useHistory();\n    const handleSearch = useCallback(async (query) => {\n        const result = await search(query);\n\n        if (result.total === 0) {\n            history.push(routePaths.search(query));\n            return;\n        }\n\n        history.push(result.items[0].url);\n    }, [history]);\n\n    return (\n        <SearchForm\n            onSearch={handleSearch}\n            className={className}\n            inputClassName={inputClassName}\n        />\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\nimport { default as MuiButton } from '@material-ui/core/Button';\n\nimport s from './Button.module.scss';\n\ninterface Props {\n    className?: string;\n    disabled?: boolean;\n    onClick?: () => void;\n}\n\nexport default function Button({\n    children,\n    className,\n    disabled = false,\n    onClick = () => {},\n}: PropsWithChildren<Props>) {\n    return (\n        <MuiButton\n            className={classnames(className, s.button)}\n            variant=\"contained\"\n            onClick={onClick}\n            disabled={disabled}\n        >\n            {children}\n        </MuiButton>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\nimport { default as MuiDialog } from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport Button from '../../components/Button';\n\nimport s from './Dialog.module.scss';\nimport trans from '../../translation/trans';\n\ninterface Props {\n    title: string;\n    open: boolean;\n    isInfoDialog?: boolean;\n    onRequestClose: () => void;\n    onSubmitClick?: () => void;\n    canSubmit?: boolean;\n    hideButtons?: boolean;\n    paperClassName?: string;\n}\n\nexport default function Dialog({\n    title,\n    children,\n    open,\n    isInfoDialog = false,\n    onRequestClose,\n    onSubmitClick = () => {},\n    canSubmit = true,\n    hideButtons = false,\n    paperClassName = '',\n}: PropsWithChildren<Props>) {\n    return (\n        <MuiDialog open={open} classes={{ paper: classnames(s.paper, paperClassName) }}>\n            <DialogTitle className={s.title}>\n                {title}\n            </DialogTitle>\n            <DialogContent className={s.content}>\n                {children}\n            </DialogContent>\n            {isInfoDialog && (\n                <DialogActions>\n                    <Button className={s.cancelButton} onClick={onRequestClose}>\n                        {trans('global.action.close')}\n                    </Button>\n                </DialogActions>\n            )}\n\n            {!hideButtons && (\n                <DialogActions>\n                    <Button className={s.cancelButton} onClick={onRequestClose}>\n                        {trans('global.action.cancel')}\n                    </Button>\n                    <Button disabled={!canSubmit} className={s.confirmButton} onClick={onSubmitClick}>\n                        {trans('global.action.submit')}\n                    </Button>\n                </DialogActions>\n            )}\n        </MuiDialog>\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport TextField from '@material-ui/core/TextField';\n\nimport s from './Input.module.scss';\n\nexport interface InputProps {\n    label?: string;\n    className?: string;\n    type?: 'text' | 'number';\n    onChange?: (value: string) => void;\n    value?: string;\n    error?: string;\n    endAdornment?: any;\n}\n\nexport default function Input({\n    className,\n    label,\n    type,\n    onChange = () => {},\n    value,\n    error,\n    endAdornment,\n}: InputProps) {\n    return (\n        <TextField\n            label={label}\n            className={classnames(className, s.input)}\n            type={type}\n            onChange={(event) => onChange(event.currentTarget.value)}\n            value={value}\n            error={!!error}\n            helperText={error}\n            InputProps={{\n                endAdornment,\n            }}\n        />\n    );\n}\n","import React from 'react';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport Input, { InputProps } from '../../components/Input/Input';\nimport trans from '../../translation/trans';\n\ninterface Props extends InputProps {\n    showMax?: boolean;\n    onMaxClick?: () => void,\n}\n\nexport default function NumberInput({\n    showMax = false,\n    onMaxClick = () => {},\n    ...props\n}: Props) {\n    return (\n        <Input\n            {...props}\n            type=\"number\"\n            endAdornment={\n                <>\n                    {showMax && (\n                        <InputAdornment position=\"end\">\n                            <Button onClick={onMaxClick}>\n                                {trans('global.max')}\n                            </Button>\n                        </InputAdornment>\n                    )}\n                </>\n            }\n        />\n    );\n}\n","import React, { useCallback, useState } from 'react';\nimport Dialog from '../../compositions/Dialog';\nimport { Account } from '../../models/Account';\nimport trans from '../../translation/trans';\nimport createDefaultStorageManagerFormValues, { StorageManagerFormValues } from './services/createDefaultStorageManagerFormValues';\nimport validateStorageManagerFormValues from './services/validateStorageManagerFormValues';\nimport { formatToken, toToken } from '../../utils/tokenUtils';\n\nimport s from './StorageManagerDialog.module.scss';\nimport NumberInput from '../../compositions/NumberInput';\nimport { AppConfig } from '../../models/AppConfig';\nimport Big from 'big.js';\n\ninterface Props {\n    open: boolean;\n    account: Account;\n    appConfig: AppConfig;\n    onRequestClose: () => void;\n    onSubmit: (formValues: StorageManagerFormValues) => void;\n}\n\nexport default function StorageManagerDialog({\n    open,\n    account,\n    appConfig,\n    onRequestClose,\n    onSubmit,\n}: Props) {\n    const [formValues, setFormValues] = useState(createDefaultStorageManagerFormValues());\n\n    const errors = validateStorageManagerFormValues(formValues, account);\n\n    function handleAmountChange(amount: string) {\n        if (amount && new Big(amount).lt(0)) {\n            return;\n        }\n\n        setFormValues({\n            amount: amount ? toToken(amount, appConfig.nativeTokenDecimals) : '0',\n            amountFormatted: amount ? amount : '',\n        });\n    }\n\n    const handleMaxClick = useCallback(() => {\n        setFormValues({\n            amount: account.storageAvailable,\n            amountFormatted: formatToken(account.storageAvailable, appConfig.nativeTokenDecimals, 4),\n        });\n    }, [account, appConfig]);\n\n    return (\n        <Dialog\n           open={open}\n           onRequestClose={onRequestClose}\n           title={trans('storageManagerDialog.title')}\n           onSubmitClick={() => onSubmit(formValues)}\n           canSubmit={errors.canSubmit}\n        >\n            <form>\n                <p>\n                    {trans('storageManagerDialog.description', { nativeToken: appConfig.nativeTokenSymbol })}\n                </p>\n                <p>\n                    {trans('storageManagerDialog.label.amountAvailable', {\n                        amount: formatToken(account.storageAvailable, appConfig.nativeTokenDecimals, 4),\n                        nativeToken: appConfig.nativeTokenSymbol,\n                    })}\n                </p>\n                <div className={s.formItem}>\n                    <NumberInput\n                        label={trans('storageManagerDialog.label.withdrawAmount', { nativeToken: appConfig.nativeTokenSymbol })}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleAmountChange}\n                        type=\"number\"\n                        error={errors.amount}\n                        showMax\n                        onMaxClick={handleMaxClick}\n                    />\n                </div>\n            </form>\n        </Dialog>\n    );\n}\n","export interface StorageManagerFormValues {\n    amountFormatted: string;\n    amount: string;\n}\n\nexport default function createDefaultStorageManagerFormValues(): StorageManagerFormValues {\n    return {\n        amount: '0',\n        amountFormatted: '0',\n    }\n}\n","import Big from \"big.js\";\nimport { Account } from \"../../../models/Account\";\nimport trans from \"../../../translation/trans\";\nimport { StorageManagerFormValues } from \"./createDefaultStorageManagerFormValues\";\n\ninterface StorageManagerErrors {\n    amount: string;\n    canSubmit: boolean;\n}\n\nexport default function validateStorageManagerFormValues(formValues: StorageManagerFormValues, account: Account): StorageManagerErrors {\n    const errors: StorageManagerErrors = {\n        amount: '',\n        canSubmit: true,\n    }\n\n    if (formValues.amount) {\n        const amountToWithdraw = new Big(formValues.amount);\n\n        if (amountToWithdraw.gt(account.storageAvailable)) {\n            errors.amount = trans('storageManagerDialog.errors.withdrawAmount.notEnoughToWithdraw');\n            errors.canSubmit = false;\n        }\n\n        if (amountToWithdraw.lte(0)) {\n            errors.canSubmit = false;\n        }\n    }\n\n    return errors;\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { DataRequestViewModel } from '../../models/DataRequest';\n\nexport type DialogsState = Readonly<{\n    stakeDialog: {\n        open: boolean;\n        dataRequest?: DataRequestViewModel;\n    },\n    unstakeDialog: {\n        open: boolean;\n        dataRequest?: DataRequestViewModel;\n    },\n    storageManager: {\n        open: boolean;\n    }\n}>;\n\nconst initialState: DialogsState = {\n    stakeDialog: {\n        open: false,\n    },\n    unstakeDialog: {\n        open: false,\n    },\n    storageManager: {\n        open: false,\n    }\n};\n\nconst dialogsSlice = createSlice({\n    initialState,\n    name: 'dialogs',\n    reducers: {\n        setStakeDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['stakeDialog']>): DialogsState {\n            return ({\n                ...state,\n                stakeDialog: action.payload,\n            });\n        },\n\n        setUnstakeDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['unstakeDialog']>): DialogsState {\n            return ({\n                ...state,\n                unstakeDialog: action.payload,\n            });\n        },\n\n        setStorageManagerDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['storageManager']>): DialogsState {\n            return {\n                ...state,\n                storageManager: action.payload,\n            };\n        }\n    },\n});\n\nexport const {\n    setStakeDialogOpen,\n    setUnstakeDialogOpen,\n    setStorageManagerDialogOpen,\n} = dialogsSlice.actions;\n\nexport default dialogsSlice.reducer;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport StorageManagerDialog from '../../containers/StorageManagerDialog';\nimport { StorageManagerFormValues } from '../../containers/StorageManagerDialog/services/createDefaultStorageManagerFormValues';\nimport { setStorageManagerDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\nimport { withdrawStorage } from '../../services/providers/ProviderRegistry';\n\nexport default function StorageManagerDialogConnector() {\n    const open = useSelector((store: Reducers) => store.dialogs.storageManager.open);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n    const dispatch = useDispatch();\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setStorageManagerDialogOpen({\n            open: false,\n        }));\n    }, [dispatch]);\n\n    const handleSumbit = useCallback((formValues: StorageManagerFormValues) => {\n        withdrawStorage('near', formValues.amount);\n    }, []);\n\n    if (!account) return null;\n\n    return (\n        <StorageManagerDialog\n            open={open}\n            appConfig={appConfig}\n            account={account}\n            onRequestClose={handleRequestClose}\n            onSubmit={handleSumbit}\n        />\n    );\n}\n","import React, { FormEvent, useState } from 'react';\nimport MuiMenu from '@material-ui/core/Menu';\nimport MuiMenuItem from '@material-ui/core/MenuItem';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport IconButton from '@material-ui/core/IconButton';\nimport { NavLink, Link, useHistory } from 'react-router-dom';\nimport FakeLinkButton from '../../components/FakeLinkButton';\nimport SearchConnector from '../../connectors/SearchConnector';\nimport { Account } from '../../models/Account';\nimport { routePaths, routes } from '../../routes';\nimport trans from '../../translation/trans';\nimport { formatToken } from '../../utils/tokenUtils';\n\nimport s from './Menu.module.scss';\nimport StorageManagerDialogConnector from '../../connectors/StorageManagerDialogConnector';\nimport { AppConfig } from '../../models/AppConfig';\n\ninterface Props {\n    account?: Account;\n    appConfig: AppConfig;\n    onLoginClick: () => void;\n    onLogoutClick: () => void;\n    onStorageManagerClick: () => void;\n}\n\nexport default function Menu({\n    account,\n    appConfig,\n    onLoginClick,\n    onLogoutClick,\n    onStorageManagerClick,\n}: Props) {\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element | null>(null);\n    const history = useHistory();\n\n    function handleMenuClick(event: FormEvent) {\n        setMenuAnchorEl(event.currentTarget);\n    }\n\n    function handleMenuClose() {\n        setMenuAnchorEl(null);\n    }\n\n    function handleLogoutClick() {\n        handleMenuClose();\n        onLogoutClick();\n    }\n\n    function handleStorageManagerClick() {\n        handleMenuClose();\n        onStorageManagerClick();\n    }\n\n    function handleAccountClick() {\n        if (!account) return;\n        handleMenuClose();\n\n        history.push(routePaths.account(account.providerId, account.accountId));\n    }\n\n    return (\n        <header className={s.root}>\n            <div className={s.menu}>\n                <div className={s.topBar}>\n                    <div>\n                        <Link to={routePaths.root()} className={s.logoWrapper}>\n                            <div className={s.logo} />\n                        </Link>\n                    </div>\n                    <div>\n                        <SearchConnector />\n                        <StorageManagerDialogConnector />\n                    </div>\n                </div>\n                <div className={s.bottomBar}>\n                    <ul className={s.menuItems}>\n                        {routes.map(route => {\n                            if (!route.inNavigation) {\n                                return null;\n                            }\n\n                            return (\n                                <li className={s.menuItem} key={route.key}>\n                                    <NavLink\n                                        className={s.menuLink}\n                                        activeClassName={s['menuLink--active']}\n                                        exact\n                                        to={route.navPath}\n                                    >\n                                        {route.label}\n                                    </NavLink>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                    <div className={s.rightMenu}>\n                        <ul className={s.accountLinks}>\n                            {account && (\n                                <>\n                                    <li className={s.menuItem}>\n                                        <Link className={s.link} to={routePaths.account(account.providerId, account.accountId)}>{account.accountId}</Link>\n                                    </li>\n                                    <li className={s.menuItem}>\n                                        {formatToken(account.balance, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}\n                                    </li>\n                                </>\n                            )}\n                        </ul>\n                        <div className={s.moreMenu}>\n                            {!account && (\n                                <FakeLinkButton onClick={onLoginClick}>\n                                    {trans('menu.label.login')}\n                                </FakeLinkButton>\n                            )}\n\n                            {account && (\n                                <>\n                                    <IconButton onClick={handleMenuClick} className={s.iconButton}>\n                                        <MoreVertIcon />\n                                    </IconButton>\n                                    <MuiMenu anchorEl={menuAnchorEl} keepMounted open={Boolean(menuAnchorEl)} onClose={handleMenuClose}>\n                                        <MuiMenuItem className={s.mobileOnly} onClick={handleAccountClick}>{account.accountId}</MuiMenuItem>\n                                        <MuiMenuItem className={s.mobileOnly} disabled>{formatToken(account.balance, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</MuiMenuItem>\n                                        <MuiMenuItem onClick={handleStorageManagerClick}>{trans('menu.label.storageManager')}</MuiMenuItem>\n                                        <MuiMenuItem onClick={handleLogoutClick}>{trans('menu.label.logout')}</MuiMenuItem>\n                                    </MuiMenu>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </header>\n    );\n}\n","import { parseJson } from \"../utils/jsonUtils\"\n\ninterface FixedCustomFee {\n    fee: string;\n    type: 'fixed';\n}\n\ninterface MultiplierCustomFee {\n    multiplier: number;\n    type: 'multiplier';\n}\n\ninterface MultiplierCustomFeeGraphData {\n    Multiplier: number;\n}\n\ninterface FixedCustomFeeGraphData {\n    Fixed: string;\n}\n\nexport interface WhitelistItemGraphData {\n    interface_name: string;\n    account_id: string;\n    custom_fee: string;\n    code_base_url: string;\n    active: boolean;\n}\n\nexport interface WhitelistItemViewModel {\n    interfaceName: string;\n    accountId: string;\n    codeBaseUrl: string;\n    active: boolean;\n    customFee?: FixedCustomFee | MultiplierCustomFee;\n}\n\nexport function transformToWhitelistItemViewModel(data: WhitelistItemGraphData): WhitelistItemViewModel {\n    const parsedCustomFee = parseJson<FixedCustomFeeGraphData | MultiplierCustomFeeGraphData>(data.custom_fee);\n    let customFee: WhitelistItemViewModel['customFee'];\n\n    if (parsedCustomFee) {\n        if ('Fixed' in parsedCustomFee) {\n            customFee = {\n                fee: parsedCustomFee.Fixed,\n                type: 'fixed',\n            }\n        } else {\n            customFee = {\n                multiplier: parsedCustomFee.Multiplier,\n                type: 'multiplier',\n            }\n        }\n    }\n\n    return {\n        active: data.active,\n        codeBaseUrl: data.code_base_url,\n        accountId: data.account_id,\n        customFee,\n        interfaceName: data.interface_name,\n    }\n}\n","import gql from \"graphql-tag\";\nimport { AccountInfo } from \"../models/Account\";\nimport { transformToWhitelistItemViewModel } from \"../models/WhitelistItem\";\nimport { graphqlClient } from \"./GraphQLService\";\nimport { getProviderStorageBalance } from \"./providers/ProviderRegistry\";\n\nexport async function getAccountInfo(accountId: string, providerId: string = 'near'): Promise<AccountInfo> {\n    try {\n        const storageBalanceRequest = getProviderStorageBalance(providerId, accountId);\n        const response = await graphqlClient.query({\n            query: gql`\n                    query AccountInfo($accountId: String!) {\n                        accountInfo: getAccountInfo(accountId: $accountId) {\n                            active_staking\n                            total_staked\n                            total_claimed\n                            total_amount_slashed\n                            times_slashed\n                            total_disputes\n                            has_requests\n                            has_stakes\n                            whitelist_item {\n                                active\n                                code_base_url\n                                custom_fee\n                                interface_name\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n            }\n        });\n\n        const data = response.data.accountInfo;\n        const storageBalance = await storageBalanceRequest;\n\n        return {\n            activeStaking: data.active_staking,\n            totalStaked: data.total_staked,\n            totalClaimed: data.total_claimed,\n            totalDisputes: data.total_disputes,\n            storageAvailable: storageBalance.available,\n            storageTotal: storageBalance.total,\n            storageUsed: storageBalance.used,\n            whitelistItem: data.whitelist_item ? transformToWhitelistItemViewModel(data.whitelist_item) : undefined,\n            hasRequests: data.has_requests,\n            hasStakes: data.has_stakes,\n            timesSlashed: data.times_slashed,\n            totalSlashed: data.total_amount_slashed,\n        }\n    } catch (error) {\n        console.error('[getAccountInfo]', error);\n\n        return {\n            activeStaking: '0',\n            totalStaked: '0',\n            totalClaimed: '0',\n            totalDisputes: '0',\n            storageAvailable: '0',\n            storageTotal: '0',\n            storageUsed: '0',\n            hasStakes: false,\n            hasRequests: false,\n            timesSlashed: '0',\n            totalSlashed: '0',\n        }\n    }\n}\n","import { subDays, subMonths, subWeeks, subYears } from \"date-fns\";\nimport gql from \"graphql-tag\";\nimport { AnalyticsPoint } from \"../models/AnalyticsPoint\";\nimport { graphqlClient } from \"./GraphQLService\";\n\nexport enum Period {\n    OneDay = '1d',\n    OneWeek = '1w',\n    OneMonth = '1m',\n    ThreeWeeks = '3w',\n    OneYear = '1y',\n    All = 'all',\n}\n\nexport enum DateMetric {\n    minute = \"minute\",\n    hour = \"hour\",\n    day = \"day\",\n    week = \"week\",\n    month = \"month\",\n    year = \"year\",\n}\n\nfunction getEndDateInfoForPeriod(period: Period) {\n    const now = new Date();\n    let chosenPeriodDate = new Date();\n    let metric = DateMetric.month;\n\n    switch (period) {\n        case Period.OneDay:\n            chosenPeriodDate = subDays(now, 1);\n            metric = DateMetric.hour;\n            break;\n        case Period.OneWeek:\n            chosenPeriodDate = subWeeks(now, 1);\n            metric = DateMetric.day;\n            break;\n        case Period.ThreeWeeks:\n            chosenPeriodDate = subWeeks(now, 3);\n            metric = DateMetric.day;\n            break;\n        case Period.OneMonth:\n            chosenPeriodDate = subMonths(now, 1);\n            metric = DateMetric.day;\n            break;\n        case Period.OneYear:\n            chosenPeriodDate = subYears(now, 1);\n            metric = DateMetric.month;\n            break;\n        case Period.All:\n            chosenPeriodDate = new Date(0);\n            metric = DateMetric.month;\n            break;\n    }\n\n    return {\n        chosenPeriodDate,\n        metric,\n    }\n}\n\nexport async function getAccountAnalytics(accountId: string, period: Period): Promise<AnalyticsPoint[]> {\n    try {\n        const { chosenPeriodDate, metric } = getEndDateInfoForPeriod(period);\n\n        const response = await graphqlClient.query({\n            query: gql`\n                query GetAccountAnalytics($accountId: String!, $beginTimestamp: String!, $metric: DateMetric) {\n                    points: getAccountAnalytics(accountId: $accountId, beginTimestamp: $beginTimestamp, dateMetric: $metric) {\n                        key\n                        data\n                    }\n                }\n            `,\n            variables: {\n                accountId,\n                beginTimestamp: chosenPeriodDate.getTime().toString(),\n                metric,\n            }\n        });\n\n        return response.data.points;\n    } catch (error) {\n        console.error('[getAccountAnalytics]', error);\n        return [];\n    }\n}\n\nexport async function getRequestorInvalidRequestsAnalytics(accountId: string, period: Period): Promise<AnalyticsPoint[]> {\n    try {\n        const { chosenPeriodDate, metric } = getEndDateInfoForPeriod(period);\n\n        const response = await graphqlClient.query({\n            query: gql`\n                query GetRequestorInvalidAnalytics($accountId: String!, $beginTimestamp: String!, $metric: DateMetric) {\n                    points: getInvalidRequestsAnalytics(accountId: $accountId, beginTimestamp: $beginTimestamp, dateMetric: $metric) {\n                        key\n                        data\n                    }\n                }\n            `,\n            variables: {\n                accountId,\n                beginTimestamp: chosenPeriodDate.getTime().toString(),\n                metric,\n            }\n        });\n\n        return response.data.points;\n    } catch (error) {\n        console.error('[getRequestorInvalidRequestsAnalytics]', error);\n        return [];\n    }\n}\n","import Big from \"big.js\";\nimport { Outcome, OutcomeType } from \"./DataRequestOutcome\";\nimport { TokenViewModel } from \"./Token\";\n\nexport interface OutcomeStake {\n    outcome: Outcome;\n    stake: string;\n    round: number;\n    bonded: boolean;\n    dataRequestId: string;\n    accountId?: string;\n    finalizedOutcome?: Outcome;\n    claimPayout?: string;\n    stakeToken: TokenViewModel;\n}\n\nexport function combineOutcomeStakes(outcomeStakes: OutcomeStake[] = []): OutcomeStake[] {\n    const result = new Map<string, OutcomeStake>();\n\n    outcomeStakes.forEach((outcomeStake) => {\n        let answer = '';\n\n        if (outcomeStake.outcome.type === OutcomeType.Invalid) {\n            answer = 'Invalid';\n        } else {\n            answer = `Answer(${outcomeStake.outcome.answer})`;\n        }\n\n        const internalId = `${answer}_${outcomeStake.dataRequestId}`;\n        const currentItem = result.get(internalId);\n\n        if (currentItem) {\n            let stake = new Big(currentItem.stake);\n            stake = stake.add(outcomeStake.stake);\n            result.set(internalId, {\n                ...currentItem,\n                stake: stake.toString(),\n            });\n        } else {\n            result.set(internalId, outcomeStake);\n        }\n    });\n\n    return Array.from(result.values());\n}\n","import gql from \"graphql-tag\";\nimport { combineOutcomeStakes, OutcomeStake } from \"../models/OutcomeStake\";\nimport { Pagination } from \"../models/Pagination\";\nimport { transformToUserStakes, UserStakes } from \"../models/UserStakes\";\nimport { graphqlClient } from \"./GraphQLService\";\n\nasync function getUserStakesByRequestIdAndAccountId(requestId: string, accountId: string) {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakesRequestAndAccount($requestId: String!, $accountId: String!) {\n                        stakes: getUserStakesByRequestId(id: $requestId, accountId: $accountId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                            data_request {\n                                config {\n                                    stake_token\n                                }\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                requestId,\n                accountId,\n            }\n        });\n\n        const userStakes = transformToUserStakes(response.data.stakes);\n        return userStakes;\n    } catch (error) {\n        console.error('[getUserStakesByRequestIdAndAccountId]', error);\n        return {};\n    }\n}\n\nexport async function getUserStakesByRequestId(requestId: string, accountId?: string): Promise<UserStakes> {\n    try {\n        if (accountId) {\n            return getUserStakesByRequestIdAndAccountId(requestId, accountId);\n        }\n\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakes($requestId: String!) {\n                        stakes: getUserStakesByRequestId(id: $requestId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                            data_request {\n                                config {\n                                    stake_token\n                                }\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                requestId,\n            }\n        });\n\n        const userStakes = transformToUserStakes(response.data.stakes);\n        return userStakes;\n    } catch(error) {\n        console.error('[getUserStakesByRequestId]', error);\n        return {};\n    }\n}\n\nexport interface UserStakesForAccountFilters {\n    limit: number;\n    offset: number;\n}\n\nexport async function getUserStakesByAccountId(accountId: string, filters: UserStakesForAccountFilters): Promise<Pagination<OutcomeStake>> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakesAccount($accountId: String!, $limit: Int, $offset: Int) {\n                        stakes: getUserStakes(accountId: $accountId, limit: $limit, offset: $offset) {\n                            items {\n                                data_request_id\n                                account_id\n                                id\n                                outcome\n                                round\n                                total_stake\n                                data_request {\n                                    finalized_outcome\n                                    config {\n                                        stake_token\n                                    }\n                                }\n                            }\n                            total\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n                limit: filters.limit,\n                offset: filters.offset,\n            }\n        });\n\n        const items = await transformToUserStakes(response.data.stakes.items);\n\n        return {\n            items: items[accountId],\n            total: response.data.stakes.total,\n        }\n    } catch (error) {\n        console.error('[getUserStakesByAccountId]', error);\n        return {\n            items: [],\n            total: 0,\n        };\n    }\n}\n\n\nexport async function getUnclaimedStakesByAccountId(accountId: string): Promise<OutcomeStake[]> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUnclaimedStakesAccount($accountId: String!) {\n                        stakes: getUnclaimedStakes(accountId: $accountId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                            data_request {\n                                finalized_outcome\n                                config {\n                                    stake_token\n                                }\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n            }\n        });\n\n        const items = await transformToUserStakes(response.data.stakes);\n        return combineOutcomeStakes(items[accountId]);\n    } catch (error) {\n        console.error('[getUnclaimedStakesByAccountId]', error);\n        return [];\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Account, AccountInfo } from '../../models/Account';\nimport { AnalyticsPoint } from '../../models/AnalyticsPoint';\nimport { DataRequestListItem } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\n\nexport type AccountState = Readonly<{\n    account?: Account;\n    accountDetail: {\n        account?: Account;\n        info: AccountInfo;\n        unclaimedStakes: OutcomeStake[];\n\n        accountRequests: DataRequestListItem[];\n        accountRequestsTotal: number;\n\n        payoutAnalytics: {\n            data: AnalyticsPoint[];\n            loading: boolean;\n        }\n\n        invalidRequestsAnalytics: {\n            data: AnalyticsPoint[];\n            loading: boolean;\n        }\n\n        accountStakes: OutcomeStake[];\n        accountStakesTotal: number;\n    };\n    error?: string[];\n    loading: boolean;\n}>;\n\nconst initialState: AccountState = {\n    loading: false,\n    accountDetail: {\n        account: undefined,\n        info: {\n            activeStaking: '0',\n            totalStaked: '0',\n            totalClaimed: '0',\n            totalDisputes: '0',\n            storageAvailable: '0',\n            storageTotal: '0',\n            storageUsed: '0',\n            timesSlashed: '0',\n            totalSlashed: '0',\n            hasRequests: false,\n            hasStakes: false,\n        },\n        payoutAnalytics: {\n            loading: false,\n            data: [],\n        },\n        invalidRequestsAnalytics: {\n            loading: false,\n            data: [],\n        },\n        accountStakes: [],\n        accountStakesTotal: 0,\n        accountRequests: [],\n        accountRequestsTotal: 0,\n        unclaimedStakes: [],\n    }\n};\n\nconst accountSlice = createSlice({\n    initialState,\n    name: 'account',\n    reducers: {\n        setAccountErrors(state: AccountState, action: PayloadAction<string[]>): AccountState {\n            return ({\n                ...state,\n                error: action.payload,\n            });\n        },\n        setAccountLoading(state: AccountState, action: PayloadAction<boolean>): AccountState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n        setAccount(state: AccountState, action: PayloadAction<Account | undefined>): AccountState {\n            return ({\n                ...state,\n                account: action.payload,\n            });\n        },\n        setAccountDetail(state: AccountState, action: PayloadAction<Account>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    account: action.payload,\n                },\n            });\n        },\n        setAccountStakes(state: AccountState, action: PayloadAction<OutcomeStake[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountStakes: action.payload,\n                },\n            });\n        },\n        setAccountStakesTotal(state: AccountState, action: PayloadAction<number>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountStakesTotal: action.payload,\n                },\n            });\n        },\n        setAccountInfo(state: AccountState, action: PayloadAction<AccountInfo>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    info: action.payload,\n                },\n            });\n        },\n        setAccountUnclaimedStakes(state: AccountState, action: PayloadAction<OutcomeStake[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    unclaimedStakes: action.payload,\n                },\n            });\n        },\n        setAccountRequests(state: AccountState, action: PayloadAction<DataRequestListItem[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountRequests: action.payload,\n                },\n            });\n        },\n        setAccountRequestsTotal(state: AccountState, action: PayloadAction<number>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountRequestsTotal: action.payload,\n                },\n            });\n        },\n        setAccountPayoutAnalyticsLoading(state: AccountState, action: PayloadAction<boolean>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    payoutAnalytics: {\n                        ...state.accountDetail.payoutAnalytics,\n                        loading: action.payload,\n                    },\n                },\n            });\n        },\n        setAccountPayoutAnalyticsData(state: AccountState, action: PayloadAction<AnalyticsPoint[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    payoutAnalytics: {\n                        ...state.accountDetail.payoutAnalytics,\n                        data: action.payload,\n                    },\n                },\n            });\n        },\n        setRequestorInvalidAnalyticsLoading(state: AccountState, action: PayloadAction<boolean>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    invalidRequestsAnalytics: {\n                        ...state.accountDetail.invalidRequestsAnalytics,\n                        loading: action.payload,\n                    },\n                },\n            });\n        },\n        setRequestorInvalidAnalyticsData(state: AccountState, action: PayloadAction<AnalyticsPoint[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    invalidRequestsAnalytics: {\n                        ...state.accountDetail.invalidRequestsAnalytics,\n                        data: action.payload,\n                    },\n                },\n            });\n        },\n    },\n});\n\nexport const {\n    setAccount,\n    setAccountErrors,\n    setAccountLoading,\n    setAccountDetail,\n    setAccountStakes,\n    setAccountStakesTotal,\n    setAccountInfo,\n    setAccountUnclaimedStakes,\n    setAccountRequests,\n    setAccountRequestsTotal,\n    setAccountPayoutAnalyticsData,\n    setAccountPayoutAnalyticsLoading,\n    setRequestorInvalidAnalyticsData,\n    setRequestorInvalidAnalyticsLoading,\n} = accountSlice.actions;\n\nexport default accountSlice.reducer;\n","import { DEFAULT_PAGINATION_LIMIT } from \"../../config\";\nimport { getAccountInfo } from \"../../services/AccountService\";\nimport { getAccountAnalytics, getRequestorInvalidRequestsAnalytics, Period } from \"../../services/AnalyticsService\";\nimport { getAllDataRequests } from \"../../services/DataRequestService\";\nimport { getAccountInfoWithProvider, getLoggedInAccount, loginWithProvider, logoutWithProvider } from \"../../services/providers/ProviderRegistry\";\nimport { getUnclaimedStakesByAccountId, getUserStakesByAccountId } from \"../../services/UserStakeService\";\nimport { setAccount, setAccountDetail, setAccountInfo, setAccountLoading, setAccountPayoutAnalyticsData, setAccountPayoutAnalyticsLoading, setAccountRequests, setAccountRequestsTotal, setAccountStakes, setAccountStakesTotal, setAccountUnclaimedStakes, setRequestorInvalidAnalyticsData, setRequestorInvalidAnalyticsLoading } from \"./account\";\n\nexport function loadLoggedInAccount() {\n    return async (dispatch: Function) => {\n        const account = await getLoggedInAccount();\n        if (!account) return;\n\n        dispatch(setAccount(account));\n    };\n}\n\nexport function loadAccount(providerId: string, accountId: string) {\n    return async (dispatch: Function) => {\n        const account = await getAccountInfoWithProvider(providerId, accountId);\n\n        if (!account) {\n            return;\n        }\n\n        const accountInfo = await getAccountInfo(accountId);\n        dispatch(setAccountDetail(account));\n        dispatch(setAccountInfo(accountInfo));\n    };\n}\n\n\nexport function loadAccountStakes(page: number, accountId: string) {\n    return async (dispatch: Function) => {\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const stakes = await getUserStakesByAccountId(accountId, {\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        });\n\n        dispatch(setAccountStakesTotal(stakes.total));\n        dispatch(setAccountStakes(stakes.items));\n    }\n}\n\nexport function loadAccountRequests(page: number, requestor: string) {\n    return async (dispatch: Function) => {\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const requests = await getAllDataRequests({\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        }, { requestor, onlyArbitratorRequests: false });\n\n        dispatch(setAccountRequests(requests.items));\n        dispatch(setAccountRequestsTotal(requests.total));\n    }\n}\n\nexport function loadUnclaimedAccountStakes(accountId: string) {\n    return async (dispatch: Function) => {\n        const stakes = await getUnclaimedStakesByAccountId(accountId);\n        dispatch(setAccountUnclaimedStakes(stakes));\n    }\n}\n\nexport function loginAccount() {\n    return async (dispatch: Function) => {\n        dispatch(setAccountLoading(true));\n\n        await loginWithProvider('near');\n\n        dispatch(setAccountLoading(false));\n    };\n}\n\nexport function logoutAccount() {\n    return async (dispatch: Function) => {\n        await logoutWithProvider('near');\n        dispatch(setAccount(undefined));\n    };\n}\n\nexport function loadAccountAnalytics(accountId: string, period: Period) {\n    return async (dispatch: Function) => {\n        dispatch(setAccountPayoutAnalyticsLoading(true));\n        const points = await getAccountAnalytics(accountId, period);\n\n        dispatch(setAccountPayoutAnalyticsData(points));\n        dispatch(setAccountPayoutAnalyticsLoading(false));\n    }\n}\n\nexport function loadRequestorInvalidAnalytics(accountId: string, period: Period) {\n    return async (dispatch: Function) => {\n        dispatch(setRequestorInvalidAnalyticsLoading(true));\n        const points = await getRequestorInvalidRequestsAnalytics(accountId, period);\n\n        dispatch(setRequestorInvalidAnalyticsData(points));\n        dispatch(setRequestorInvalidAnalyticsLoading(false));\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppConfig } from '../../models/AppConfig';\n\nexport type AppConfigState = Readonly<{\n    loading: boolean;\n    appConfig: AppConfig;\n}>;\n\nconst initialState: AppConfigState = {\n    loading: false,\n    appConfig: {\n        nativeTokenDecimals: 18,\n        nativeTokenSymbol: '?',\n        stakeTokenDecimals: 18,\n        stakeTokenSymbol: '?',\n        bondTokenDecimals: 18,\n        bondTokenSymbol: '?',\n    }\n};\n\nconst appConfigSlice = createSlice({\n    initialState,\n    name: 'appconfig',\n    reducers: {\n        setAppConfigLoading(state: AppConfigState, action: PayloadAction<AppConfigState['loading']>): AppConfigState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n\n        setAppConfig(state: AppConfigState, action: PayloadAction<AppConfigState['appConfig']>): AppConfigState {\n            return ({\n                ...state,\n                appConfig: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setAppConfig,\n    setAppConfigLoading,\n} = appConfigSlice.actions;\n\nexport default appConfigSlice.reducer;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Menu from '../../containers/Menu';\nimport { loadLoggedInAccount, loginAccount, logoutAccount } from '../../redux/account/accountActions';\nimport { loadAppConfig } from '../../redux/appconfig/appconfigActions';\nimport { setStorageManagerDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function MenuConnector() {\n    const dispatch = useDispatch();\n    const account = useSelector((store: Reducers) => store.account.account);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    const handleLoginClick = useCallback(() => {\n        dispatch(loginAccount());\n    }, [dispatch]);\n\n    const handleLogoutClick = useCallback(() => {\n        dispatch(logoutAccount());\n    }, [dispatch]);\n\n    const handleStorageManagerClick = useCallback(() => {\n        dispatch(setStorageManagerDialogOpen({\n            open: true,\n        }));\n    }, [dispatch]);\n\n    useEffect(() => {\n        dispatch(loadLoggedInAccount());\n        dispatch(loadAppConfig());\n    }, [dispatch]);\n\n    return (\n        <Menu\n            onLoginClick={handleLoginClick}\n            account={account}\n            appConfig={appConfig}\n            onLogoutClick={handleLogoutClick}\n            onStorageManagerClick={handleStorageManagerClick}\n        />\n    );\n}\n","import { getAppConfigForProvider } from \"../../services/providers/ProviderRegistry\";\nimport { setAppConfig, setAppConfigLoading } from \"./appconfig\";\n\nexport function loadAppConfig() {\n    return async (dispatch: Function) => {\n        dispatch(setAppConfigLoading(true));\n\n        const config = await getAppConfigForProvider('near');\n\n        dispatch(setAppConfig(config));\n        dispatch(setAppConfigLoading(false));\n    };\n}\n","import React from 'react';\n\nimport s from './Footer.module.scss';\n\n\nexport default function Footer() {\n    return (\n        <footer className={s.footer}>\n            <div className={s.footerWrapper}>\n                <div className={s.logo} />\n            </div>\n        </footer>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport MenuConnector from '../../connectors/MenuConnector';\nimport Footer from '../Footer';\n\nimport s from './Page.module.scss';\n\ninterface Props {\n    className?: string;\n    bodyClassName?: string;\n    hasNavigation?: boolean;\n}\n\nexport default function Page({\n    className,\n    children,\n    hasNavigation = true,\n}: PropsWithChildren<Props>) {\n    return (\n        <div className={s.page}>\n            <MenuConnector />\n            <main className={s.body}>\n                {children}\n            </main>\n            <Footer />\n        </div>\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport trans from '../../translation/trans';\n\nimport s from './Pagination.module.scss';\n\ninterface Props {\n    total: number;\n    page: number;\n    rowsPerPage: number;\n    onChangePage: (page: number) => void;\n    className?: string;\n}\n\nexport default function Pagination({\n    total,\n    page,\n    onChangePage,\n    rowsPerPage,\n    className\n}: Props) {\n    const handleFirstPageButtonClick = () => {\n        onChangePage(0);\n    };\n\n    const handleBackButtonClick = () => {\n        onChangePage(page - 1);\n    };\n\n    const handleNextButtonClick = () => {\n        onChangePage(page + 1);\n    };\n\n    const handleLastPageButtonClick = () => {\n        onChangePage(total);\n    };\n\n    return (\n        <div className={classnames(s.pagination, className)}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                <FirstPageIcon />\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                <KeyboardArrowLeft />\n            </IconButton>\n            <span>\n                {trans('pagination.pageIndication', {\n                    currentPage: (page + 1).toString(),\n                    totalPages: (total + 1).toString(),\n                })}\n            </span>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page === total || total <= 0}\n                aria-label=\"next page\"\n            >\n                <KeyboardArrowRight />\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page === total || total <= 0}\n                aria-label=\"last page\"\n            >\n                <LastPageIcon />\n            </IconButton>\n        </div>\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\nimport Pagination from '../Pagination/Pagination';\nimport { OutcomeStake } from '../../models/OutcomeStake';\n\nimport s from './OutcomeStakesOverview.module.scss';\nimport { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport trans from '../../translation/trans';\nimport { routePaths } from '../../routes';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport { formatToken } from '../../utils/tokenUtils';\n\ninterface Props {\n    outcomeStakes: OutcomeStake[];\n    page: number;\n    totalItems: number;\n    onRequestPageChange: (page: number) => void;\n    showPagination?: boolean;\n}\n\nexport default function OutcomeStakesOverview({\n    onRequestPageChange,\n    outcomeStakes = [],\n    page,\n    totalItems,\n    showPagination = true,\n}: Props) {\n    return (\n        <div>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.id')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.roud')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.finalizedOutcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.stake')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {outcomeStakes.map((stake) => (\n                            <TableRow key={`${stake.dataRequestId}_${stake.round}_${transfromOutcomeToString(stake.outcome)}`}>\n                                <TableCell className={s.linkCell}>\n                                    <Link to={routePaths.dataRequestDetail('near', stake.dataRequestId)}>\n                                        #{stake.dataRequestId}\n                                    </Link>\n                                </TableCell>\n                                <TableCell>\n                                    {stake.round}\n                                </TableCell>\n                                <TableCell>\n                                    {transfromOutcomeToString(stake.outcome)}\n                                </TableCell>\n                                <TableCell>\n                                    {stake.finalizedOutcome ? transfromOutcomeToString(stake.finalizedOutcome) : null}\n                                </TableCell>\n                                <TableCell>\n                                    {formatToken(stake.stake, stake.stakeToken.decimals)} {stake.stakeToken.symbol}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {outcomeStakes.length === 0 && (\n                <div className={s.empty}>\n                    {trans('global.empty.entries')}\n                </div>\n            )}\n\n            {showPagination && (\n                <Pagination\n                    className={s.pagination}\n                    total={Math.ceil(totalItems / DEFAULT_PAGINATION_LIMIT) - 1}\n                    page={page}\n                    rowsPerPage={DEFAULT_PAGINATION_LIMIT}\n                    onChangePage={onRequestPageChange}\n                />\n            )}\n        </div>\n    );\n}\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport OutcomeStakesOverview from '../../containers/OutcomeStakesOverview';\nimport { loadAccountStakes } from '../../redux/account/accountActions';\nimport { Reducers } from '../../redux/reducers';\n\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountOutcomeStakesConnector() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n    const stakes = useSelector((store: Reducers) => store.account.accountDetail.accountStakes);\n    const total = useSelector((store: Reducers) => store.account.accountDetail.accountStakesTotal);\n    const [page, setPage] = useState(0);\n\n    const handleRequestPageChange = useCallback((newPage: number) => {\n        dispatch(loadAccountStakes(newPage, params.accountId));\n        setPage(newPage);\n    }, [dispatch, params]);\n\n    return (\n        <OutcomeStakesOverview\n            onRequestPageChange={handleRequestPageChange}\n            outcomeStakes={stakes}\n            totalItems={total}\n            page={page}\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountOutcomeStakesConnector from '../../../../connectors/AccountOutcomeStakesConnector';\nimport { loadAccountStakes } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountStakesPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadAccountStakes(0, params.accountId));\n    }, [dispatch, params]);\n\n    return (\n        <div>\n            <AccountOutcomeStakesConnector />\n        </div>\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\n\nimport { DataRequestListItem, getDataRequestTypeTranslation } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\nimport { routePaths } from '../../routes';\nimport Pagination from '../Pagination/Pagination';\n\nimport s from './DataRequestsOverview.module.scss';\nimport { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport { prettyFormatDate } from '../../utils/dateUtils';\n\ninterface Props {\n    dataRequests: DataRequestListItem[];\n    page: number;\n    totalItems: number;\n    showPagination?: boolean;\n    onRequestPageChange: (page: number) => void;\n}\n\nexport default function DataRequestsOverview({\n    dataRequests,\n    page,\n    totalItems,\n    showPagination = true,\n    onRequestPageChange,\n}: Props) {\n    return (\n        <div className={s.root}>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('dataRequestsOverview.table.label.id')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.type')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.status')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.timestamp')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {dataRequests.map((request) => (\n                            <TableRow key={request.id}>\n                                <TableCell className={s.linkCell}>\n                                    <Link to={routePaths.dataRequestDetail('near', request.id)}>\n                                        #{request.id}\n                                    </Link>\n                                </TableCell>\n                                <TableCell>\n                                    {getDataRequestTypeTranslation(request.type)}\n                                </TableCell>\n                                <TableCell>\n                                    {request.finalized_outcome && (\n                                        <span>{trans('global.status.completed')}</span>\n                                    )}\n\n                                    {!request.finalized_outcome && (\n                                        <span>{trans('global.status.ongoing')}</span>\n                                    )}\n                                </TableCell>\n                                <TableCell>\n                                    {prettyFormatDate(request.date)}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            {dataRequests.length === 0 && (\n                <div className={s.noRequests}>{trans('global.empty.noRequests')}</div>\n            )}\n            {showPagination && (\n                <Pagination\n                    className={s.pagination}\n                    total={Math.ceil(totalItems / DEFAULT_PAGINATION_LIMIT) - 1}\n                    page={page}\n                    rowsPerPage={DEFAULT_PAGINATION_LIMIT}\n                    onChangePage={onRequestPageChange}\n                />\n            )}\n        </div>\n    );\n}\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { loadAccountRequests } from '../../redux/account/accountActions';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountRequestsConnector() {\n    const [page, setPage] = useState(0);\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n    const dataRequests = useSelector((store: Reducers) => store.account.accountDetail.accountRequests);\n    const dataRequestsTotal = useSelector((store: Reducers) => store.account.accountDetail.accountRequestsTotal);\n\n    const handleRequestPageChange = useCallback((newPage: number) => {\n        dispatch(loadAccountRequests(newPage, params.accountId));\n        setPage(newPage);\n    }, [dispatch, params]);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={dataRequests}\n            onRequestPageChange={handleRequestPageChange}\n            page={page}\n            totalItems={dataRequestsTotal}\n            showPagination\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountRequestsConnector from '../../../../connectors/AccountRequestsConnector';\nimport { loadAccountRequests } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountRequestsPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadAccountRequests(0, params.accountId));\n    }, [dispatch, params.accountId]);\n\n    return (\n        <div>\n            <AccountRequestsConnector />\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OutcomeStakesOverview from '../../containers/OutcomeStakesOverview';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function AccountUnclaimedStakesConnector() {\n    const unclaimedStakes = useSelector((store: Reducers) => store.account.accountDetail.unclaimedStakes);\n\n    return (\n        <OutcomeStakesOverview\n            totalItems={0}\n            page={0}\n            onRequestPageChange={() => {}}\n            outcomeStakes={unclaimedStakes}\n            showPagination={false}\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountUnclaimedStakesConnector from '../../../../connectors/AccountUnclaimedStakesConnector';\nimport { loadUnclaimedAccountStakes } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountUnclaimedPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadUnclaimedAccountStakes(params.accountId));\n    }, [dispatch, params]);\n\n    return (\n        <div>\n            <AccountUnclaimedStakesConnector />\n        </div>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport { useCallback } from 'react';\n\nimport s from './ExternalLink.module.scss';\n\ninterface Props {\n    href: string;\n}\n\nexport default function ExternalLink({\n    children,\n    href,\n}: PropsWithChildren<Props>) {\n    const onClick = useCallback((event) => {\n        event.preventDefault();\n        window.open(href, '_blank');\n    }, [href]);\n\n    return (\n        <a href={href} className={s.link} onClick={onClick}>{children}</a>\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\n\nimport s from './WhitelistInfoCard.module.scss';\nimport trans, { booleanToYesNo } from '../../translation/trans';\nimport InformationRows from '../InformationRows';\nimport { WhitelistItemViewModel } from '../../models/WhitelistItem';\nimport { InformationRow } from '../InformationRows/InformationRows';\nimport { formatToken } from '../../utils/tokenUtils';\nimport ExternalLink from '../../components/ExternalLink';\nimport { AppConfig } from '../../models/AppConfig';\n\ninterface Props {\n    whitelist: WhitelistItemViewModel;\n    appConfig: AppConfig;\n}\n\nexport default function WhitelistInfoCard({\n    whitelist,\n    appConfig,\n}: Props) {\n    const rows: InformationRow[] = [\n        {\n            label: trans('whitelistInfoCard.label.interfaceName'),\n            value: <span>{whitelist.interfaceName}</span>,\n        },\n        {\n            label: trans('whitelistInfoCard.label.codeBaseUrl'),\n            value: <ExternalLink href={whitelist.codeBaseUrl}>{whitelist.codeBaseUrl}</ExternalLink>,\n        },\n        {\n            label: trans('whitelistInfoCard.label.active'),\n            value: <span>{booleanToYesNo(whitelist.active)}</span>,\n        }\n    ];\n\n    if (whitelist.customFee) {\n        if (whitelist.customFee.type === 'fixed') {\n            rows.push({\n                label: trans('whitelistInfoCard.label.fixedFee'),\n                value: <span>{formatToken(whitelist.customFee.fee, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>\n            });\n        } else if (whitelist.customFee.type === 'multiplier') {\n            rows.push({\n                label: trans('whitelistInfoCard.label.stakeMultiplier'),\n                value: <span>{whitelist.customFee.multiplier}x</span>\n            });\n        }\n    }\n\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('whitelistInfoCard.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={rows}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport WhitelistInfoCard from '../../containers/WhitelistInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function WhitelistInfoCardConnector() {\n    const whitelist = useSelector((store: Reducers) => store.account.accountDetail.info.whitelistItem);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    if (!whitelist) {\n        return null;\n    }\n\n    return (\n        <WhitelistInfoCard\n            whitelist={whitelist}\n            appConfig={appConfig}\n        />\n    );\n}\n","import React, { ReactElement } from 'react';\nimport classnames from 'classnames';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport { default as MuiToggleButton } from '@material-ui/lab/ToggleButton';\n\nimport s from './ToggleButtons.module.scss';\n\ninterface Props {\n    items: {\n        text: string,\n        id: string,\n    }[],\n    value: string;\n    exclusive?: boolean;\n    className?: string;\n    buttonClassName?: string;\n    selectedClassName?: string;\n    onChange: (value: any) => void;\n}\n\nexport default function ToggleButtons({\n    items,\n    value,\n    onChange,\n    exclusive,\n    selectedClassName = '',\n    buttonClassName = '',\n    className = '',\n}: Props): ReactElement {\n    return (\n        <ToggleButtonGroup className={className} exclusive={exclusive} value={value} onChange={(_, v) => onChange(v)}>\n            {items.map((item) => (\n                <MuiToggleButton\n                    key={item.id}\n                    className={classnames(s.button, buttonClassName)}\n                    classes={{\n                        selected: selectedClassName || s.selected,\n                    }}\n                    value={item.id}\n                >\n                    {item.text}\n                </MuiToggleButton>\n            ))}\n        </ToggleButtonGroup>\n    );\n}\n","import { ChartConfiguration } from 'chart.js'\nimport Chart from 'chart.js/auto';\nimport { ChartItem } from '../ChartItem';\n\nfunction createChartDatasets(chartItems: ChartItem[]) {\n    return chartItems.map((chartItem) => ({\n        label: chartItem.label,\n        data: chartItem.points,\n        borderColor: chartItem.lineColor,\n        backgroundColor: chartItem.lineColor,\n        pointBorderWidth: '0',\n        fill: chartItem.fill,\n    }));\n}\n\nexport function updateLineChart(chart: Chart, labels: string[], chartItems: ChartItem[]) {\n    chart.data.labels = labels;\n    chart.data.datasets = createChartDatasets(chartItems);\n\n    Chart.defaults.plugins.tooltip.callbacks.label = (context) => {\n        const label = context.dataset.label ?? '';\n        const afterTextLabel = chartItems[context.datasetIndex]?.afterText ?? '';\n        return `${label}: ${context.parsed.y} ${afterTextLabel}`;\n    }\n\n    chart.update();\n}\n\nexport default function generateLineChart(canvas: HTMLCanvasElement, labels: string[], chartItems: ChartItem[]): Chart | null {\n    const context = canvas.getContext('2d');\n    if (!context) return null;\n\n    Chart.defaults.plugins.tooltip.mode = 'index';\n    Chart.defaults.plugins.tooltip.intersect = false;\n    Chart.defaults.plugins.tooltip.callbacks.label = (context) => {\n        const label = context.dataset.label ?? '';\n        const afterTextLabel = chartItems[context.datasetIndex]?.afterText ?? '';\n        return `${label} ${context.parsed.y} ${afterTextLabel}`;\n    }\n\n    const chartConfig: ChartConfiguration = {\n        type: 'line',\n        options: {\n            responsive: true,\n            animation: {\n                duration: 0,\n            },\n        },\n        data: {\n            labels,\n            datasets: createChartDatasets(chartItems),\n\n            // [{\n            //     label: 'payout',\n            //     data: [1, 8, 10],\n            //     barThickness: 1,\n            //     showLine: true,\n            //     fill: true,\n            //     borderColor: '#f1f244',\n            //     backgroundColor: '#f1f244',\n            // }, {\n            //     label: 'payout in usd',\n            //     data: [10, 80, 100],\n            // }],\n        },\n    };\n\n    return new Chart(context, chartConfig);\n}\n","import { Chart } from 'chart.js';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport ToggleButtons from '../../components/ToggleButtons';\nimport { Period } from '../../services/AnalyticsService';\nimport trans from '../../translation/trans';\nimport { ChartItem } from './ChartItem';\nimport generateLineChart, { updateLineChart } from './utils/generateLineChart';\n\ninterface Props {\n    items: ChartItem[];\n    labels: string[];\n    period: Period;\n    onPeriodChange?: (period: Period) => void;\n}\n\nexport default function LineChart({\n    items,\n    labels,\n    period,\n    onPeriodChange = () => {},\n}: Props) {\n    const canvas = useRef<HTMLCanvasElement>(null);\n    const chart = useRef<Chart | null>(null);\n\n    useEffect(() => {\n        if (!canvas.current) return;\n\n        if (!chart.current) {\n            chart.current = generateLineChart(canvas.current, labels, items);\n        } else {\n            updateLineChart(chart.current, labels, items);\n        }\n\n    }, [items, labels, canvas, chart]);\n\n    const handlePeriodChange = useCallback((value: Period | null) => {\n        if (!value) return;\n        onPeriodChange(value);\n    }, [onPeriodChange]);\n\n    return (\n        <div>\n            <canvas ref={canvas} />\n            <ToggleButtons\n                exclusive\n                value={period}\n                onChange={handlePeriodChange}\n                items={[\n                    {\n                        id: Period.OneDay,\n                        text: trans('lineChart.labels.1d'),\n                    },\n                    {\n                        id: Period.OneWeek,\n                        text: trans('lineChart.labels.1w'),\n                    },\n                    {\n                        id: Period.ThreeWeeks,\n                        text: trans('lineChart.labels.3w'),\n                    },\n                    {\n                        id: Period.OneMonth,\n                        text: trans('lineChart.labels.1m'),\n                    },\n                    {\n                        id: Period.OneYear,\n                        text: trans('lineChart.labels.1y'),\n                    },\n                    {\n                        id: Period.All,\n                        text: trans('lineChart.labels.all'),\n                    }\n                ]}\n            />\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport LineChart from '../../containers/LineChart';\nimport { loadAccountAnalytics } from '../../redux/account/accountActions';\nimport { Reducers } from '../../redux/reducers';\nimport { Period } from '../../services/AnalyticsService';\nimport trans from '../../translation/trans';\nimport { formatToken } from '../../utils/tokenUtils';\n\ninterface Params {\n    accountId: string;\n    provider: string;\n}\n\nexport default function AccountAnalyticsConnector() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n    const [period, setPeriod] = useState(Period.OneMonth);\n    const payoutPoints = useSelector((store: Reducers) => store.account.accountDetail.payoutAnalytics.data);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    useEffect(() => {\n        dispatch(loadAccountAnalytics(params.accountId, period));\n    }, [params.accountId, period, dispatch]);\n\n    const handlePeriodChange = useCallback((newPeriod) => {\n        setPeriod(newPeriod);\n    }, []);\n\n    return (\n        <LineChart\n            period={period}\n            labels={payoutPoints.map(point => point.key)}\n            onPeriodChange={handlePeriodChange}\n            items={[\n                {\n                    label: trans('accountAnalytics.labels.feePayout'),\n                    points: payoutPoints.map(point => Number(formatToken(point.data[1], appConfig.bondTokenDecimals, 4))),\n                    afterText: appConfig.bondTokenSymbol,\n                    lineColor: '#252525',\n                    fill: false,\n                },\n                {\n                    label: trans('accountAnalytics.labels.stakePayout'),\n                    points: payoutPoints.map(point => Number(formatToken(point.data[0], appConfig.stakeTokenDecimals, 4))),\n                    afterText: appConfig.stakeTokenSymbol,\n                    lineColor: '#9ec8f1',\n                    fill: true,\n                },\n            ]}\n        />\n    );\n}\n","import React from 'react';\nimport AccountAnalyticsConnector from '../../../../connectors/AccountAnalyticsConnector';\n\n\nexport default function AccountAnalyticsPage() {\n    return (\n        <div>\n            <AccountAnalyticsConnector />\n        </div>\n    )\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport LineChart from '../../containers/LineChart';\nimport { loadRequestorInvalidAnalytics } from '../../redux/account/accountActions';\nimport { Reducers } from '../../redux/reducers';\nimport { Period } from '../../services/AnalyticsService';\nimport trans from '../../translation/trans';\n\ninterface Params {\n    accountId: string;\n    provider: string;\n}\n\nexport default function RequestorAnalyticsConnector() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n    const [period, setPeriod] = useState(Period.OneMonth);\n    const dataPoints = useSelector((store: Reducers) => store.account.accountDetail.invalidRequestsAnalytics.data);\n\n    useEffect(() => {\n        dispatch(loadRequestorInvalidAnalytics(params.accountId, period));\n    }, [params.accountId, period, dispatch]);\n\n    const handlePeriodChange = useCallback((newPeriod) => {\n        setPeriod(newPeriod);\n    }, []);\n\n    return (\n        <LineChart\n            period={period}\n            labels={dataPoints.map(point => point.key)}\n            onPeriodChange={handlePeriodChange}\n            items={[\n                {\n                    label: trans('requestorAnalytics.labels.invalidRequests'),\n                    points: dataPoints.map(point => Number(point.data[0])),\n                    lineColor: '#9ec8f1',\n                    fill: true,\n                },\n            ]}\n        />\n    );\n}\n","import React from 'react';\nimport RequestorAnalyticsConnector from '../../../../connectors/RequestorAnalyticsConnector';\n\n\nexport default function AccountRequestorAnalyticsPage() {\n    return (\n        <div>\n            <RequestorAnalyticsConnector />\n        </div>\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport trans from '../../translation/trans';\n\nimport s from './OracleConfigInfoCard.module.scss';\nimport InformationRows from '../InformationRows';\nimport { OracleConfig } from '../../models/OracleConfig';\nimport { formatTimeToReadable, prettyFormatDate } from '../../utils/dateUtils';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { prettyFormatNumber } from '../../utils/prettyFormatNumber';\n\ninterface Props {\n    oracleConfig: OracleConfig;\n}\n\nexport default function OracleConfigInfoCard({\n    oracleConfig,\n}: Props) {\n    const minInitialChallengeWindowDuration = formatTimeToReadable(Number(oracleConfig.minInitialChallengeWindowDuration), 'ns');\n    const defaultChallengeWindowDuration = formatTimeToReadable(Number(oracleConfig.defaultChallengeWindowDuration), 'ns');\n\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('oracleConfigInfoCard.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[{\n                        label: trans('oracleConfigInfoCard.label.createdAt'),\n                        value: <span>{prettyFormatDate(oracleConfig.date)}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.gov'),\n                        value: <span>{oracleConfig.gov}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.bondToken'),\n                        value: <span>{oracleConfig.bondToken.contractId}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.stakeToken'),\n                        value: <span>{oracleConfig.stakeToken.contractId}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.finalArbitrator'),\n                        value: <span>{oracleConfig.finalArbitrator}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.finalArbitratorInvokeAmount'),\n                        value: <span>{formatToken(oracleConfig.finalArbitratorInvokeAmount, oracleConfig.stakeToken.decimals, 2)} {oracleConfig.stakeToken.symbol}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.resolutionFeePercentage'),\n                        value: <span>{oracleConfig.resolutionFeePercentage / 1000}%</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.fluxMarketCap'),\n                        value: <span>${prettyFormatNumber(formatToken(oracleConfig.fluxMarketCap, 2, 2))}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.totalValueStaked'),\n                        value: <span>{oracleConfig.totalValueStaked}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.maxOutcomes'),\n                        value: <span>{oracleConfig.maxOutcomes}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.minInitialChallengeWindowDuration'),\n                        value: <span>\n                            {trans('global.date.smallFormat', {\n                                days: minInitialChallengeWindowDuration.days.toString(),\n                                hours: minInitialChallengeWindowDuration.hours.toString(),\n                                minutes: minInitialChallengeWindowDuration.minutes.toString(),\n                                seconds: minInitialChallengeWindowDuration.seconds.toString(),\n                            })} / {oracleConfig.minInitialChallengeWindowDuration} ns\n                        </span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.defaultChallengeWindowDuration'),\n                        value: <span>{\n                            trans('global.date.smallFormat', {\n                                days: defaultChallengeWindowDuration.days.toString(),\n                                hours: defaultChallengeWindowDuration.hours.toString(),\n                                minutes: defaultChallengeWindowDuration.minutes.toString(),\n                                seconds: defaultChallengeWindowDuration.seconds.toString(),\n                            })} / {oracleConfig.defaultChallengeWindowDuration} ns\n                        </span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.validityBond'),\n                        value: <span>{formatToken(oracleConfig.validityBond, oracleConfig.bondToken.decimals, 2)} {oracleConfig.bondToken.symbol}</span>\n                    },]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","export function prettyFormatNumber(num: string): string {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OracleConfigInfoCard from '../../containers/OracleConfigInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function OracleConfigInfoCardConnector() {\n    const oracleConfig = useSelector((store: Reducers) => store.oracleConfig.detail);\n\n    if (!oracleConfig) {\n        return null;\n    }\n\n    return (\n        <OracleConfigInfoCard\n            oracleConfig={oracleConfig}\n        />\n    );\n}\n","import gql from \"graphql-tag\";\nimport { OracleConfig, transformToOracleConfig } from \"../models/OracleConfig\";\nimport { graphqlClient } from \"./GraphQLService\";\n\nexport async function getOracleConfigById(id: string): Promise<OracleConfig | undefined> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                query GetOracleConfig($id: String!) {\n                    config: getOracleConfig(id: $id) {\n                        block_height\n                        payment_token\n                        date\n                        default_challenge_window_duration\n                        final_arbitrator\n                        final_arbitrator_invoke_amount\n                        gov\n                        id\n                        max_outcomes\n                        min_initial_challenge_window_duration\n                        resolution_fee_percentage\n                        stake_token\n                        validity_bond\n                        fee {\n                            flux_market_cap\n                            resolution_fee_percentage\n                            total_value_staked\n                        }\n                    }\n                }\n            `,\n            variables: {\n                id,\n            }\n        });\n\n        return transformToOracleConfig(response.data.config);\n    } catch (error) {\n        console.error('[getOracleConfig]', error);\n        return undefined;\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { OracleConfig } from '../../models/OracleConfig';\n\nexport type OracleConfigState = Readonly<{\n    detail?: OracleConfig;\n    loading: boolean;\n}>;\n\nconst initialState: OracleConfigState = {\n    loading: false,\n};\n\nconst oracleConfigSlice = createSlice({\n    initialState,\n    name: 'oracleConfig',\n    reducers: {\n        setOracleConfigDetail(state: OracleConfigState, action: PayloadAction<OracleConfig | undefined>): OracleConfigState {\n            return ({\n                ...state,\n                detail: action.payload,\n            });\n        },\n\n        setOracleConfigLoading(state: OracleConfigState, action: PayloadAction<boolean>): OracleConfigState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setOracleConfigDetail,\n    setOracleConfigLoading,\n} = oracleConfigSlice.actions;\n\nexport default oracleConfigSlice.reducer;\n","import React, { PropsWithChildren } from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Card from '../../components/Card';\nimport trans from '../../translation/trans';\n\nimport s from './AccountStakesInfoCard.module.scss';\nimport { ClaimViewModel } from '../../models/Claim';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { isSameOutcome, Outcome, OutcomeType } from '../../models/DataRequestOutcome';\nimport { TokenViewModel } from '../../models/Token';\nimport { UserStakeViewModel } from '../../models/UserStakes';\nimport Big from 'big.js';\n\ninterface Props {\n    claim?: ClaimViewModel;\n    accountStakes: UserStakeViewModel[];\n    finalizedOutcome?: Outcome;\n    finalizedRound?: number;\n    stakeToken: TokenViewModel;\n}\n\nfunction EmptyDiv(props: PropsWithChildren<{}>) {\n    return <div>{props.children}</div>\n}\n\nexport default function AccountStakesInfoCard({\n    claim,\n    accountStakes,\n    finalizedRound,\n    finalizedOutcome,\n    stakeToken,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('accountStakesInfoCard.title')}</h2>\n                </div>\n\n                {claim && (\n                    <div className={s.claim}>\n                        {trans('dataRequestDetail.label.claimed', {\n                            payout: formatToken(claim.payout, stakeToken.decimals),\n                            userCorrectStake: formatToken(claim.userCorrectStake, stakeToken.decimals),\n                            tokenSymbol: stakeToken.symbol,\n                        })}\n                    </div>\n                )}\n\n                {finalizedOutcome && !claim && (\n                    <div className={s.claim}>\n                        {trans('dataRequestDetail.description.unclaimed')}\n                    </div>\n                )}\n\n                {accountStakes.length > 0 && (\n                    <TableContainer className={s.container} component={EmptyDiv}>\n                        <Table className={s.table}>\n                            <TableHead className={s.tableHead}>\n                                <TableRow>\n                                    <TableCell>{trans('outcomeStakeInfo.table.label.round')}</TableCell>\n                                    <TableCell>{trans('outcomeStakeInfo.table.label.outcome')}</TableCell>\n                                    <TableCell>{trans('outcomeStakeInfo.table.label.stake')}</TableCell>\n                                    {finalizedOutcome && <TableCell>{trans('outcomeStakeInfo.table.label.correcltyStaked')}</TableCell>}\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {accountStakes.map((stakeInfo, index) => {\n                                    if (new Big(stakeInfo.totalStake).lte(0)) {\n                                        return null;\n                                    }\n\n                                    return (\n                                        <TableRow key={index}>\n                                            <TableCell>\n                                                {stakeInfo.round}\n                                            </TableCell>\n                                            <TableCell>\n                                                {stakeInfo.outcome.type === OutcomeType.Answer && (\n                                                    <span>\"{stakeInfo.outcome.answer}\"</span>\n                                                )}\n\n                                                {stakeInfo.outcome.type === OutcomeType.Invalid && (\n                                                    <span>{trans('outcomeStakeInfo.label.invalid')}</span>\n                                                )}\n                                            </TableCell>\n                                            <TableCell>\n                                                {formatToken(stakeInfo.totalStake, stakeToken.decimals)} {stakeToken.symbol}\n                                            </TableCell>\n\n                                            {finalizedOutcome && typeof finalizedRound !== 'undefined' && (\n                                                <TableCell>\n                                                    {stakeInfo.bonded && isSameOutcome(finalizedOutcome, stakeInfo.outcome) && trans('outcomeStakeInfo.label.correct')}\n                                                    {stakeInfo.bonded && !isSameOutcome(finalizedOutcome, stakeInfo.outcome) && trans('outcomeStakeInfo.label.incorrect')}\n                                                    {!stakeInfo.bonded && trans('outcomeStakeInfo.label.unbonded')}\n                                                </TableCell>\n                                            )}\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                )}\n\n                {accountStakes.length === 0 && (\n                    <div className={s.noStakes}>\n                        {trans('accountStakesInfoCard.noStakes')}\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport AccountStakesInfoCard from '../../containers/AccountStakesInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function AccountStakesInfoCardConnector() {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n    const finalizedOutcome = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail?.finalized_outcome);\n    const resolutionWindows = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail?.resolutionWindows) ?? [];\n\n    let finalizedRound: number | undefined = undefined;\n\n    if (finalizedOutcome) {\n        // -2 because the last round is always an open window\n        finalizedRound = resolutionWindows[resolutionWindows.length - 2].round;\n    }\n\n    if (!dataRequest) return null;\n\n    return (\n        <AccountStakesInfoCard\n            accountStakes={dataRequest.loggedInAccountStakes}\n            claim={dataRequest.loggedInAccountClaim}\n            finalizedOutcome={finalizedOutcome}\n            finalizedRound={finalizedRound}\n            stakeToken={dataRequest.stakeToken}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\n\nimport s from './CallDataInfoCard.module.scss';\nimport LabeledText from '../../compositions/LabeledText';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function CallDataInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('callDataInfo.title')}</h2>\n                </div>\n\n                {dataRequest.description && (\n                    <LabeledText label={trans('callDataInfo.description')} className={s.label}>{dataRequest.description}</LabeledText>\n                )}\n\n                {dataRequest.sources.length > 0 && (\n                    <table className={s.table}>\n                        <thead>\n                            <tr className={s.tableHeadRow}>\n                                <th>{trans('callDataInfo.label.endPoint')}</th>\n                                <th>{trans('callDataInfo.label.sourcePath')}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {dataRequest.sources.map(source => (\n                                <tr key={`${source.endPoint}_${source.sourcePath}`}>\n                                    <td className={s.tableItem}>\n                                        <span className={s.tableItemInner}>{source.endPoint}</span>\n                                    </td>\n                                    <td className={s.tableItem}><pre>{source.sourcePath}</pre></td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n\n                {dataRequest.outcomes?.length && (\n                    <>\n                        <LabeledText label={trans('callDataInfo.outcomes.title')} />\n                        <pre className={s.possibleOutcomes}>\n                            {JSON.stringify(dataRequest.outcomes, null, 4)}\n                        </pre>\n                    </>\n                )}\n\n                <LabeledText label={trans('callDataInfo.dataType')} className={s.label}>{dataRequest.data_type}</LabeledText>\n\n                {dataRequest.data_type === \"Number\" && (\n                    <LabeledText label={trans('callDataInfo.numberMultiplier')} className={s.label}>{dataRequest.number_multiplier}</LabeledText>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport CallDataInfoCard from '../../containers/CallDataInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function CallDataInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <CallDataInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import React from 'react';\nimport { default as ReactCountdown } from 'react-countdown';\n\ninterface Props {\n    date: Date;\n    onComplete: () => void;\n}\n\nexport default function Countdown({\n    date,\n    onComplete,\n}: Props) {\n    return (\n        <ReactCountdown date={date} onComplete={onComplete} />\n    );\n}\n","import Big from 'big.js';\nimport React, { useCallback, useState } from 'react';\nimport Button from '../../components/Button';\nimport Countdown from '../../compositions/Countdown';\nimport { Account } from '../../models/Account';\nimport { canDataRequestBeFinalized, DataRequestViewModel } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport trans from '../../translation/trans';\n\nimport s from './DataRequestDetailHeader.module.scss';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    onStakeClick: () => void;\n    onUnstakeClick: () => void;\n    onClaimClick: () => void;\n    onFinalizeClick: () => void;\n    account?: Account;\n    accountStakes: OutcomeStake[];\n}\n\nexport default function DataRequestDetailHeader({\n    dataRequest,\n    onStakeClick,\n    onClaimClick,\n    onUnstakeClick,\n    onFinalizeClick,\n    account,\n    accountStakes,\n}: Props) {\n    const now = new Date();\n    const [canInteract, setInteract] = useState(dataRequest.settlementTime.getTime() <= now.getTime());\n    const isFinalized = typeof dataRequest.finalized_outcome !== 'undefined';\n    const canFinalize = canDataRequestBeFinalized(dataRequest);\n    const hasClaimed = Boolean(dataRequest.loggedInAccountClaim?.payout);\n    const canUnstake = dataRequest.loggedInAccountStakes.some(stake => !stake.bonded && new Big(stake.totalStake).gt(0));\n\n    const onCountdownComplete = useCallback(() => {\n        setInteract(true);\n    }, []);\n\n    return (\n        <header className={s.header}>\n            <h1>{trans('dataRequestDetail.title', { id: dataRequest.id })}</h1>\n            <div className={s.actions}>\n                {!canInteract && (\n                    <span>\n                        {trans('dataRequestDetail.canBeResolvedIn')}\n                        <Countdown\n                            date={dataRequest.settlementTime}\n                            onComplete={onCountdownComplete}\n                        />\n                    </span>\n                )}\n\n                {canInteract && !dataRequest.finalArbitratorTriggered && account && !isFinalized && (\n                    <Button className={s.button} onClick={onStakeClick}>\n                        {trans('dataRequestDetail.label.stake')}\n                    </Button>\n                )}\n\n                {canInteract && account && canUnstake && (\n                    <Button className={s.button} onClick={onUnstakeClick}>\n                        {trans('dataRequestDetail.label.unstake')}\n                    </Button>\n                )}\n\n                {canInteract && account && canFinalize && (\n                    <Button className={s.button} onClick={onFinalizeClick}>\n                        {trans('dataRequestDetail.label.finalize')}\n                    </Button>\n                )}\n\n                {canInteract && account && !hasClaimed && accountStakes.length > 0 && isFinalized && (\n                    <Button className={s.button} onClick={onClaimClick}>\n                        {trans('dataRequestDetail.label.claim')}\n                    </Button>\n                )}\n\n                {!isFinalized && dataRequest.finalArbitratorTriggered && (\n                    <span>{trans('dataRequestDetail.label.finalArbitratorTriggered')}</span>\n                )}\n            </div>\n        </header>\n    );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { DataRequestListItem, DataRequestViewModel } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\nexport type DataRequestsState = Readonly<{\n    dataRequests: DataRequestListItem[];\n    dataRequestFilters: DataRequestFilters;\n    totalDataRequests: number;\n    error?: string[];\n    detailLoading: boolean;\n    loading: boolean;\n    dataRequestDetail?: DataRequestViewModel;\n    accountStakes: OutcomeStake[];\n}>;\n\nconst initialState: DataRequestsState = {\n    detailLoading: false,\n    loading: false,\n    dataRequests: [],\n    totalDataRequests: 0,\n    accountStakes: [],\n    dataRequestFilters: {\n        onlyArbitratorRequests: false,\n    }\n};\n\nconst dataRequestsSlice = createSlice({\n    initialState,\n    name: 'dataRequests',\n    reducers: {\n        setDataRequestsErrors(state: DataRequestsState, action: PayloadAction<string[]>): DataRequestsState {\n            return ({\n                ...state,\n                error: action.payload,\n            });\n        },\n        setDataRequestsLoading(state: DataRequestsState, action: PayloadAction<boolean>): DataRequestsState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n        setDataRequestDetailLoading(state: DataRequestsState, action: PayloadAction<boolean>): DataRequestsState {\n            return ({\n                ...state,\n                detailLoading: action.payload,\n            });\n        },\n        setDataRequests(state: DataRequestsState, action: PayloadAction<DataRequestListItem[]>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequests: action.payload,\n            });\n        },\n        setDataRequestDetail(state: DataRequestsState, action: PayloadAction<DataRequestViewModel | undefined>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequestDetail: action.payload,\n            });\n        },\n        setTotalDataRequest(state: DataRequestsState, action: PayloadAction<number>): DataRequestsState {\n            return ({\n                ...state,\n                totalDataRequests: action.payload,\n            });\n        },\n        setDataRequestAccountStakes(state: DataRequestsState, action: PayloadAction<OutcomeStake[]>): DataRequestsState {\n            return ({\n                ...state,\n                accountStakes: action.payload,\n            });\n        },\n        setDataRequestFilters(state: DataRequestsState, action: PayloadAction<DataRequestFilters>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequestFilters: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setDataRequests,\n    setDataRequestsErrors,\n    setDataRequestsLoading,\n    setDataRequestDetail,\n    setDataRequestDetailLoading,\n    setTotalDataRequest,\n    setDataRequestAccountStakes,\n    setDataRequestFilters,\n} = dataRequestsSlice.actions;\n\nexport default dataRequestsSlice.reducer;\n","import { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport { StakeFormValues } from '../../containers/StakeDialog/services/createDefaultStakeFormValues';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport { Outcome, OutcomeType } from '../../models/DataRequestOutcome';\nimport { combineOutcomeStakes, OutcomeStake } from '../../models/OutcomeStake';\nimport { UserStakeViewModel } from '../../models/UserStakes';\nimport { getAllDataRequests, getDataRequestById } from '../../services/DataRequestService';\nimport { claimWithProvider, finalizeWithProvider, getLoggedInAccountId, stakeWithProvider, unstakeWithProvider } from '../../services/providers/ProviderRegistry';\nimport { getUserStakesByRequestId } from '../../services/UserStakeService';\nimport { Reducers } from '../reducers';\nimport { setDataRequestDetailLoading, setDataRequestDetail, setDataRequestsLoading, setDataRequests, setTotalDataRequest, setDataRequestsErrors, setDataRequestAccountStakes } from './dataRequest';\n\nexport function loadDataRequests(page: number) {\n    return async (dispatch: Function, getState: () => Reducers) => {\n        const store = getState();\n        dispatch(setDataRequestsLoading(true));\n\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const result = await getAllDataRequests({\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        }, store.dataRequest.dataRequestFilters);\n\n        dispatch(setDataRequests(result.items));\n        dispatch(setTotalDataRequest(result.total));\n        dispatch(setDataRequestsLoading(false));\n    }\n}\n\nexport function unloadDataRequest() {\n    return (dispatch: Function) => {\n        dispatch(setDataRequestDetail(undefined));\n        dispatch(setDataRequestAccountStakes([]));\n    }\n}\n\nexport function loadDataRequestById(id: string) {\n    return async (dispatch: Function) => {\n        dispatch(setDataRequestDetailLoading(true));\n        const accountId = await getLoggedInAccountId();\n        const accountStakesRequest = getUserStakesByRequestId(id, accountId);\n        const dataRequest = await getDataRequestById(id, accountId);\n\n        if (!dataRequest) {\n            setDataRequestsErrors(['404']);\n            return;\n        }\n\n        const accountStakes = await accountStakesRequest;\n        let accountOutcomeStakes: OutcomeStake[] = [];\n\n        if (accountId && accountStakes[accountId]) {\n            accountOutcomeStakes = combineOutcomeStakes(accountStakes[accountId]);\n        }\n\n        dispatch(setDataRequestAccountStakes(accountOutcomeStakes));\n        dispatch(setDataRequestDetail(dataRequest));\n        dispatch(setDataRequestDetailLoading(false));\n    }\n}\n\nexport function stakeDataRequest(dataRequest: DataRequestViewModel, stakeFormValues: StakeFormValues) {\n    return async (dispatch: Function) => {\n        let outcome: Outcome = {\n            type: OutcomeType.Invalid,\n        };\n\n        if (!stakeFormValues.isInvalid) {\n            outcome = {\n                answer: stakeFormValues.answer,\n                type: OutcomeType.Answer,\n            };\n        }\n\n        await stakeWithProvider('near', stakeFormValues.amount, dataRequest, outcome);\n    }\n}\n\nexport function finalizeDataRequest(dataRequest: DataRequestViewModel) {\n    return async (dispatch: Function) => {\n        await finalizeWithProvider('near', dataRequest);\n    }\n}\n\nexport function claimDataRequest(accountId: string, dataRequest: DataRequestViewModel) {\n    return async (dispatch: Function) => {\n        await claimWithProvider('near', accountId, dataRequest);\n    }\n}\n\nexport function unstakeDataRequest(amount: string, dataRequest: DataRequestViewModel, stakedOutcome: UserStakeViewModel) {\n    return async (dispatch: Function) => {\n        await unstakeWithProvider('near', amount, stakedOutcome.round, dataRequest, stakedOutcome.outcome);\n    }\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport DataRequestDetailHeader from '../../containers/DataRequestDetailHeader';\nimport { claimDataRequest, finalizeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setStakeDialogOpen, setUnstakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function DataRequestDetailHeaderConnector() {\n    const dispatch = useDispatch();\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const accountStakes = useSelector((store: Reducers) => store.dataRequest.accountStakes);\n\n    const handleStakeClick = useCallback(() => {\n        dispatch(setStakeDialogOpen({\n            open: true,\n            dataRequest,\n        }));\n    }, [dispatch, dataRequest]);\n\n    const handleUnstakeClick = useCallback(() => {\n        dispatch(setUnstakeDialogOpen({\n            open: true,\n            dataRequest\n        }));\n    }, [dispatch, dataRequest]);\n\n    const handleFinalizeClick = useCallback(() => {\n        if (!dataRequest) return;\n        dispatch(finalizeDataRequest(dataRequest));\n    }, [dispatch, dataRequest]);\n\n    const handleClaimClick = useCallback(() => {\n        if (!dataRequest || !account) return;\n        dispatch(claimDataRequest(account.accountId, dataRequest));\n    }, [dispatch, dataRequest, account]);\n\n    if (!dataRequest) return null;\n\n    return (\n        <DataRequestDetailHeader\n            dataRequest={dataRequest}\n            onStakeClick={handleStakeClick}\n            onFinalizeClick={handleFinalizeClick}\n            onClaimClick={handleClaimClick}\n            onUnstakeClick={handleUnstakeClick}\n            account={account}\n            accountStakes={accountStakes}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans, { booleanToYesNo } from '../../translation/trans';\n\nimport s from './RequestInfoCard.module.scss';\nimport InformationRows from '../InformationRows';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport { Link } from 'react-router-dom';\nimport { routePaths } from '../../routes';\nimport { prettyFormatDate } from '../../utils/dateUtils';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function RequestInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('requestInfo.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[{\n                        label: trans('requestInfo.label.requestor'),\n                        value: <Link className={s.link} to={routePaths.account('near', dataRequest.requestor)}>{dataRequest.requestor}</Link>,\n                    }, {\n                        label: trans('requestInfo.label.dateCreated'),\n                        value: <span>{prettyFormatDate(dataRequest.date)}</span>,\n                    }, {\n                        label: trans('requestInfo.label.config'),\n                        value: <Link className={s.link} to={routePaths.config('near', dataRequest.config.id)}>{dataRequest.config.id}</Link>,\n                    }, {\n                        label: trans('requestInfo.label.finalArbitratorTriggered'),\n                        value: <span>{booleanToYesNo(dataRequest.finalArbitratorTriggered)}</span>,\n                    }, {\n                        label: trans('requestInfo.label.feeReward'),\n                        value: <span>{formatToken(dataRequest.fee, dataRequest.stakeToken.decimals)} {dataRequest.stakeToken.symbol}</span>,\n                    }, {\n                        label: trans('requestInfo.label.totalStaked'),\n                        value: <span>{`${formatToken(dataRequest.totalStaked, dataRequest.stakeToken.decimals)} ${dataRequest.stakeToken.symbol}`}</span>,\n                    }, {\n                        label: trans('requestInfo.label.totalCorrectStaked'),\n                        value: (\n                            <span>\n                                {dataRequest.totalCorrectStaked ?\n                                    `${formatToken(dataRequest.totalCorrectStaked, dataRequest.stakeToken.decimals)} ${dataRequest.stakeToken.symbol}` :\n                                    trans('global.na')\n                                }\n                            </span>\n                        )\n                    }, {\n                        label: trans('requestInfo.label.totalIncorrectStaked'),\n                        value: (\n                            <span>\n                                {dataRequest.totalIncorrectStaked ?\n                                    `${formatToken(dataRequest.totalIncorrectStaked, dataRequest.stakeToken.decimals)} ${dataRequest.stakeToken.symbol}` :\n                                    trans('global.na')\n                                }\n                            </span>\n                        )\n                    }, {\n                        label: trans('requestInfo.label.tags'),\n                        value: <span>{dataRequest.tags.length ? dataRequest.tags.map(t => `\"${t}\"`).join(', ') : trans('requestInfo.label.noTags')}</span>\n                    }, {\n                        label: trans('requestInfo.label.finalizedOutcome'),\n                        value: <span>{dataRequest.finalized_outcome ? transfromOutcomeToString(dataRequest.finalized_outcome) : 'null'}</span>,\n                    }]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport RequestInfoCard from '../../containers/RequestInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function RequestInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <RequestInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import React, { ReactElement } from 'react';\nimport classnames from 'classnames';\nimport Switch from '@material-ui/core/Switch';\n\nimport s from './OptionSwitch.module.scss';\n\ninterface Props {\n    className?: string;\n    label: string,\n    labelA: string;\n    labelB: string;\n    onChange?: (checked: boolean) => void;\n    value?: boolean;\n}\n\nexport default function OptionSwitch({\n    label,\n    labelA,\n    labelB,\n    onChange = () => {},\n    value,\n    className = '',\n}: Props): ReactElement {\n    return (\n        <span className={classnames(s.root, className)}>\n            <span>{label}</span>\n            <div className={s.options}>\n                <span>{labelA}</span>\n                <Switch\n                    value={value}\n                    classes={{\n                        thumb: s.thumb,\n                        track: s.track,\n                        switchBase: s.switchBase,\n                    }}\n                    onChange={(_, checked) => onChange(checked)}\n                />\n                <span>{labelB}</span>\n            </div>\n        </span>\n    );\n}\n","import React, { ChangeEvent } from 'react';\nimport { default as MuiSelect } from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport s from './Select.module.scss';\n\n\nexport interface SelectItem {\n    name: string;\n    value: string;\n}\n\ninterface Props {\n    id: string;\n    items: SelectItem[];\n    value: string;\n    label?: string;\n    onChange?: (value: string) => void;\n}\n\nexport default function Select({\n    items,\n    value,\n    label,\n    id,\n    onChange = () => {},\n}: Props) {\n    function handleChange(event: ChangeEvent<{ name?: string, value: unknown }>) {\n        onChange(event.target.value as string);\n    }\n\n    return (\n        <div>\n            <InputLabel id={id}>{label}</InputLabel>\n            <MuiSelect\n                value={value}\n                labelId={id}\n                className={s.select}\n                onChange={handleChange}\n            >\n                {items.map(item => (\n                    <MenuItem key={item.value} value={item.value}>{item.name}</MenuItem>\n                ))}\n            </MuiSelect>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport Input from '../../components/Input';\nimport OptionSwitch from '../../components/OptionSwitch/OptionSwitch';\nimport Select from '../../components/Select';\nimport Dialog from '../../compositions/Dialog';\nimport { Account } from '../../models/Account';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\nimport { toToken } from '../../utils/tokenUtils';\nimport createDefaultStakeFormValues, { StakeFormValues } from './services/createDefaultStakeFormValues';\nimport validateStakeFormValues from './services/validateStakeFormValues';\n\nimport s from './StakeDialog.module.scss';\n\ninterface Props {\n    onRequestClose: () => void;\n    onSubmit: (formValues: StakeFormValues) => void;\n    open: boolean;\n    account: Account;\n    dataRequest: DataRequestViewModel;\n}\n\nexport default function StakeDialog({\n    onRequestClose,\n    onSubmit,\n    open,\n    account,\n    dataRequest,\n}: Props) {\n    const [formValues, setFormValues] = useState(createDefaultStakeFormValues(dataRequest));\n\n    function handleValidityChange(isInvalid: boolean) {\n        setFormValues({\n            ...formValues,\n            isInvalid,\n        });\n    }\n\n    function handleAnswerChange(answer: string) {\n        setFormValues({\n            ...formValues,\n            answer,\n        });\n    }\n\n    function handleStakeChange(amount: string) {\n        setFormValues({\n            ...formValues,\n            amount: amount ? toToken(amount, dataRequest.stakeToken.decimals) : '0',\n            amountFormatted: amount ? amount : '',\n        });\n    }\n\n    const errors = validateStakeFormValues(formValues, account, dataRequest);\n\n    return (\n        <Dialog\n            open={open}\n            onRequestClose={onRequestClose}\n            onSubmitClick={() => onSubmit(formValues)}\n            title={trans('stakeDialog.title')}\n            canSubmit={errors.canSubmit}\n        >\n            <form className={s.form}>\n                <div className={s.formItem}>\n                    <OptionSwitch\n                        label={trans('stakeDialog.label.validity')}\n                        labelA={trans('stakeDialog.label.valid')}\n                        labelB={trans('stakeDialog.label.invalid')}\n                        className={s.formInput}\n                        value={formValues.isInvalid}\n                        onChange={handleValidityChange}\n                    />\n                </div>\n\n                {!formValues.isInvalid && dataRequest.outcomes && (\n                    <div className={s.formItem}>\n                        <Select\n                            id=\"stake_dialog_outcome\"\n                            value={formValues.answer}\n                            label={trans('stakeDialog.label.answer')}\n                            onChange={handleAnswerChange}\n                            items={dataRequest.outcomes.map(outcome => ({\n                                name: outcome,\n                                value: outcome,\n                            }))}\n                        />\n                    </div>\n                )}\n\n                {!formValues.isInvalid && !dataRequest.outcomes && (\n                    <div className={s.formItem}>\n                        <Input\n                            label={trans('stakeDialog.label.answer')}\n                            className={s.formInput}\n                            value={formValues.answer}\n                            error={errors.answer}\n                            onChange={handleAnswerChange}\n                            type={dataRequest.data_type === 'Number' ? 'number' : 'text'}\n                        />\n                    </div>\n                )}\n                <div className={s.formItem}>\n                    <Input\n                        label={trans('stakeDialog.label.stakeAmount', { tokenSymbol: dataRequest.stakeToken.symbol })}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleStakeChange}\n                        type=\"number\"\n                        error={errors.amount}\n                    />\n                </div>\n                {errors.message && (<div className={s.error}>{errors.message}</div>)}\n            </form>\n        </Dialog>\n    );\n}\n","import { DataRequestViewModel } from \"../../../models/DataRequest\";\n\nexport interface StakeFormValues {\n    amount: string;\n    amountFormatted: string;\n    isInvalid: boolean;\n    answer: string;\n}\n\nexport default function createDefaultStakeFormValues(dataRequest: DataRequestViewModel): StakeFormValues {\n    return {\n        amount: '0',\n        amountFormatted: '0',\n        isInvalid: false,\n        answer: dataRequest.outcomes ? dataRequest.outcomes[0] : '',\n    };\n}\n","import Big from 'big.js';\nimport { Account } from '../../../models/Account';\nimport { DataRequestViewModel } from '../../../models/DataRequest';\nimport { OutcomeType } from '../../../models/DataRequestOutcome';\nimport trans from '../../../translation/trans';\nimport { StakeFormValues } from './createDefaultStakeFormValues';\n\ninterface StakeFormErrors {\n    amount: string;\n    answer: string;\n    message: string;\n    canSubmit: boolean;\n}\n\nexport default function validateStakeFormValues(formValues: StakeFormValues, account: Account, dataRequest: DataRequestViewModel): StakeFormErrors {\n    const errors: StakeFormErrors = {\n        amount: '',\n        answer: '',\n        message: '',\n        canSubmit: true,\n    };\n\n    const accountBalance = new Big(account.balance);\n\n    if (!formValues.isInvalid) {\n        if (!formValues.answer) {\n            errors.canSubmit = false;\n        }\n\n        if (dataRequest.outcomes && dataRequest.outcomes.length) {\n            if (!dataRequest.outcomes.includes(formValues.answer)) {\n                errors.answer = trans('stakeDialog.errors.mustBeAnOutcome');\n                errors.canSubmit = false;\n            }\n        }\n    }\n\n    if (accountBalance.lt(formValues.amount)) {\n        errors.amount = trans('stakeDialog.errors.notEnoughBalance')\n        errors.canSubmit = false;\n    }\n\n    if (new Big(formValues.amount).lte(0)) {\n        errors.canSubmit = false;\n    }\n\n    // You cannot stake on the same bonded outcome as the previous outcome\n    const currentRound = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1];\n    if (currentRound && currentRound.round !== 0) {\n        const previousRound = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 2];\n\n        if (previousRound?.bondedOutcome?.type === OutcomeType.Invalid && formValues.isInvalid) {\n            errors.canSubmit = false;\n            errors.message = trans('stakeDialog.errors.sameAnswerAsPreviousRound');\n        }\n\n        if (previousRound?.bondedOutcome?.type === OutcomeType.Answer && previousRound.bondedOutcome.answer === formValues.answer) {\n            errors.canSubmit = false;\n            errors.message = trans('stakeDialog.errors.sameAnswerAsPreviousRound');\n        }\n    }\n\n    return errors;\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport StakeDialog from '../../containers/StakeDialog';\nimport { StakeFormValues } from '../../containers/StakeDialog/services/createDefaultStakeFormValues';\nimport { stakeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setStakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\nexport default function StakeDialogConnector() {\n    const dispatch = useDispatch();\n    const open = useSelector((store: Reducers) => store.dialogs.stakeDialog.open);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const dataRequest = useSelector((store: Reducers) => store.dialogs.stakeDialog.dataRequest);\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setStakeDialogOpen({\n            open: false,\n            dataRequest: undefined,\n        }));\n    }, [dispatch]);\n\n    const handleSubmit = useCallback((formValues: StakeFormValues) => {\n        if (!dataRequest) return;\n\n        dispatch(stakeDataRequest(dataRequest, formValues))\n    }, [dispatch, dataRequest]);\n\n    if (!account || !dataRequest) return null;\n\n    return (\n        <StakeDialog\n            open={open}\n            onRequestClose={handleRequestClose}\n            onSubmit={handleSubmit}\n            account={account}\n            dataRequest={dataRequest}\n        />\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { ResolutionWindow } from '../../../../models/ResolutionWindow';\nimport trans from '../../../../translation/trans';\nimport { formatToken } from '../../../../utils/tokenUtils';\n\nimport s from './StakerReport.module.scss';\nimport { OutcomeType } from '../../../../models/DataRequestOutcome';\nimport { Link } from 'react-router-dom';\nimport { routePaths } from '../../../../routes';\nimport { TokenViewModel } from '../../../../models/Token';\nimport Big from 'big.js';\n\nexport interface Props {\n    stakeToken: TokenViewModel;\n    userStakes: ResolutionWindow['userStakes'];\n}\n\nexport default function StakerReport({\n    userStakes,\n    stakeToken,\n}: Props) {\n    return (\n        <div className={s.stakerReport}>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('stakeReport.table.label.accountId')}</TableCell>\n                            <TableCell>{trans('stakeReport.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('stakeReport.table.label.stake')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {Object.keys(userStakes).map((accountId, index) => {\n                            const outcomeInfos = userStakes[accountId];\n\n                            return outcomeInfos.map((outcomeInfo) => {\n                                if (new Big(outcomeInfo.stake).lte(0)) {\n                                    return null;\n                                }\n\n                                return (\n                                    <TableRow key={`${accountId}_${JSON.stringify(outcomeInfo.outcome)}`}>\n                                        <TableCell>\n                                            <Link className={s.link} to={routePaths.account('near', accountId)}>{accountId}</Link>\n                                        </TableCell>\n                                        <TableCell>\n                                            {outcomeInfo.outcome.type === OutcomeType.Answer && (\n                                                <span>\"{outcomeInfo.outcome.answer}\"</span>\n                                            )}\n\n                                            {outcomeInfo.outcome.type === OutcomeType.Invalid && (\n                                                <span>{trans('stakerReport.label.invalid')}</span>\n                                            )}\n                                        </TableCell>\n                                        <TableCell>\n                                            {formatToken(outcomeInfo.stake, stakeToken.decimals)} {stakeToken.symbol}\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            });\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { OutcomeStake } from '../../../../models/OutcomeStake';\n\nimport s from './OutcomeStakeInfo.module.scss';\nimport trans from '../../../../translation/trans';\nimport { formatToken } from '../../../../utils/tokenUtils';\nimport { isSameOutcome, Outcome, OutcomeType } from '../../../../models/DataRequestOutcome';\nimport { TokenViewModel } from '../../../../models/Token';\nimport Big from 'big.js';\n\nexport interface Props {\n    outcomeStakes: OutcomeStake[];\n    tableComponent?: any;\n    finalizedOutcome?: Outcome;\n    finalizedRound?: number;\n    stakeToken: TokenViewModel;\n}\n\nexport default function OutcomeStakeInfo({\n    outcomeStakes,\n    tableComponent = Paper,\n    finalizedOutcome,\n    finalizedRound,\n    stakeToken,\n}: Props) {\n    return (\n        <div>\n            <TableContainer className={s.container} component={tableComponent}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('outcomeStakeInfo.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakeInfo.table.label.stake')}</TableCell>\n                            {finalizedOutcome && <TableCell>{trans('outcomeStakeInfo.table.label.correcltyStaked')}</TableCell>}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {outcomeStakes.map((outcomeInfo, index) => {\n                            if (new Big(outcomeInfo.stake).lte(0)) {\n                                return null;\n                            }\n\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell>\n                                        {outcomeInfo.outcome.type === OutcomeType.Answer && (\n                                            <span>\"{outcomeInfo.outcome.answer}\"</span>\n                                        )}\n\n                                        {outcomeInfo.outcome.type === OutcomeType.Invalid && (\n                                            <span>{trans('outcomeStakeInfo.label.invalid')}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {formatToken(outcomeInfo.stake, stakeToken.decimals)} {stakeToken.symbol}\n                                    </TableCell>\n\n                                    {finalizedOutcome && typeof finalizedRound !== 'undefined' && (\n                                        <TableCell>\n                                            {outcomeInfo.round <= finalizedRound && isSameOutcome(finalizedOutcome, outcomeInfo.outcome) && trans('outcomeStakeInfo.label.correct')}\n                                            {outcomeInfo.round <= finalizedRound && !isSameOutcome(finalizedOutcome, outcomeInfo.outcome) && trans('outcomeStakeInfo.label.incorrect')}\n                                            {outcomeInfo.round > finalizedRound && trans('outcomeStakeInfo.label.unbonded')}\n                                        </TableCell>\n                                    )}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    );\n}\n","import React from 'react';\nimport Accordion from '@material-ui/core/Accordion';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Big from 'big.js';\n\nimport { ResolutionWindow } from '../../models/ResolutionWindow';\nimport trans from '../../translation/trans';\nimport StakerReport from './components/StakerReport/StakerReport';\nimport InformationRows from '../InformationRows';\nimport { prettyFormatDate } from '../../utils/dateUtils';\nimport { formatToken } from '../../utils/tokenUtils';\nimport OutcomeStakeInfo from './components/OutcomeStakeInfo/OutcomeStakeInfo';\n\nimport s from './ResolutionWindowAccordion.module.scss';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport Countdown from '../../compositions/Countdown';\nimport { useState } from 'react';\nimport { TokenViewModel } from '../../models/Token';\n\ninterface Props {\n    stakeToken: TokenViewModel;\n    resolutionWindow: ResolutionWindow;\n    defaultExpanded?: boolean;\n}\n\nexport default function ResolutionWindowAccordion({\n    resolutionWindow,\n    defaultExpanded,\n    stakeToken,\n}: Props) {\n    const now = new Date();\n    const [isWindowClosed, setWindowClosed] = useState(resolutionWindow.endTime.getTime() <= now.getTime());\n    const percentageFilled = resolutionWindow.winningOutcomeStake ? new Big(resolutionWindow.winningOutcomeStake.stake).div(resolutionWindow.bondSize).mul(100).toString() : '0';\n\n    return (\n        <Accordion className={s.accordion} defaultExpanded={defaultExpanded}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <span className={s.roundTitle}>{trans('resolutionWindow.round', { round: resolutionWindow.round.toString() })}</span>\n                <span>{resolutionWindow.bondedOutcome ? transfromOutcomeToString(resolutionWindow.bondedOutcome) : ''}</span>\n\n                {!isWindowClosed && !resolutionWindow.bondedOutcome && (\n                    <span>\n                        {trans('resolutionWindow.label.closesIn')}\n                        <Countdown\n                            date={resolutionWindow.endTime}\n                            onComplete={() => setWindowClosed(true)}\n                        />\n                    </span>\n                )}\n            </AccordionSummary>\n            <AccordionDetails className={s.details}>\n                <InformationRows\n                    rows={[\n                        {\n                            label: trans('resolutionWindowAccordion.label.endTime'),\n                            value: <span>{prettyFormatDate(resolutionWindow.endTime)}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.bondSize'),\n                            value: <span>{`${formatToken(resolutionWindow.bondSize, stakeToken.decimals)} ${stakeToken.symbol}`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.totalStaked'),\n                            value: <span>{`${formatToken(resolutionWindow.totalStaked, stakeToken.decimals)} ${stakeToken.symbol}`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.percentageFilled'),\n                            value: <span>{`${percentageFilled}%`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.winningOutcome'),\n                            value: <span>{resolutionWindow.winningOutcomeStake ? transfromOutcomeToString(resolutionWindow.winningOutcomeStake.outcome) : ''}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.bondedOutcome'),\n                            value: <span>{resolutionWindow.bondedOutcome ? transfromOutcomeToString(resolutionWindow.bondedOutcome) : ''}</span>,\n                        }\n                    ]}\n                />\n                <h3>{trans('resolutionWindowAccordion.outcomeStakes.title')}</h3>\n                <OutcomeStakeInfo stakeToken={stakeToken} outcomeStakes={resolutionWindow.outcomeStakes} />\n                <h3>{trans('resolutionWindowAccordion.stakerReports.title')}</h3>\n                <StakerReport\n                    userStakes={resolutionWindow.userStakes}\n                    stakeToken={stakeToken}\n                />\n            </AccordionDetails>\n        </Accordion>\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport Card from '../../components/Card';\nimport trans from '../../translation/trans';\n\nimport s from './ResolutionWindowInfoCard.module.scss';\nimport ResolutionWindowAccordion from '../ResolutionWindowAccordion';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function ResolutionWindowInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n    const resolutionWindows = dataRequest.resolutionWindows.slice().reverse();\n\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('stakerReportsInfo.title')}</h2>\n                </div>\n                <div>\n                    {resolutionWindows.map((resolutionWindow, index) => {\n                        return (\n                            <ResolutionWindowAccordion\n                                resolutionWindow={resolutionWindow}\n                                defaultExpanded={index === 0}\n                                key={resolutionWindow.round}\n                                stakeToken={dataRequest.stakeToken}\n                            />\n                        );\n                    })}\n                </div>\n                {resolutionWindows.length === 0 && (\n                    <div className={s.noWindows}>\n                        {trans('stakerReportsInfo.noWindows')}\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport StakerAnswersInfoCard from '../../containers/StakersReportInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function ResolutionWindowsInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <StakerAnswersInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import Big from 'big.js';\nimport React, { useState } from 'react';\nimport Select from '../../components/Select';\nimport Dialog from '../../compositions/Dialog';\nimport NumberInput from '../../compositions/NumberInput';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport trans from '../../translation/trans';\nimport { formatToken, toToken } from '../../utils/tokenUtils';\nimport { UnstakeFormValues, createDefaultUnstakeFormValues } from './services/createDefaultUnstakeFormValues';\nimport validateUnstakeFormValues from './services/validateUnstakeFormValues';\n\nimport s from './UnstakeDialog.module.scss';\n\ninterface Props {\n    onRequestClose: () => void;\n    onSubmit: (formValues: UnstakeFormValues) => void;\n    open: boolean;\n    dataRequest: DataRequestViewModel;\n}\n\n\nexport default function UnstakeDialog({\n    dataRequest,\n    onRequestClose,\n    onSubmit,\n    open,\n}: Props) {\n    const [formValues, setFormValues] = useState(createDefaultUnstakeFormValues());\n    const unbondedStakes = dataRequest.loggedInAccountStakes.filter(stake => !stake.bonded && new Big(stake.totalStake).gt(0));\n\n    function handleStakeChange(amount: string) {\n        setFormValues({\n            ...formValues,\n            amount: amount ? toToken(amount, dataRequest.stakeToken.decimals) : '0',\n            amountFormatted: amount ? amount : '',\n        });\n    }\n\n    function handleMaxClick() {\n        const selectedOutcomeStake = unbondedStakes[formValues.stakeIndex];\n\n        setFormValues({\n            ...formValues,\n            amount: selectedOutcomeStake.totalStake,\n            amountFormatted: formatToken(selectedOutcomeStake.totalStake, dataRequest.stakeToken.decimals),\n        });\n    }\n\n    function handleOutcomeChange(outcomeIndex: string) {\n        setFormValues({\n            ...formValues,\n            stakeIndex: Number(outcomeIndex),\n            selectedStakedOutcome: unbondedStakes[Number(outcomeIndex)],\n        });\n    }\n\n    const errors = validateUnstakeFormValues(formValues, unbondedStakes);\n\n    return (\n        <Dialog\n            open={open}\n            onRequestClose={onRequestClose}\n            onSubmitClick={() => onSubmit({\n                ...formValues,\n                selectedStakedOutcome: unbondedStakes[formValues.stakeIndex],\n            })}\n            title={trans('unstakeDialog.title')}\n            canSubmit={errors.canSubmit}\n        >\n            <form>\n                <div className={s.formItem}>\n                    <Select\n                        id=\"unstake_dialog_outcome\"\n                        value={formValues.stakeIndex.toString()}\n                        label={trans('unstakeDialog.label.answer')}\n                        onChange={handleOutcomeChange}\n                        items={unbondedStakes.map((stake, index) => ({\n                            name: `Round ${stake.round} - ${transfromOutcomeToString(stake.outcome)}`,\n                            value: index.toString(),\n                        }))}\n                    />\n                </div>\n                <div className={s.formItem}>\n                    {trans('unstakeDialog.label.staked', {\n                        stake: formatToken(unbondedStakes[formValues.stakeIndex].totalStake, dataRequest.stakeToken.decimals),\n                        tokenSymbol: dataRequest.stakeToken.symbol,\n                    })}\n                </div>\n                <div className={s.formItem}>\n                    <NumberInput\n                        label={trans('unstakeDialog.label.stakeAmount', { tokenSymbol: dataRequest.stakeToken.symbol })}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleStakeChange}\n                        onMaxClick={handleMaxClick}\n                        showMax\n                        error={errors.amount}\n                    />\n                </div>\n            </form>\n        </Dialog>\n    );\n}\n","import { UserStakeViewModel } from \"../../../models/UserStakes\";\n\nexport interface UnstakeFormValues {\n    selectedStakedOutcome?: UserStakeViewModel;\n    stakeIndex: number;\n    amount: string;\n    amountFormatted: string;\n}\n\nexport function createDefaultUnstakeFormValues(): UnstakeFormValues {\n    return {\n        selectedStakedOutcome: undefined,\n        amount: '',\n        amountFormatted: '',\n        stakeIndex: 0,\n    };\n}\n","import Big from \"big.js\";\nimport { UserStakeViewModel } from \"../../../models/UserStakes\";\nimport trans from \"../../../translation/trans\";\nimport { UnstakeFormValues } from \"./createDefaultUnstakeFormValues\";\n\ninterface UnstakeFormErrors {\n    canSubmit: boolean;\n    amount: string;\n}\n\nexport default function validateUnstakeFormValues(formValues: UnstakeFormValues, unbondedStakes: UserStakeViewModel[]): UnstakeFormErrors {\n    const errors: UnstakeFormErrors = {\n        canSubmit: true,\n        amount: '',\n    };\n\n    const selectedStakedOutcome = unbondedStakes[formValues.stakeIndex];\n\n    if (!selectedStakedOutcome) {\n        errors.canSubmit = false;\n        return errors;\n    }\n\n    if (formValues.amount) {\n        const amount = new Big(formValues.amount);\n\n        if (amount.lte(0)) {\n            errors.canSubmit = false;\n        }\n\n        if (amount.gt(selectedStakedOutcome.totalStake)) {\n            errors.canSubmit = false;\n            errors.amount = trans('unstakeDialog.errors.notEnoughStaked');\n        }\n    } else {\n        errors.canSubmit = false;\n    }\n\n    return errors;\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport UnstakeDialog from '../../containers/UnstakeDialog';\nimport { UnstakeFormValues } from '../../containers/UnstakeDialog/services/createDefaultUnstakeFormValues';\nimport { unstakeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setUnstakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function UnstakeDialogConnector() {\n    const dispatch = useDispatch();\n    const open = useSelector((store: Reducers) => store.dialogs.unstakeDialog.open);\n    // const accountStakes = useSelector((store: Reducers) => store.dataRequest.accountStakes);\n    const dataRequest = useSelector((store: Reducers) => store.dialogs.unstakeDialog.dataRequest);\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setUnstakeDialogOpen({\n            open: false,\n            dataRequest: undefined,\n        }));\n    }, [dispatch]);\n\n    const handleSubmit = useCallback((formValues: UnstakeFormValues) => {\n        if (!dataRequest || !formValues.selectedStakedOutcome) return;\n\n        dispatch(unstakeDataRequest(formValues.amount, dataRequest, formValues.selectedStakedOutcome));\n    }, [dispatch, dataRequest]);\n\n    if (!dataRequest) return null;\n\n    return (\n        <UnstakeDialog\n            onRequestClose={handleRequestClose}\n            open={open}\n            dataRequest={dataRequest}\n            onSubmit={handleSubmit}\n        />\n    );\n}\n","import React, { useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { Reducers } from '../../redux/reducers';\nimport { routePaths } from '../../routes';\n\ninterface Props {\n    page: number;\n}\n\nexport default function DataRequestsOverviewConnector({\n    page,\n}: Props) {\n    const history = useHistory();\n    const dataRequests = useSelector((store: Reducers) => store.dataRequest.dataRequests);\n    const totalItems = useSelector((store: Reducers) => store.dataRequest.totalDataRequests);\n\n    const handleRequestPageChange = useCallback((page: number) => {\n        history.push({\n            pathname: routePaths.dataRequests(page.toString()),\n            search: history.location.search,\n        });\n    }, [history]);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={dataRequests}\n            page={page}\n            totalItems={totalItems}\n            onRequestPageChange={handleRequestPageChange}\n        />\n    );\n}\n","import React from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { default as MuiCheckbox } from '@material-ui/core/Checkbox';\n\nimport s from './Checkbox.module.scss';\n\ninterface Props {\n    checked: boolean;\n    onChange: (checked: boolean) => void;\n    label: string;\n}\n\nexport default function Checkbox({\n    checked,\n    label,\n    onChange,\n}: Props) {\n    return (\n        <FormControlLabel\n            control={\n                <MuiCheckbox\n                    checked={checked}\n                    onChange={(e) => onChange(e.target.checked)}\n                    classes={{\n                        checked: s.checked\n                    }}\n                />\n            }\n            label={label}\n        />\n    );\n}\n","import React from 'react';\nimport Checkbox from '../../components/Checkbox';\nimport trans from '../../translation/trans';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\nimport s from './DataRequestsOverviewFilters.module.scss';\ninterface Props {\n    totalRequests: string;\n    filters: DataRequestFilters;\n    onFilterChange: (filters: DataRequestFilters) => void;\n}\n\nexport default function DataRequestsOverviewFilters({\n    totalRequests,\n    filters,\n    onFilterChange,\n}: Props) {\n\n    function handleArbitratorCheckboxClick(checked: boolean) {\n        onFilterChange({\n            ...filters,\n            onlyArbitratorRequests: checked,\n        });\n    }\n\n    return (\n        <div>\n            <h1>{trans('dataRequests.title')}</h1>\n            <div className={s.wrapper}>\n                <span className={s.subtitle}>{trans('dataRequest.subtitle', { total: totalRequests })}</span>\n                <Checkbox\n                    label={trans('dataRequestFilters.label.arbitrator')}\n                    checked={filters.onlyArbitratorRequests}\n                    onChange={handleArbitratorCheckboxClick}\n                />\n            </div>\n        </div>\n    );\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router';\nimport DataRequestsOverviewFilters from '../../containers/DataRequestsOverviewFilters';\nimport { setDataRequestFilters } from '../../redux/dataRequest/dataRequest';\nimport { loadDataRequests } from '../../redux/dataRequest/dataRequestAction';\nimport { Reducers } from '../../redux/reducers';\nimport { routePaths } from '../../routes';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\ninterface Params {\n    page: string;\n}\n\nexport default function DataRequestsOverviewFiltersConnector() {\n    const dispatch = useDispatch();\n    const totalRequests = useSelector((store: Reducers) => store.dataRequest.totalDataRequests);\n    const params = useParams<Params>();\n    const history = useHistory();\n    const urlParams = new URLSearchParams(history.location.search);\n    const filters: DataRequestFilters = {\n        onlyArbitratorRequests: urlParams.get('onlyArbitratorRequests') === 'true',\n    };\n\n    function onFilterChange(filters: DataRequestFilters) {\n        const url = new URLSearchParams();\n        url.append('onlyArbitratorRequests', '' + filters.onlyArbitratorRequests);\n\n        history.replace({\n            pathname: routePaths.dataRequests(params.page),\n            search: url.toString(),\n        });\n    }\n\n    useEffect(() => {\n        dispatch(setDataRequestFilters(filters));\n        dispatch(loadDataRequests(Number(params.page)));\n    }, [urlParams.toString(), dispatch, params]);\n\n    return (\n        <DataRequestsOverviewFilters\n            totalRequests={totalRequests.toString()}\n            filters={filters}\n            onFilterChange={onFilterChange}\n        />\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function HomeDataRequestsConnector() {\n    const latestRequests = useSelector((store: Reducers) => store.stats.latestRequests);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={latestRequests}\n            page={0}\n            totalItems={latestRequests.length}\n            onRequestPageChange={() => {}}\n            showPagination={false}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\nimport SearchConnector from '../../connectors/SearchConnector';\nimport trans from '../../translation/trans';\n\nimport s from './HomeHeader.module.scss';\n\nexport default function HomeHeader() {\n    return (\n        <Card>\n            <CardContent>\n                <h1 className={s.title}>{trans('homeHeader.title')}</h1>\n                <SearchConnector inputClassName={s.searchInput} className={s.search} />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport HomeHeader from '../../containers/HomeHeader';\n\n\nexport default function HomeHeaderConnector() {\n    return (\n        <HomeHeader />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../../../components/Card';\n\nimport s from './StatCard.module.scss';\n\ninterface Props {\n    label: string;\n    value: string;\n}\n\nexport default function StatCard({\n    label,\n    value,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <h2 className={s.statLabel}>{label}</h2>\n                <span className={s.statValue}>{value}</span>\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport millify from 'millify';\n\nimport s from './OracleStats.module.scss';\nimport trans from '../../translation/trans';\nimport StatCard from './components/StatCard/StatCard';\nimport { AppConfig } from '../../models/AppConfig';\n\ninterface Props {\n    totalRequests: string;\n    tokenPrice: number;\n    tokenMarketCap: number;\n    appConfig: AppConfig;\n}\n\nexport default function OracleStats({\n    totalRequests,\n    tokenMarketCap,\n    tokenPrice,\n    appConfig,\n}: Props) {\n    const marketCapFormatted = millify(tokenMarketCap);\n\n    return (\n        <div className={s.root}>\n            <StatCard\n                label={trans('oracleStats.label.totalRequests')}\n                value={totalRequests}\n            />\n            <StatCard\n                label={trans('oracleStats.label.tokenPrice', { tokenSymbol: appConfig.stakeTokenSymbol })}\n                value={`$${tokenPrice}`}\n            />\n            <StatCard\n                label={trans('oracleStats.label.tokenMarketCap')}\n                value={`$${marketCapFormatted}`}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OracleStats from '../../containers/OracleStats';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function OracleStatsConnector() {\n    const totalRequests = useSelector((store: Reducers) => store.stats.totalRequests);\n    const tokenPrice = useSelector((store: Reducers) => store.stats.tokenPrice);\n    const tokenMarketCap = useSelector((store: Reducers) => store.stats.tokenMarketCap);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    return (\n        <OracleStats\n            totalRequests={totalRequests}\n            tokenMarketCap={tokenMarketCap}\n            tokenPrice={tokenPrice}\n            appConfig={appConfig}\n        />\n    );\n}\n","import { COINGECKO_API_URL } from '../config';\n\nexport interface TokenMarketInfoResponse {\n    price: number;\n    marketCap: number;\n}\n\nexport async function getTokenMarketInfoByTicker(ticker: string, currency = 'usd'): Promise<TokenMarketInfoResponse> {\n    try {\n        const response = await fetch(`${COINGECKO_API_URL}/coins/${ticker}?localization=false`);\n        const data = await response.json();\n\n        return {\n            price: data.market_data.current_price[currency],\n            marketCap: data.market_data.market_cap[currency],\n        };\n    } catch (error) {\n        console.error('[getTokenMarketInfoByTicker]', error);\n\n        return {\n            marketCap: 0,\n            price: 0,\n        };\n    }\n}\n\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { DataRequestListItem } from '../../models/DataRequest';\n\nexport type StatsState = Readonly<{\n    totalRequests: string;\n    tokenPrice: number;\n    tokenMarketCap: number;\n    latestRequests: DataRequestListItem[];\n}>;\n\nconst initialState: StatsState = {\n    totalRequests: '0',\n    tokenPrice: 0,\n    tokenMarketCap: 0,\n    latestRequests: [],\n};\n\nconst statsSlice = createSlice({\n    initialState,\n    name: 'stats',\n    reducers: {\n        setTotalRequestsStat(state: StatsState, action: PayloadAction<string>): StatsState {\n            return ({\n                ...state,\n                totalRequests: action.payload,\n            });\n        },\n\n        setTokenPriceStat(state: StatsState, action: PayloadAction<number>): StatsState {\n            return ({\n                ...state,\n                tokenPrice: action.payload,\n            });\n        },\n\n        setTokenMarketCapStat(state: StatsState, action: PayloadAction<number>): StatsState {\n            return ({\n                ...state,\n                tokenMarketCap: action.payload,\n            });\n        },\n\n        setLatestRequestsStat(state: StatsState, action: PayloadAction<DataRequestListItem[]>): StatsState {\n            return ({\n                ...state,\n                latestRequests: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setTokenMarketCapStat,\n    setTokenPriceStat,\n    setTotalRequestsStat,\n    setLatestRequestsStat,\n} = statsSlice.actions;\n\nexport default statsSlice.reducer;\n","import { COINGECKO_TOKEN_TICKER } from \"../../config\";\nimport { getTokenMarketInfoByTicker } from \"../../services/DashboardService\";\nimport { getAllDataRequests } from \"../../services/DataRequestService\"\nimport cache from \"../../utils/cache\";\nimport { setLatestRequestsStat, setTokenMarketCapStat, setTokenPriceStat, setTotalRequestsStat } from \"./stats\";\n\nexport function loadStats() {\n    return async (dispatch: Function) => {\n        getAllDataRequests({\n            limit: 10,\n            offset: 0,\n        }, { onlyArbitratorRequests: false }).then((result) => {\n            dispatch(setTotalRequestsStat(result.total.toString()));\n            dispatch(setLatestRequestsStat(result.items));\n        });\n\n        cache('flx_token_price', async () => {\n            return getTokenMarketInfoByTicker(COINGECKO_TOKEN_TICKER);\n        }, 10000).then((result) => {\n            dispatch(setTokenPriceStat(result.price));\n            dispatch(setTokenMarketCapStat(result.marketCap));\n        });\n    }\n}\n","import { ComponentType } from 'react';\nimport AccountPage from './pages/AccountPage';\nimport ConfigPage from './pages/ConfigPage';\nimport DataRequestDetailPage from './pages/DataRequestDetailPage';\nimport DataRequestsPage from './pages/DataRequestsPage';\nimport HomePage from './pages/HomePage';\nimport SearchResultPage from './pages/SearchResultPage';\nimport trans from './translation/trans';\n\ninterface RouteProps {\n    component: ComponentType;\n    exact: boolean;\n    path: string;\n    navPath: string;\n    inNavigation: boolean;\n    key: string;\n    label: string;\n    icon?: string;\n}\n\nexport const routePaths = {\n    root: () => '/',\n\n    account: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}`,\n    accountRequests: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}/requests`,\n    accountUnclaimed: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}/unclaimed`,\n    accountAnalytics: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}/analytics`,\n    accountRequestorAnalytics: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}/requestor-analytics`,\n\n    config: (provider = ':provider', id = ':id') => `/config/${provider}/${id}`,\n\n    search: (query = ':query') => `/search/${query}`,\n\n    dataRequests: (page = ':page') => `/requests/${page}`,\n    dataRequestDetail: (provider = ':provider', id = ':id') => `/request/${provider}/${id}`,\n}\n\nexport const routes: RouteProps[] = [\n    {\n        component: HomePage,\n        exact: true,\n        inNavigation: true,\n        key: 'home',\n        label: trans('routes.label.home'),\n        path: routePaths.root(),\n        navPath: routePaths.root(),\n    },\n    {\n        component: SearchResultPage,\n        exact: true,\n        inNavigation: false,\n        key: 'search',\n        label: trans('routes.label.search'),\n        path: routePaths.search(),\n        navPath: routePaths.search(),\n    },\n    {\n        component: AccountPage,\n        exact: false,\n        inNavigation: false,\n        key: 'account',\n        label: trans('routes.label.account'),\n        path: routePaths.account(),\n        navPath: routePaths.account(),\n    },\n    {\n        component: DataRequestDetailPage,\n        exact: false,\n        inNavigation: false,\n        key: 'data-request-detail',\n        label: 'Data request detail',\n        path: routePaths.dataRequestDetail(),\n        navPath: routePaths.dataRequestDetail(),\n    },\n    {\n        component: DataRequestsPage,\n        exact: true,\n        inNavigation: true,\n        key: 'data-requests',\n        label: trans('routes.label.dataRequests'),\n        path: routePaths.dataRequests(),\n        navPath: routePaths.dataRequests('0'),\n    },\n    {\n        component: ConfigPage,\n        exact: true,\n        inNavigation: false,\n        key: 'config-detail',\n        label: trans('routes.label.config'),\n        path: routePaths.config(),\n        navPath: routePaths.config(),\n    },\n];\n","import useInterval from '@use-it/interval';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HOME_REFRESH_INTERVAL } from '../../config';\nimport HomeDataRequestsConnector from '../../connectors/HomeDataRequestsConnector';\nimport HomeHeaderConnector from '../../connectors/HomeHeaderConnector';\nimport OracleStatsConnector from '../../connectors/OracleStatsConnector';\n\nimport Page from '../../containers/Page';\nimport { loadStats } from '../../redux/stats/statsActions';\nimport trans from '../../translation/trans';\n\n\nexport default function HomePage() {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(loadStats());\n    }, [dispatch]);\n\n    useInterval(() => {\n        dispatch(loadStats());\n    }, HOME_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <HomeHeaderConnector />\n            <OracleStatsConnector />\n            <h2>{trans('homePage.title.latestRequests')}</h2>\n            <HomeDataRequestsConnector />\n        </Page>\n    );\n}\n","import React from 'react';\nimport { useParams } from 'react-router';\n\nimport Page from '../../containers/Page';\nimport trans from '../../translation/trans';\n\nimport s from './SearchResultPage.module.scss';\n\ninterface Params {\n    query: string;\n}\n\nexport default function SearchResultPage() {\n    const params = useParams<Params>();\n\n    return (\n        <Page>\n            <div>\n                <h1 className={s.title}>{trans('searchResultPage.title', { query: params.query })}</h1>\n            </div>\n            <div>\n                {trans('searchResultPage.noResults')}\n            </div>\n        </Page>\n    );\n}\n","import CardContent from '@material-ui/core/CardContent';\nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, Switch, useHistory, useLocation, useParams } from 'react-router';\nimport Card from '../../components/Card';\nimport TabBar from '../../compositions/TabBar';\nimport { TabBarItem } from '../../compositions/TabBar/TabBar';\nimport AccountDetailsInfoCardConnector from '../../connectors/AccountDetailsInfoCardConnector';\nimport Page from '../../containers/Page';\nimport { loadAccount } from '../../redux/account/accountActions';\nimport { routePaths } from '../../routes';\nimport trans from '../../translation/trans';\nimport AccountStakesPage from './sub-pages/AccountStakesPage';\nimport AccountRequestsPage from './sub-pages/AccountRequestsPage';\n\nimport s from './AccountPage.module.scss';\nimport AccountUnclaimedPage from './sub-pages/AccountUnclaimedPage';\nimport WhitelistInfoCardConnector from '../../connectors/WhitelistInfoCardConnector';\nimport { Reducers } from '../../redux/reducers';\nimport AccountAnalyticsPage from './sub-pages/AccountAnalyticsPage';\nimport AccountRequestorAnalyticsPage from './sub-pages/AccountRequestorAnalyticsPage';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountPage() {\n    const params = useParams<Params>();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const location = useLocation();\n    const accountDetailInfo = useSelector((store: Reducers) => store.account.accountDetail.info);\n\n    useEffect(() => {\n        dispatch(loadAccount(params.provider, params.accountId));\n    }, [dispatch, params]);\n\n    const onTabClick = useCallback((item: TabBarItem) => {\n        history.push(item.id);\n    }, [history]);\n\n    return (\n        <Page>\n            <div>\n                <h1 className={s.title}>{params.accountId}</h1>\n            </div>\n            <AccountDetailsInfoCardConnector />\n            <WhitelistInfoCardConnector />\n            <Card className={s.card}>\n                <CardContent>\n                    <TabBar\n                        activeId={location.pathname}\n                        className={s.tabBar}\n                        onTabClick={onTabClick}\n                        items={[{\n                            id: routePaths.account(params.provider, params.accountId),\n                            label: trans('accountPage.label.stakes'),\n                            show: true,\n                        }, {\n                            id: routePaths.accountUnclaimed(params.provider, params.accountId),\n                            label: trans('accountPage.label.unclaimed'),\n                            show: accountDetailInfo.hasStakes,\n                        }, {\n                            id: routePaths.accountRequests(params.provider, params.accountId),\n                            label: trans('accountPage.label.requests'),\n                            show: accountDetailInfo.hasRequests,\n                        }, {\n                            id: routePaths.accountAnalytics(params.provider, params.accountId),\n                            label: trans('accountPage.label.analytics'),\n                            show: accountDetailInfo.hasStakes,\n                        }, {\n                            id: routePaths.accountRequestorAnalytics(params.provider, params.accountId),\n                            label: trans('accountPage.label.requestorAnalytics'),\n                            show: accountDetailInfo.hasRequests,\n                        }]}\n                    />\n                    <Switch>\n                        <Route exact path={routePaths.account()} component={AccountStakesPage} />\n                        <Route exact path={routePaths.accountRequests()} component={AccountRequestsPage} />\n                        <Route exact path={routePaths.accountUnclaimed()} component={AccountUnclaimedPage} />\n                        <Route exact path={routePaths.accountAnalytics()} component={AccountAnalyticsPage} />\n                        <Route exact path={routePaths.accountRequestorAnalytics()} component={AccountRequestorAnalyticsPage} />\n                    </Switch>\n                </CardContent>\n            </Card>\n        </Page>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport useInterval from '@use-it/interval';\nimport classnames from 'classnames';\n\nimport AccountStakesInfoCardConnector from '../../connectors/AccountStakesInfoCardConnector';\nimport CallDataInfoConnector from '../../connectors/CallDataInfoConnector';\nimport DataRequestDetailHeaderConnector from '../../connectors/DataRequestDetailHeaderConnector';\nimport RequestInfoConnector from '../../connectors/RequestInfoConnector';\nimport StakeDialogConnector from '../../connectors/StakeDialogConnector';\nimport ResolutionWindowsInfoConnector from '../../connectors/ResolutionWindowsInfoConnector';\nimport Page from '../../containers/Page';\nimport { loadDataRequestById, unloadDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { Reducers } from '../../redux/reducers';\nimport { REQUEST_DETAIL_REFRESH_INTERVAL } from '../../config';\nimport UnstakeDialogConnector from '../../connectors/UnstakeDialogConnector';\n\nimport s from './DataRequestDetailPage.module.scss';\n\ninterface RouterParams {\n    id: string;\n}\n\nexport default function DataRequestDetailPage() {\n    const dispatch = useDispatch();\n    const { id } = useParams<RouterParams>();\n    const account = useSelector((store: Reducers) => store.account.account);\n\n    useEffect(() => {\n        dispatch(loadDataRequestById(id));\n\n        return () => {\n            dispatch(unloadDataRequest());\n        }\n    }, [dispatch, id]);\n\n    useInterval(() => {\n        dispatch(loadDataRequestById(id));\n    }, REQUEST_DETAIL_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <DataRequestDetailHeaderConnector />\n            <StakeDialogConnector />\n            <UnstakeDialogConnector />\n            <RequestInfoConnector className={s.card} />\n            {account && <AccountStakesInfoCardConnector />}\n            <CallDataInfoConnector className={s.card} />\n            <ResolutionWindowsInfoConnector className={classnames(s.card, s.lastCard)} />\n        </Page>\n    );\n}\n","import useInterval from '@use-it/interval';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport DataRequestsOverviewConnector from '../../connectors/DataRequestsOverviewConnector';\nimport Page from '../../containers/Page';\nimport { loadDataRequests } from '../../redux/dataRequest/dataRequestAction';\nimport { REQUEST_LIST_REFRESH_INTERVAL } from '../../config';\nimport DataRequestsOverviewFiltersConnector from '../../connectors/DataRequestsOverviewFiltersConnector';\n\ninterface Params {\n    page: string;\n}\n\nexport default function DataRequestsPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useInterval(() => {\n        dispatch(loadDataRequests(Number(params.page)));\n    }, REQUEST_LIST_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <DataRequestsOverviewFiltersConnector />\n            <DataRequestsOverviewConnector page={Number(params.page)} />\n        </Page>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport OracleConfigInfoCardConnector from '../../connectors/OracleConfigInfoCardConnector';\nimport Page from '../../containers/Page';\nimport { loadOracleConfig } from '../../redux/oracleConfig/oracleConfigActions';\nimport trans from '../../translation/trans';\n\ninterface Params {\n    id: string;\n    provider: string;\n}\n\nexport default function ConfigPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadOracleConfig(params.id));\n    }, [dispatch, params.id]);\n\n    return (\n        <Page>\n            <h1>{trans('oracleConfig.title', { id: params.id })}</h1>\n            <OracleConfigInfoCardConnector />\n        </Page>\n    );\n}\n","import { getOracleConfigById } from '../../services/OracleConfigService';\nimport { setOracleConfigDetail, setOracleConfigLoading } from './oracleConfig';\n\nexport function loadOracleConfig(id: string) {\n    return async (dispatch: Function) => {\n        dispatch(setOracleConfigLoading(true));\n        const config = await getOracleConfigById(id);\n        dispatch(setOracleConfigDetail(config));\n        dispatch(setOracleConfigLoading(false));\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport dataRequest, { DataRequestsState } from './dataRequest/dataRequest';\nimport account, { AccountState } from './account/account';\nimport dialogs, { DialogsState } from './dialogs/dialogs';\nimport stats, { StatsState } from './stats/stats';\nimport oracleConfig, { OracleConfigState } from './oracleConfig/oracleConfig';\nimport appconfig, { AppConfigState } from './appconfig/appconfig';\n\nexport interface Reducers {\n    dataRequest: DataRequestsState;\n    account: AccountState;\n    dialogs: DialogsState;\n    stats: StatsState;\n    oracleConfig: OracleConfigState;\n    appconfig: AppConfigState;\n}\n\nexport default combineReducers<Reducers>({\n    account,\n    appconfig,\n    dataRequest,\n    dialogs,\n    stats,\n    oracleConfig,\n});\n","import {\n    applyMiddleware,\n    CombinedState,\n    createStore,\n    Store,\n    StoreEnhancer,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport reducers, { Reducers } from './reducers';\n\nconst createEnhancer = (): StoreEnhancer => (process.env.REACT_APP_APP_ENV !== 'production'\n    ? composeWithDevTools(applyMiddleware(thunk))\n    : applyMiddleware(thunk)\n);\n\nexport default function configureStore(preloadedState: Record<string, any> = {}): Store<CombinedState<Reducers>> {\n    const enhancer = createEnhancer();\n    return createStore(reducers, preloadedState, enhancer);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { StylesProvider } from '@material-ui/core/styles';\n\nimport { routes } from './routes';\nimport configureStore from './redux/store';\nimport { initProviders } from './services/providers/ProviderRegistry';\n\nimport './styles/global.module.scss';\n\nconst store = configureStore({});\ninitProviders();\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter basename=\"/\" hashType=\"hashbang\">\n            <StylesProvider injectFirst>\n                <Switch>\n                    {routes.map(route => <Route {...route} key={route.key} />)}\n                </Switch>\n            </StylesProvider>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"CallDataInfoCard_titleWrapper__27iZZ\",\"title\":\"CallDataInfoCard_title__y9qga\",\"label\":\"CallDataInfoCard_label__KSOgB\",\"table\":\"CallDataInfoCard_table__2FKa3\",\"tableHeadRow\":\"CallDataInfoCard_tableHeadRow__RWXv0\",\"tableItem\":\"CallDataInfoCard_tableItem__3hv8p\",\"tableItemInner\":\"CallDataInfoCard_tableItemInner__1JjPs\",\"possibleOutcomes\":\"CallDataInfoCard_possibleOutcomes__2zyN7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"AccountStakesInfoCard_card__2oQpV\",\"titleWrapper\":\"AccountStakesInfoCard_titleWrapper__XsRI6\",\"title\":\"AccountStakesInfoCard_title__xXeRR\",\"noStakes\":\"AccountStakesInfoCard_noStakes__nGDmS\",\"claim\":\"AccountStakesInfoCard_claim__2MMmZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"StakeDialog_form__2Jewc\",\"formItem\":\"StakeDialog_formItem__11Oc1\",\"formInput\":\"StakeDialog_formInput__1nO1v\",\"error\":\"StakeDialog_error__3U3jC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"DataRequestsOverview_root__1C_f3\",\"container\":\"DataRequestsOverview_container__gtVbk\",\"tableHead\":\"DataRequestsOverview_tableHead__1UCIA\",\"linkCell\":\"DataRequestsOverview_linkCell__v_ecT\",\"pagination\":\"DataRequestsOverview_pagination__3VSEr\",\"noRequests\":\"DataRequestsOverview_noRequests__2MHyM\"};"],"sourceRoot":""}