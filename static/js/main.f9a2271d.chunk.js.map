{"version":3,"sources":["containers/OutcomeStakesOverview/OutcomeStakesOverview.module.scss","components/OptionSwitch/OptionSwitch.module.scss","containers/ResolutionWindowAccordion/components/StakerReport/StakerReport.module.scss","containers/RequestInfoCard/RequestInfoCard.module.scss","containers/UnstakeDialog/UnstakeDialog.module.scss","pages/DataRequestDetailPage/DataRequestDetailPage.module.scss","compositions/TabBar/TabBar.module.scss","compositions/LabeledText/LabeledText.module.scss","containers/AccountDetailsInfoCard/AccountDetailsInfoCard.module.scss","containers/Footer/Footer.module.scss","pages/AccountPage/AccountPage.module.scss","containers/WhitelistInfoCard/WhitelistInfoCard.module.scss","containers/OracleConfigInfoCard/OracleConfigInfoCard.module.scss","containers/StakersReportInfoCard/ResolutionWindowInfoCard.module.scss","containers/ResolutionWindowAccordion/components/OutcomeStakeInfo/OutcomeStakeInfo.module.scss","containers/ResolutionWindowAccordion/ResolutionWindowAccordion.module.scss","containers/HomeHeader/HomeHeader.module.scss","containers/OracleStats/components/StatCard/StatCard.module.scss","containers/InformationRows/InformationRows.module.scss","containers/StorageManagerDialog/StorageManagerDialog.module.scss","containers/Page/Page.module.scss","containers/DataRequestsOverviewFilters/DataRequestsOverviewFilters.module.scss","components/Card/Card.module.scss","components/InfoToolTip/InfoToolTip.module.scss","components/FakeLinkButton/FakeLinkButton.module.scss","components/Button/Button.module.scss","containers/Pagination/Pagination.module.scss","components/ExternalLink/ExternalLink.module.scss","components/Select/Select.module.scss","components/Checkbox/Checkbox.module.scss","containers/OracleStats/OracleStats.module.scss","pages/SearchResultPage/SearchResultPage.module.scss","containers/Menu/Menu.module.scss","components/Card/Card.tsx","compositions/TabBar/TabBar.tsx","components/InfoToolTip/InfoToolTip.tsx","compositions/LabeledText/LabeledText.tsx","containers/InformationRows/InformationRows.tsx","translation/trans.ts","utils/tokenUtils.ts","containers/AccountDetailsInfoCard/AccountDetailsInfoCard.tsx","connectors/AccountDetailsInfoCardConnector/AccountDetailsInfoCardConnector.tsx","components/FakeLinkButton/FakeLinkButton.tsx","components/SearchInput/SearchInput.tsx","containers/SearchForm/SearchForm.tsx","utils/cache.ts","models/DataRequestOutcome.ts","config.ts","services/providers/near/NearService.ts","services/providers/near/NearConnectService.ts","services/providers/near/StorageManagerService.ts","services/providers/ProviderRegistry.ts","services/providers/near/NearProvider.ts","utils/dateUtils.ts","utils/jsonUtils.ts","models/Claim.ts","models/OracleConfig.ts","models/DataRequest.ts","models/UserStakes.ts","models/ResolutionWindow.ts","services/GraphQLService.ts","services/DataRequestService.ts","services/SearchService.ts","connectors/SearchConnector/SearchConnector.tsx","components/Button/Button.tsx","compositions/Dialog/Dialog.tsx","components/Input/Input.tsx","compositions/NumberInput/NumberInput.tsx","containers/StorageManagerDialog/StorageManagerDialog.tsx","containers/StorageManagerDialog/services/createDefaultStorageManagerFormValues.ts","containers/StorageManagerDialog/services/validateStorageManagerFormValues.ts","redux/dialogs/dialogs.ts","connectors/StorageManagerDialogConnector/StorageManagerDialogConnector.tsx","containers/Menu/Menu.tsx","models/WhitelistItem.ts","services/AccountService.ts","models/OutcomeStake.ts","services/UserStakeService.ts","redux/account/account.ts","redux/account/accountActions.ts","redux/appconfig/appconfig.ts","connectors/MenuConnector/MenuConnector.tsx","redux/appconfig/appconfigActions.ts","containers/Footer/Footer.tsx","containers/Page/Page.tsx","containers/Pagination/Pagination.tsx","containers/OutcomeStakesOverview/OutcomeStakesOverview.tsx","connectors/AccountOutcomeStakesConnector/AccountOutcomeStakesConnector.tsx","pages/AccountPage/sub-pages/AccountStakesPage/AccountStakesPage.tsx","containers/DataRequestsOverview/DataRequestsOverview.tsx","connectors/AccountRequestsConnector/AccountRequestsConnector.tsx","pages/AccountPage/sub-pages/AccountRequestsPage/AccountRequestsPage.tsx","connectors/AccountUnclaimedStakesConnector/AccountUnclaimedStakesConnector.tsx","pages/AccountPage/sub-pages/AccountUnclaimedPage/AccountUnclaimedPage.tsx","components/ExternalLink/ExternalLink.tsx","containers/WhitelistInfoCard/WhitelistInfoCard.tsx","connectors/WhitelistInfoCardConnector/WhitelistInfoCardConnector.tsx","containers/OracleConfigInfoCard/OracleConfigInfoCard.tsx","utils/prettyFormatNumber.ts","connectors/OracleConfigInfoCardConnector/OracleConfigInfoCardConnector.tsx","services/OracleConfigService.ts","redux/oracleConfig/oracleConfig.ts","containers/AccountStakesInfoCard/AccountStakesInfoCard.tsx","connectors/AccountStakesInfoCardConnector/AccountStakesInfoCardConnector.tsx","containers/CallDataInfoCard/CallDataInfoCard.tsx","connectors/CallDataInfoConnector/CallDataInfoConnector.tsx","compositions/Countdown/Countdown.tsx","containers/DataRequestDetailHeader/DataRequestDetailHeader.tsx","redux/dataRequest/dataRequest.ts","redux/dataRequest/dataRequestAction.ts","connectors/DataRequestDetailHeaderConnector/DataRequestDetailHeaderConnector.tsx","containers/RequestInfoCard/RequestInfoCard.tsx","connectors/RequestInfoConnector/RequestInfoConnector.tsx","components/OptionSwitch/OptionSwitch.tsx","components/Select/Select.tsx","containers/StakeDialog/StakeDialog.tsx","containers/StakeDialog/services/createDefaultStakeFormValues.ts","containers/StakeDialog/services/validateStakeFormValues.ts","connectors/StakeDialogConnector/StakeDialogConnector.tsx","containers/ResolutionWindowAccordion/components/StakerReport/StakerReport.tsx","containers/ResolutionWindowAccordion/components/OutcomeStakeInfo/OutcomeStakeInfo.tsx","containers/ResolutionWindowAccordion/ResolutionWindowAccordion.tsx","containers/StakersReportInfoCard/ResolutionWindowInfoCard.tsx","connectors/ResolutionWindowsInfoConnector/ResolutionWindowsInfoConnector.tsx","containers/UnstakeDialog/UnstakeDialog.tsx","containers/UnstakeDialog/services/createDefaultUnstakeFormValues.ts","containers/UnstakeDialog/services/validateUnstakeFormValues.ts","connectors/UnstakeDialogConnector/UnstakeDialogConnector.tsx","connectors/DataRequestsOverviewConnector/DataRequestsOverviewConnector.tsx","components/Checkbox/Checkbox.tsx","containers/DataRequestsOverviewFilters/DataRequestsOverviewFilters.tsx","connectors/DataRequestsOverviewFiltersConnector/DataRequestsOverviewFiltersConnector.tsx","connectors/HomeDataRequestsConnector/HomeDataRequestsConnector.tsx","containers/HomeHeader/HomeHeader.tsx","connectors/HomeHeaderConnector/HomeHeaderConnector.tsx","containers/OracleStats/components/StatCard/StatCard.tsx","containers/OracleStats/OracleStats.tsx","connectors/OracleStatsConnector/OracleStatsConnector.tsx","services/DashboardService.ts","redux/stats/stats.ts","redux/stats/statsActions.ts","routes.ts","pages/HomePage/HomePage.tsx","pages/SearchResultPage/SearchResultPage.tsx","pages/AccountPage/AccountPage.tsx","pages/DataRequestDetailPage/DataRequestDetailPage.tsx","pages/DataRequestsPage/DataRequestsPage.tsx","pages/ConfigPage/ConfigPage.tsx","redux/oracleConfig/oracleConfigActions.ts","redux/reducers.ts","redux/store.ts","index.tsx","containers/CallDataInfoCard/CallDataInfoCard.module.scss","containers/AccountStakesInfoCard/AccountStakesInfoCard.module.scss","containers/StakeDialog/StakeDialog.module.scss","containers/DataRequestsOverview/DataRequestsOverview.module.scss","compositions/Dialog/Dialog.module.scss","containers/DataRequestDetailHeader/DataRequestDetailHeader.module.scss"],"names":["module","exports","Card","props","className","classnames","s","card","TabBar","items","onTabClick","activeId","variant","tabClassName","Tabs","classes","indicator","root","value","filter","tab","show","map","Tab","onClick","label","id","InfoToolTip","text","Tooltip","title","arrow","infoTooltipWrapper","LabeledText","info","children","tooltip","InformationRows","rows","row","item","trans","key","attributes","uppercaseFirstLetter","result","translations","resultWithAttributes","options","replace","word","undefined","replaceAttributes","charAt","toUpperCase","substring","booleanToYesNo","bool","formatToken","amount","decimals","dp","denominator","Big","pow","div","round","toFixed","toToken","mul","AccountDetailsInfoCard","account","appConfig","accountInfo","CardContent","titleWrapper","balance","stakeTokenDecimals","stakeTokenSymbol","activeStaking","totalStaked","totalClaimed","nativeToken","nativeTokenSymbol","storageUsed","nativeTokenDecimals","storageAvailable","AccountDetailsInfoCardConnector","accountDetail","useSelector","store","appconfig","FakeLinkButton","button","SearchInput","onChange","handleChange","useCallback","event","currentTarget","TextField","type","InputProps","endAdornment","InputAdornment","position","SearchForm","onSearch","inputClassName","useState","query","setQuery","handleSearchSubmit","preventDefault","onSubmit","v","hidden","cacheStorage","Map","creationPromises","cache","createCallback","ttl","a","get","onGoingRequest","createRequest","set","createdItem","setTimeout","delete","OutcomeType","API_URL","process","COINGECKO_API_URL","DEFAULT_PAGINATION_LIMIT","NEAR_NETWORK","NEAR_NULL_CONTRACT","NEAR_ORACLE_CONTRACT_ID","NEAR_MAX_GAS","transformToOutcome","outcome","Invalid","parsedOutcome","JSON","parse","Answer","answer","String","number","Number","multiplier","negative","toString","transfromOutcomeToString","isSameOutcome","b","stringify","PE","batchSendTransactions","walletConnection","txs","callbackUrl","accountId","getAccountId","_near","connection","signer","getPublicKey","networkId","localKey","provider","block","finality","blockHash","utils","serialize","base_decode","header","hash","Promise","all","index","receiverId","transactionOptions","actions","tx","transactions","functionCall","methodName","args","BN","gas","accessKeyForTransaction","accessKey","Error","publicKey","PublicKey","from","public_key","nonce","access_key","createTransaction","resultTxs","requestSignTransactions","getLatestOracleConfig","viewFunction","getTokenBalance","config","stake_token","account_id","createNearOutcome","dataRequest","data_type","isNegative","lt","number_multiplier","createNetworkConfig","connectConfig","nodeUrl","walletUrl","customNodeUrl","contractName","customWalletUrl","initialBalance","connectedNear","connectNear","nearInstance","networkConfig","connect","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","connectWallet","near","WalletConnection","getMinimumStorage","contractId","minimumBalance","min","console","error","getStorageBalance","storage","total","available","createStorageTransaction","extraStorage","minimumStorageRequired","storageBalance","storageRequired","add","sub","providerInitPromise","NearProvider","requestSignIn","signOut","wallet","isSignedIn","this","storageInfo","storageTotal","used","stakeOutcome","getLoggedInAccountId","loggedInAccount","storageTransaction","push","stakeToken","receiver_id","msg","request_id","resolution_round","oracleTransaction","unbondedStakes","loggedInAccountStakes","stake","bonded","totalStake","gt","halfGas","length","dataRequestId","some","finalized_outcome","getTokenInfo","token","symbol","providers","p","init","getProviderById","find","getLoggedInProvider","isLoggedIn","loginWithProvider","providerId","login","logoutWithProvider","logout","getAccountInfoWithProvider","getAccountInfo","getLoggedInAccount","loggedInAccountId","getAppConfigForProvider","getAppConfig","stakeWithProvider","finalizeWithProvider","finalize","claimWithProvider","claim","unstakeWithProvider","unstake","getProviderStorageBalance","name","prettyFormatDate","date","format","nsToMs","nanoSeconds","formatTimeToReadable","unit","Math","floor","m","h","days","hours","minutes","seconds","parseJson","str","e","transformToClaimViewModel","data","payout","userCorrectStake","user_correct_stake","transformToOracleConfig","payment_token","bondToken","blockHeight","block_height","Date","defaultChallengeWindowDuration","default_challenge_window_duration","finalArbitrator","final_arbitrator","finalArbitratorInvokeAmount","final_arbitrator_invoke_amount","gov","maxOutcomes","max_outcomes","minInitialChallengeWindowDuration","min_initial_challenge_window_duration","resolutionFeePercentage","resolution_fee_percentage","fee","validityBond","validity_bond","fluxMarketCap","flux_market_cap","totalValueStaked","total_value_staked","DataRequestType","transformToUserStakesViewModel","userStake","resolutionWindows","stakedResolutionWindow","stakedOutcome","bondedOutcome","data_request_id","total_stake","transformToUserStakes","userStakes","currentOutcomeStakes","data_request","finalStakeToken","finalizedOutcome","claimPayout","transformToResolutionWindow","bonded_outcome","outcomeStakes","outcome_stakes","os","outcomeStake","highestOutcomeStake","bond_size","end_time","eq","user_stakes","bondSize","endTime","filled","winningOutcomeStake","transformToDataRequestListItem","requestor","sources","Api","Arbitrator","transformToDataRequestViewModel","resolution_windows","rw","reduce","prev","curr","parsedDataType","settlement_time","description","endPoint","end_point","sourcePath","source_path","outcomes","final_arbitrator_triggered","tags","total_correct_bonded_staked","total_incorrect_staked","paid_fee","account_stakes","ac","settlementTime","finalArbitratorTriggered","totalCorrectStaked","totalIncorrectStaked","paidFee","loggedInAccountClaim","InMemoryCache","link","createHttpLink","uri","graphqlClient","ApolloClient","defaultOptions","watchQuery","fetchPolicy","getAllDataRequests","limit","offset","onlyArbitratorRequests","gql","variables","response","paginatedDataRequests","dataRequests","dr","getDataRequestById","doesDataRequestExists","request","search","isNaN","url","routePaths","dataRequestDetail","SearchConnector","history","useHistory","handleSearch","Button","disabled","Dialog","open","isInfoDialog","onRequestClose","onSubmitClick","canSubmit","hideButtons","paperClassName","paper","DialogTitle","DialogContent","content","DialogActions","cancelButton","confirmButton","Input","input","helperText","NumberInput","showMax","onMaxClick","StorageManagerDialog","amountFormatted","formValues","setFormValues","errors","amountToWithdraw","lte","validateStorageManagerFormValues","handleMaxClick","formItem","formInput","dialogsSlice","createSlice","initialState","stakeDialog","unstakeDialog","storageManager","reducers","setStakeDialogOpen","state","action","payload","setUnstakeDialogOpen","setStorageManagerDialogOpen","StorageManagerDialogConnector","dialogs","dispatch","useDispatch","handleRequestClose","handleSumbit","withdrawStorage","Menu","onLoginClick","onLogoutClick","onStorageManagerClick","menuAnchorEl","setMenuAnchorEl","handleMenuClose","menu","topBar","to","logoWrapper","logo","bottomBar","menuItems","routes","route","inNavigation","menuItem","menuLink","activeClassName","exact","navPath","rightMenu","accountLinks","moreMenu","IconButton","iconButton","anchorEl","keepMounted","Boolean","onClose","mobileOnly","transformToWhitelistItemViewModel","customFee","parsedCustomFee","custom_fee","Fixed","Multiplier","active","codeBaseUrl","code_base_url","interfaceName","interface_name","storageBalanceRequest","active_staking","total_staked","total_claimed","whitelistItem","whitelist_item","combineOutcomeStakes","forEach","internalId","currentItem","Array","values","getUserStakesByRequestIdAndAccountId","requestId","stakes","getUserStakesByRequestId","getUserStakesByAccountId","filters","getUnclaimedStakesByAccountId","loading","accountStakes","accountStakesTotal","accountRequests","accountRequestsTotal","unclaimedStakes","accountSlice","setAccountErrors","setAccountLoading","setAccount","setAccountDetail","setAccountStakes","setAccountStakesTotal","setAccountInfo","setAccountUnclaimedStakes","setAccountRequests","setAccountRequestsTotal","loadAccountStakes","page","loadAccountRequests","requests","appConfigSlice","setAppConfigLoading","setAppConfig","MenuConnector","handleLoginClick","handleLogoutClick","handleStorageManagerClick","useEffect","Footer","footer","footerWrapper","Page","hasNavigation","body","Pagination","onChangePage","rowsPerPage","pagination","aria-label","currentPage","totalPages","OutcomeStakesOverview","onRequestPageChange","totalItems","showPagination","TableContainer","container","component","Paper","Table","table","TableHead","tableHead","TableRow","TableCell","TableBody","linkCell","ceil","AccountOutcomeStakesConnector","params","useParams","setPage","handleRequestPageChange","newPage","AccountStakesPage","DataRequestsOverview","noRequests","AccountRequestsConnector","dataRequestsTotal","AccountRequestsPage","AccountUnclaimedStakesConnector","AccountUnclaimedPage","ExternalLink","href","window","WhitelistInfoCard","whitelist","WhitelistInfoCardConnector","OracleConfigInfoCard","num","oracleConfig","OracleConfigInfoCardConnector","detail","getOracleConfigById","oracleConfigSlice","setOracleConfigDetail","setOracleConfigLoading","EmptyDiv","AccountStakesInfoCard","finalizedRound","tokenSymbol","stakeInfo","noStakes","AccountStakesInfoCardConnector","CallDataInfoCard","tableHeadRow","source","tableItem","tableItemInner","possibleOutcomes","CallDataInfoConnector","Countdown","onComplete","DataRequestDetailHeader","onStakeClick","onClaimClick","onUnstakeClick","onFinalizeClick","now","getTime","canInteract","setInteract","isFinalized","canFinalize","currentResolutionWindow","canDataRequestBeFinalized","hasClaimed","canUnstake","onCountdownComplete","dataRequestsSlice","detailLoading","totalDataRequests","dataRequestFilters","setDataRequestsErrors","setDataRequestsLoading","setDataRequestDetailLoading","setDataRequests","setDataRequestDetail","setTotalDataRequest","setDataRequestAccountStakes","setDataRequestFilters","loadDataRequests","getState","loadDataRequestById","accountStakesRequest","accountOutcomeStakes","DataRequestDetailHeaderConnector","handleStakeClick","handleUnstakeClick","handleFinalizeClick","finalizeDataRequest","handleClaimClick","claimDataRequest","RequestInfoCard","t","join","RequestInfoConnector","OptionSwitch","labelA","labelB","Switch","thumb","track","switchBase","_","checked","Select","InputLabel","labelId","select","target","MenuItem","StakeDialog","isInvalid","createDefaultStakeFormValues","handleAnswerChange","message","accountBalance","includes","currentRound","previousRound","validateStakeFormValues","form","StakeDialogConnector","handleSubmit","stakeFormValues","stakeDataRequest","StakerReport","stakerReport","Object","keys","outcomeInfo","OutcomeStakeInfo","tableComponent","ResolutionWindowAccordion","resolutionWindow","defaultExpanded","isWindowClosed","setWindowClosed","percentageFilled","Accordion","accordion","AccordionSummary","expandIcon","roundTitle","AccordionDetails","details","ResolutionWindowInfoCard","slice","reverse","noWindows","ResolutionWindowsInfoConnector","UnstakeDialog","selectedStakedOutcome","stakeIndex","validateUnstakeFormValues","outcomeIndex","selectedOutcomeStake","UnstakeDialogConnector","unstakeDataRequest","DataRequestsOverviewConnector","pathname","location","Checkbox","FormControlLabel","control","DataRequestsOverviewFilters","totalRequests","onFilterChange","wrapper","subtitle","DataRequestsOverviewFiltersConnector","urlParams","URLSearchParams","append","HomeDataRequestsConnector","latestRequests","stats","HomeHeader","searchInput","HomeHeaderConnector","StatCard","statLabel","statValue","OracleStats","tokenMarketCap","tokenPrice","marketCapFormatted","millify","OracleStatsConnector","getTokenMarketInfoByTicker","ticker","currency","fetch","json","price","market_data","current_price","marketCap","market_cap","statsSlice","setTotalRequestsStat","setTokenPriceStat","setTokenMarketCapStat","setLatestRequestsStat","loadStats","then","accountUnclaimed","useInterval","path","useLocation","whitelistInfo","isRequestInterface","tabBar","lastCard","combineReducers","createEnhancer","REACT_APP_APP_ENV","composeWithDevTools","applyMiddleware","thunk","preloadedState","enhancer","createStore","configureStore","initProviders","ReactDOM","render","basename","hashType","StylesProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.f9a2271d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"OutcomeStakesOverview_container__d2gou\",\"tableHead\":\"OutcomeStakesOverview_tableHead__2uKGi\",\"linkCell\":\"OutcomeStakesOverview_linkCell__1JQo4\",\"pagination\":\"OutcomeStakesOverview_pagination__9qflK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"OptionSwitch_root__URwjr\",\"options\":\"OptionSwitch_options__3MHNp\",\"thumb\":\"OptionSwitch_thumb__2cImY\",\"track\":\"OptionSwitch_track__2IbZB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"StakerReport_container__1KMDE\",\"link\":\"StakerReport_link__28dEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"RequestInfoCard_titleWrapper__3noPW\",\"title\":\"RequestInfoCard_title__3_LHr\",\"requestDetails\":\"RequestInfoCard_requestDetails__1YEfP\",\"item\":\"RequestInfoCard_item__10SUD\",\"link\":\"RequestInfoCard_link__1uLuv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"UnstakeDialog_form__C2-VH\",\"formItem\":\"UnstakeDialog_formItem__3mtQ-\",\"formInput\":\"UnstakeDialog_formInput__3LoeJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"DataRequestDetailPage_card__3etft\",\"lastCard\":\"DataRequestDetailPage_lastCard__1-jEK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TabBar_root__2tnOA\",\"tab\":\"TabBar_tab__t4I0-\",\"indicator\":\"TabBar_indicator__2rgIT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"LabeledText_root___tErh\",\"label\":\"LabeledText_label__3rjG2\",\"tooltip\":\"LabeledText_tooltip__1GkBn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"AccountDetailsInfoCard_titleWrapper__13sTy\",\"card\":\"AccountDetailsInfoCard_card__15fyo\",\"title\":\"AccountDetailsInfoCard_title__1q59t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__30IoI\",\"footerWrapper\":\"Footer_footerWrapper__2JRgQ\",\"logo\":\"Footer_logo__1GRAA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabBar\":\"AccountPage_tabBar__nyIhL\",\"card\":\"AccountPage_card__21C88\",\"title\":\"AccountPage_title__21f5o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"WhitelistInfoCard_titleWrapper__aGhS9\",\"card\":\"WhitelistInfoCard_card__3P3YS\",\"title\":\"WhitelistInfoCard_title__38y1w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"OracleConfigInfoCard_titleWrapper__1ddeR\",\"title\":\"OracleConfigInfoCard_title__3mNUJ\",\"card\":\"OracleConfigInfoCard_card__ut_iI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"ResolutionWindowInfoCard_titleWrapper__1xIda\",\"title\":\"ResolutionWindowInfoCard_title__14x7-\",\"noWindows\":\"ResolutionWindowInfoCard_noWindows__2uZTP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"OutcomeStakeInfo_container__1nmxk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accordion\":\"ResolutionWindowAccordion_accordion__XN6Ij\",\"roundTitle\":\"ResolutionWindowAccordion_roundTitle__1OvP0\",\"details\":\"ResolutionWindowAccordion_details__9JJHE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HomeHeader_title__3isjk\",\"search\":\"HomeHeader_search__2w-zi\",\"searchInput\":\"HomeHeader_searchInput__39vB0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"StatCard_card__1M2jM\",\"statLabel\":\"StatCard_statLabel__N14eN\",\"statValue\":\"StatCard_statValue__F5gOf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"InformationRows_root__1CR4v\",\"item\":\"InformationRows_item__1QOpX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"StorageManagerDialog_form__2SPdU\",\"formItem\":\"StorageManagerDialog_formItem__1Ps1x\",\"formInput\":\"StorageManagerDialog_formInput__12vWX\",\"error\":\"StorageManagerDialog_error__3REyq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Page_page__1vav1\",\"body\":\"Page_body__34Ach\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subtitle\":\"DataRequestsOverviewFilters_subtitle__3ViXR\",\"wrapper\":\"DataRequestsOverviewFilters_wrapper__2lMdn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__35wN0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoTooltipWrapper\":\"InfoToolTip_infoTooltipWrapper__tIv_o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FakeLinkButton_button__3y9OQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Lf63\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__CcIoD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"ExternalLink_link__1Kew6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"Select_select__JK0vz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checked\":\"Checkbox_checked__2Gh-t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"OracleStats_root__2Ae20\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"SearchResultPage_title__1YHPd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Menu_root__3JE0d\",\"menu\":\"Menu_menu__2sZJU\",\"topBar\":\"Menu_topBar__1xIMt\",\"bottomBar\":\"Menu_bottomBar__1J-Xi\",\"menuItems\":\"Menu_menuItems__1E3rU\",\"accountLinks\":\"Menu_accountLinks__3tRwW\",\"menuItem\":\"Menu_menuItem__3mHfR\",\"menuLink\":\"Menu_menuLink__2oVrc\",\"menuLink--active\":\"Menu_menuLink--active__3XNkb\",\"link\":\"Menu_link__1lvRI\",\"logoWrapper\":\"Menu_logoWrapper__3tZ4v\",\"logo\":\"Menu_logo__2SxFW\",\"rightMenu\":\"Menu_rightMenu__GMj4U\",\"moreMenu\":\"Menu_moreMenu__1jmd5\",\"mobileOnly\":\"Menu_mobileOnly__Yj8kA\"};","import React from 'react';\nimport classnames from 'classnames';\nimport { CardProps, default as MuiCard } from '@material-ui/core/Card';\n\nimport s from './Card.module.scss';\n\nexport default function Card(props: CardProps) {\n    return (\n        <MuiCard {...props} className={classnames(s.card, props.className)} />\n    );\n}\n","import React, { ReactElement } from 'react';\nimport classnames from 'classnames';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport s from './TabBar.module.scss';\n\nexport interface TabBarItem {\n    id: string;\n    label: string;\n    show: boolean;\n}\n\ninterface Props {\n    items: TabBarItem[];\n    activeId: string;\n    onTabClick: (item: TabBarItem) => void;\n    className?: string;\n    tabClassName?: string;\n    variant?: 'standard' | 'scrollable' | 'fullWidth';\n}\n\nexport default function TabBar({\n    items,\n    onTabClick,\n    activeId,\n    variant = 'standard',\n    tabClassName = '',\n    className = '',\n}: Props): ReactElement {\n    return (\n        <Tabs\n            classes={{ indicator: s.indicator }}\n            className={classnames(s.root, className)}\n            variant={variant}\n            value={activeId}\n        >\n            {items.filter(tab => tab.show).map(tab => (\n                <Tab\n                    key={tab.id}\n                    onClick={() => onTabClick(tab)}\n                    className={classnames(s.tab, tabClassName)}\n                    label={tab.label}\n                    value={tab.id}\n                />\n            ))}\n        </Tabs>\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport InfoIcon from '@material-ui/icons/Info';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport s from './InfoToolTip.module.scss';\n\ninterface Props {\n    text: string;\n    className?: string;\n}\n\nexport default function InfoToolTip({\n    text,\n    className = '',\n}: Props) {\n    return (\n        <Tooltip title={text} arrow>\n            <div className={classnames(className, s.infoTooltipWrapper)}>\n                <InfoIcon />\n            </div>\n        </Tooltip>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nimport s from './LabeledText.module.scss';\nimport InfoToolTip from '../../components/InfoToolTip';\n\ninterface Props {\n    label: string;\n    info?: string;\n    className?: string;\n}\n\nexport default function LabeledText({\n    label,\n    info = '',\n    children,\n    className,\n}: PropsWithChildren<Props>) {\n    return (\n        <div className={classnames(s.root, className)}>\n            <span className={s.label}>\n                {label}\n                {info && <InfoToolTip className={s.tooltip} text={info} />}\n            </span>\n            <span>{children}</span>\n        </div>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport LabeledText from '../../compositions/LabeledText';\n\nimport s from './InformationRows.module.scss';\n\nexport interface InformationRow {\n    label: string;\n    value: ReactElement;\n    info?: string;\n}\n\ninterface Props {\n    rows: InformationRow[];\n}\n\nexport default function InformationRows({\n    rows,\n}: Props) {\n    return (\n        <div className={s.root}>\n            {rows.map((row) => {\n                return (\n                    <LabeledText key={row.label} className={s.item} label={row.label} info={row.info}>\n                        {row.value}\n                    </LabeledText>\n                );\n            })}\n        </div>\n    );\n}\n","import translations from './lang/translations.eng.json';\n\ninterface Attributes {\n    [key: string]: string;\n}\n\nfunction replaceAttributes(label: string, options: Attributes = {}): string {\n    // Replaces any \":key\" with a value in the options\n    return label.replace(/:(\\w+)/gi, (word) => {\n        const key = word.replace(/^:/, '');\n\n        if (options[key] === undefined || options[key] === null) {\n            return '';\n        }\n\n        return options[key];\n    });\n}\n\nexport function ucFirstLetter(text: string): string {\n    return text.charAt(0).toUpperCase() + text.substring(1);\n}\n\n\nexport default function trans(key: string, attributes?: Attributes, uppercaseFirstLetter?: boolean): string {\n    // @ts-ignore\n    const result: string = translations[key];\n\n    if (!result) {\n        return key;\n    }\n\n    const resultWithAttributes = replaceAttributes(result, attributes);\n    return uppercaseFirstLetter ? ucFirstLetter(resultWithAttributes) : resultWithAttributes;\n}\n\nexport function booleanToYesNo(bool = false): string {\n    return bool ? trans('global.yes') : trans('global.no');\n}\n","import Big from \"big.js\";\n\n/**\n * Converts the smalles unit to a human readable amount\n *\n * @export\n * @param {string} amount\n * @param {number} [decimals=18]\n * @param {number} [dp=2]\n * @return {string}\n */\nexport function formatToken(amount: string, decimals = 18, dp = 2): string {\n    const denominator = new Big(10).pow(decimals);\n    return new Big(amount).div(denominator).round(dp, 0).toFixed(dp);\n}\n\n/**\n * Converts the amount to the smallest unit (default 18)\n *\n * @export\n * @param {string} amount\n * @param {number} [decimals=18]\n * @return {string}\n */\nexport function toToken(amount: string, decimals = 18): string {\n    const denominator = new Big(10).pow(decimals);\n    return new Big(amount).mul(denominator).toFixed(0);\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\nimport InformationRows from '../InformationRows';\nimport trans from '../../translation/trans';\nimport { Account, AccountInfo } from '../../models/Account';\n\nimport s from './AccountDetailsInfoCard.module.scss';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { AppConfig } from '../../models/AppConfig';\n\nexport interface Props {\n    account?: Account;\n    appConfig: AppConfig;\n    accountInfo: AccountInfo;\n}\n\nexport default function AccountDetailsInfoCard({\n    account,\n    appConfig,\n    accountInfo,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('accountDetailsInfoCard.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[\n                        {\n                            label: trans('accountDetailsInfoCard.label.balance'),\n                            value: <span>{formatToken(account?.balance ?? '0', appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.activeStaking'),\n                            value: <span>{formatToken(accountInfo.activeStaking, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.totalStaked'),\n                            value: <span>{formatToken(accountInfo.totalStaked, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.totalClaimed'),\n                            value: <span>{formatToken(accountInfo.totalClaimed, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.storageUsed'),\n                            info: trans('accountDetailsInfoCard.info.storageUsed', { nativeToken: appConfig.nativeTokenSymbol }),\n                            value: <span>{formatToken(accountInfo.storageUsed, appConfig.nativeTokenDecimals, 4)} {appConfig.nativeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.storageUnused'),\n                            info: trans('accountDetailsInfoCard.info.storageUnused', { nativeToken: appConfig.nativeTokenSymbol }),\n                            value: <span>{formatToken(accountInfo.storageAvailable, appConfig.nativeTokenDecimals, 4)} {appConfig.nativeTokenSymbol}</span>,\n                        },\n                    ]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport AccountDetailsInfoCard from '../../containers/AccountDetailsInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\nexport default function AccountDetailsInfoCardConnector() {\n    const accountDetail = useSelector((store: Reducers) => store.account.accountDetail);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    return (\n        <AccountDetailsInfoCard\n            account={accountDetail.account}\n            accountInfo={accountDetail.info}\n            appConfig={appConfig}\n        />\n    );\n}\n","import React, { FormEvent, PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nimport s from './FakeLinkButton.module.scss';\n\ninterface Props {\n    className?: string;\n    onClick?: (event: FormEvent) => void;\n}\n\nexport default function FakeLinkButton({\n    children,\n    className,\n    onClick,\n}: PropsWithChildren<Props>) {\n    return (\n        <button onClick={onClick} className={classnames(s.button, className)}>\n            {children}\n        </button>\n    );\n}\n","import React, { FormEvent, useCallback } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SearchIcon from '@material-ui/icons/Search';\n\ninterface Props {\n    label: string;\n    value?: string;\n    className?: string;\n    onChange?: (value: string) => void;\n}\n\nexport default function SearchInput({\n    label,\n    className,\n    value,\n    onChange = () => {},\n}: Props) {\n    const handleChange = useCallback((event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        onChange(event.currentTarget.value);\n    }, [onChange]);\n\n    return (\n        <TextField\n            label={label}\n            className={className}\n            value={value}\n            type=\"search\"\n            onChange={handleChange}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"start\">\n                        <SearchIcon />\n                    </InputAdornment>\n                ),\n            }}\n        />\n    );\n}\n","import React, { FormEvent, useCallback, useState } from 'react';\nimport SearchInput from '../../components/SearchInput';\nimport trans from '../../translation/trans';\n\ninterface Props {\n    onSearch: (query: string) => void;\n    className?: string;\n    inputClassName?: string;\n}\n\nexport default function SearchForm({\n    onSearch,\n    className,\n    inputClassName,\n}: Props) {\n    const [query, setQuery] = useState('');\n    const handleSearchSubmit = useCallback((event: FormEvent) => {\n        event.preventDefault();\n        onSearch(query);\n    }, [query, onSearch]);\n\n    return (\n        <form className={className} onSubmit={handleSearchSubmit}>\n            <SearchInput\n                label={trans('menu.label.search')}\n                onChange={v => setQuery(v)}\n                value={query}\n                className={inputClassName}\n            />\n            <input type=\"submit\" hidden />\n        </form>\n    );\n}\n","const cacheStorage = new Map<string, any>();\nconst creationPromises = new Map<string, Promise<any>>();\n\n/**\n * Caches an item by it's id and returns it if it's requested again.\n * If it does not exist it asks you to create the item\n *\n * @export\n * @template T\n * @param {string} id\n * @param {() => Promise<T>} createCallback\n * @return {Promise<T>}\n */\nexport default async function cache<T>(id: string, createCallback: () => Promise<T>, ttl?: number): Promise<T> {\n    const item = cacheStorage.get(id);\n    if (item) return item;\n\n    // No need to create another item when the request is already going\n    // Instead we just redirect the promise back to this call\n    // Caching will be handled by the iniator\n    const onGoingRequest = creationPromises.get(id);\n    if (onGoingRequest) return onGoingRequest;\n\n    // Keep track of all ongoing promises\n    const createRequest = createCallback();\n    creationPromises.set(id, createRequest);\n\n    try {\n        const createdItem = await createRequest;\n        cacheStorage.set(id, createdItem);\n\n        if (ttl) {\n            setTimeout(() => {\n                cacheStorage.delete(id);\n            }, ttl);\n        }\n\n        return createdItem;\n    } catch (error) {\n        throw error;\n    } finally {\n        creationPromises.delete(id);\n    }\n}\n","import Big from \"big.js\";\nimport trans from \"../translation/trans\";\n\nexport enum OutcomeType {\n    Answer,\n    Invalid\n}\n\nexport interface OutcomeAnswer {\n    answer: string;\n    type: OutcomeType.Answer;\n}\n\nexport interface OutcomeInvalid {\n    type: OutcomeType.Invalid;\n}\n\nexport type Outcome = OutcomeAnswer | OutcomeInvalid;\n\n\nexport interface OutcomeNumber {\n    Number: {\n        value: string;\n        multiplier: string;\n        negative: boolean;\n    }\n}\n\nexport interface OutcomeString {\n    String: string;\n}\n\nexport interface ParsedOutcome {\n    Answer: OutcomeNumber | OutcomeString;\n}\n\nexport function transformToOutcome(outcome: string): Outcome {\n    if (outcome === 'Invalid') {\n        return {\n            type: OutcomeType.Invalid,\n        }\n    }\n\n    const parsedOutcome: ParsedOutcome = JSON.parse(outcome);\n\n    if ('String' in parsedOutcome.Answer) {\n        return {\n            answer: parsedOutcome.Answer.String,\n            type: OutcomeType.Answer,\n        };\n    }\n\n    const number = new Big(parsedOutcome.Answer.Number.value).div(parsedOutcome.Answer.Number.multiplier);\n\n    if (parsedOutcome.Answer.Number.negative) {\n        number.s = -1;\n    }\n\n    return {\n        answer: number.toString(),\n        type: OutcomeType.Answer,\n    };\n}\n\nexport function transfromOutcomeToString(outcome: Outcome): string {\n    if (outcome.type === OutcomeType.Invalid) {\n        return trans('outcome.invalid');\n    }\n\n    return `\"${outcome.answer}\"`;\n}\n\nexport function isSameOutcome(a?: Outcome, b?: Outcome): boolean {\n    if (typeof a === 'undefined' || typeof b === 'undefined') {\n        return false;\n    }\n\n    if (a.type === OutcomeType.Invalid && b.type === OutcomeType.Invalid) {\n        return true;\n    }\n\n    return JSON.stringify(a) === JSON.stringify(b);\n}\n","import Big from 'big.js';\n\nexport const API_URL = process.env.REACT_APP_API_URL ?? '';\nexport const COINGECKO_API_URL = process.env.REACT_APP_COINGECKO_API_URL || '';\nexport const DEFAULT_PAGINATION_LIMIT = 10;\nexport const COINGECKO_TOKEN_TICKER = 'near';\n\nexport const NEAR_NETWORK = process.env.REACT_APP_NEAR_NETWORK as any ?? 'testnet';\nexport const NEAR_NULL_CONTRACT = process.env.REACT_APP_NEAR_NULL_CONTRACT ?? 'null_address.near';\nexport const NEAR_ORACLE_CONTRACT_ID = process.env.REACT_APP_NEAR_ORACLE_CONTRACT_ID ?? 'oracle.flux-dev'\nexport const NEAR_MAX_GAS = '250000000000000';\nexport const STORAGE_BASE = '30000000000000000000000';\nexport const HOME_REFRESH_INTERVAL = 2000;\nexport const REQUEST_DETAIL_REFRESH_INTERVAL = 5000;\nexport const REQUEST_LIST_REFRESH_INTERVAL = 5000;\n\nBig.PE = 1000000;\n","import { WalletConnection, utils, transactions } from \"near-api-js\";\nimport BN from 'bn.js';\nimport { NEAR_ORACLE_CONTRACT_ID } from \"../../../config\";\nimport { Outcome, OutcomeType } from \"../../../models/DataRequestOutcome\";\nimport { DataRequestViewModel } from \"../../../models/DataRequest\";\nimport Big from \"big.js\";\nimport { OracleConfigGraphData } from \"../../../models/OracleConfig\";\nimport cache from \"../../../utils/cache\";\n\nexport interface TransactionViewOptions {\n    methodName: string;\n    args?: object;\n}\n\nexport interface TransactionCallOptions extends TransactionViewOptions {\n    gas: string;\n    amount: string;\n}\n\nexport interface TransactionOption {\n    receiverId: string;\n    transactionOptions: TransactionCallOptions[];\n}\n\nexport async function batchSendTransactions(walletConnection: WalletConnection, txs: TransactionOption[], callbackUrl?: string) {\n    const accountId = walletConnection.getAccountId();\n    const localKey = await walletConnection._near.connection.signer.getPublicKey(accountId, walletConnection._near.connection.networkId);\n    const block = await walletConnection._near.connection.provider.block({ finality: 'final' });\n    const blockHash = utils.serialize.base_decode(block.header.hash);\n\n    const resultTxs = await Promise.all(txs.map(async ({ receiverId, transactionOptions }, index) => {\n        const actions = transactionOptions.map(tx => transactions.functionCall(tx.methodName, tx.args ?? {}, new BN(tx.gas), new BN(tx.amount)));\n        const accessKey = await walletConnection.account().accessKeyForTransaction(receiverId, actions, localKey);\n\n        if (!accessKey) {\n            throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);\n        }\n\n        const publicKey = utils.PublicKey.from(accessKey.public_key);\n        const nonce = accessKey.access_key.nonce + index + 1;\n\n        return transactions.createTransaction(accountId, publicKey, receiverId, nonce, actions, blockHash);\n    }));\n\n    return walletConnection.requestSignTransactions(resultTxs, callbackUrl);\n}\n\nexport async function getLatestOracleConfig(walletConnection: WalletConnection): Promise<OracleConfigGraphData> {\n    const account = walletConnection.account();\n\n    return cache('near_latest_oracle_config', async () => {\n        return account.viewFunction(NEAR_ORACLE_CONTRACT_ID, 'get_config', {});\n    });\n}\n\nexport async function getTokenBalance(walletConnection: WalletConnection, accountId: string): Promise<string> {\n    const account = walletConnection.account();\n    const config = await getLatestOracleConfig(walletConnection);\n\n    return account.viewFunction(config.stake_token, 'ft_balance_of', {\n        account_id: accountId,\n    });\n}\n\nexport function createNearOutcome(dataRequest: DataRequestViewModel, outcome: Outcome): any {\n    if (outcome.type === OutcomeType.Invalid) {\n        return 'Invalid';\n    }\n\n    if (dataRequest.data_type === 'String') {\n        return {\n            'Answer': {\n                'String': outcome.answer,\n            }\n        }\n    }\n\n    let number = new Big(outcome.answer);\n    const isNegative = number.lt(0);\n\n    number = number.mul(dataRequest.number_multiplier!);\n\n    // Convert back to positive to store inside a u128\n    if (isNegative) {\n        number = number.mul(-1);\n    }\n\n    return {\n        'Answer': {\n            'Number': {\n                value: number.toFixed(0),\n                negative: isNegative,\n                multiplier: dataRequest.number_multiplier,\n            }\n        }\n    }\n}\n","import { connect, Near, WalletConnection, keyStores } from \"near-api-js\";\nimport { NEAR_NETWORK, NEAR_NULL_CONTRACT } from \"../../../config\";\n\nexport interface ConnectConfig {\n    accountId?: string;\n    nearInstance?: Near;\n    walletInstance?: WalletConnection;\n    customNodeUrl?: string;\n    customWalletUrl?: string;\n}\n\nexport interface NetworkConfig {\n    networkId: string,\n    nodeUrl: string,\n    contractName?: null,\n    walletUrl?: string,\n    initialBalance?: string\n}\n\nexport function createNetworkConfig(connectConfig: ConnectConfig): NetworkConfig {\n    if (NEAR_NETWORK === 'mainnet') {\n        return {\n            networkId: 'mainnet',\n            nodeUrl: 'https://rpc.mainnet.near.org',\n            walletUrl: 'https://wallet.near.org',\n        };\n    }\n\n    return {\n        networkId: 'testnet',\n        nodeUrl: connectConfig.customNodeUrl || 'https://rpc.testnet.near.org',\n        contractName: null,\n        walletUrl: connectConfig.customWalletUrl || 'https://wallet.testnet.near.org',\n        initialBalance: '100000000',\n    };\n}\n\nlet connectedNear: Near | undefined = undefined;\n\n/**\n * Connects with NEAR\n *\n * @export\n * @param {ConnectConfig} connectConfig\n * @param {SdkConfig} sdkConfig\n * @return {Promise<Near>}\n */\nexport async function connectNear(connectConfig: ConnectConfig): Promise<Near> {\n    if (connectConfig.nearInstance) {\n        return connectConfig.nearInstance;\n    }\n\n    if (connectedNear) {\n        return connectedNear;\n    }\n\n    const networkConfig = createNetworkConfig(connectConfig);\n\n    connectedNear = await connect({\n        ...networkConfig,\n        deps: {\n            keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n        },\n    });\n\n    return connectedNear;\n}\n\nlet walletConnection: WalletConnection | undefined = undefined;\n\nexport async function connectWallet() {\n    if (walletConnection) {\n        return walletConnection;\n    }\n\n    const near = await connectNear({});\n    walletConnection = new WalletConnection(near, NEAR_NULL_CONTRACT);\n\n    return walletConnection;\n}\n","import Big from \"big.js\";\nimport { WalletConnection } from \"near-api-js\";\nimport { NEAR_MAX_GAS } from \"../../../config\";\nimport cache from \"../../../utils/cache\";\nimport { TransactionOption } from \"./NearService\";\n\n/**\n * Gets the minimum amount storage required for a oracle transaction\n *\n * @export\n * @param {WalletConnection} walletConnection\n * @return {Promise<Big>}\n */\nexport async function getMinimumStorage(contractId: string, walletConnection: WalletConnection): Promise<Big> {\n    try {\n        const result = await cache(`${contractId}_minimum_storage_balance`, async () => {\n            const account = walletConnection.account();\n            const minimumBalance = await account.viewFunction(contractId, 'storage_balance_bounds', {});\n            return Big(minimumBalance.min);\n        });\n\n        return result;\n    } catch (error) {\n        console.error('[getMinimumStorage]', error);\n        return new Big(0);\n    }\n}\n\n/**\n * Get the current storage balance of the specific account\n *\n * @export\n * @param {WalletConnection} walletConnection\n * @return {Promise<{ total: Big, available: Big }>}\n */\nexport async function getStorageBalance(contractId: string, accountId: string, walletConnection: WalletConnection): Promise<{ total: Big, available: Big }> {\n    try {\n        const account = walletConnection.account();\n        const storage = await account.viewFunction(contractId, 'storage_balance_of', {\n            account_id: accountId,\n        });\n\n        return {\n            total: storage ? new Big(storage.total) : new Big(0),\n            available: storage ? new Big(storage.available) : new Big(0),\n        };\n    } catch (error) {\n        console.error('[getStorageBalance]', error);\n        return {\n            total: new Big(0),\n            available: new Big(0),\n        };\n    }\n}\n\n/**\n * Creates a storage deposit transaction if it's required\n *\n * @export\n * @param {string} contractId\n * @param {string} accountId\n * @param {WalletConnection} walletConnection\n * @param {Big} extraStorage Can be used for calls that require way more than the minimum storage requirements\n * @return {(Promise<TransactionOption | null>)}\n */\nexport async function createStorageTransaction(contractId: string, accountId: string, walletConnection: WalletConnection, extraStorage: Big = new Big(0)): Promise<TransactionOption | null> {\n    const minimumStorageRequired = await getMinimumStorage(contractId, walletConnection);\n    const storageBalance = await getStorageBalance(contractId, accountId, walletConnection);\n    const storageRequired = minimumStorageRequired.add(extraStorage);\n\n    if (storageBalance.available.lt(storageRequired)) {\n        return {\n            receiverId: contractId,\n            transactionOptions: [{\n                amount: storageRequired.sub(storageBalance.available).toString(),\n                gas: NEAR_MAX_GAS,\n                methodName: 'storage_deposit',\n                args: {\n                    accountId,\n                }\n            }],\n        };\n    }\n\n    return null;\n}\n","import { Account } from \"../../models/Account\";\nimport { AppConfig } from \"../../models/AppConfig\";\nimport { DataRequestViewModel } from \"../../models/DataRequest\";\nimport { Outcome } from \"../../models/DataRequestOutcome\";\nimport { TokenViewModel } from \"../../models/Token\";\nimport cache from \"../../utils/cache\";\nimport { IProvider } from \"./IProvider\";\nimport NearProvider from \"./near/NearProvider\";\n\nlet providers: IProvider[] = [];\nlet providerInitPromise: Promise<boolean[]>;\n\nexport async function initProviders() {\n    if (providerInitPromise) {\n        await providerInitPromise;\n        return;\n    }\n\n    providers = [\n        new NearProvider(),\n    ];\n\n    providerInitPromise = Promise.all(providers.map(p => p.init()));\n    await providerInitPromise;\n}\n\nexport function getProviderById(id: string): IProvider | undefined {\n    return providers.find(p => p.id === id);\n}\n\nexport function getLoggedInProvider() {\n    return providers.find(p => p.isLoggedIn());\n}\n\nexport async function loginWithProvider(providerId: string) {\n    const provider = getProviderById(providerId);\n    return provider?.login() ?? false;\n}\n\nexport async function logoutWithProvider(providerId: string) {\n    const provider = getProviderById(providerId);\n    return provider?.logout() ?? false;\n}\n\nexport async function getLoggedInAccountId(): Promise<string | undefined> {\n    const provider = getLoggedInProvider();\n    return provider ? provider.getLoggedInAccountId() : undefined;\n}\n\nexport async function getAccountInfoWithProvider(providerId: string, accountId: string): Promise<Account | undefined> {\n    const provider = getProviderById(providerId);\n    const account = await provider?.getAccountInfo(accountId);\n    if (!account || !provider) return undefined;\n\n    return {\n        accountId: account.accountId,\n        balance: account.balance,\n        providerId: provider.id,\n        storageAvailable: account.storageAvailable,\n        storageTotal: account.storageTotal,\n        storageUsed: account.storageUsed,\n    };\n}\n\nexport async function getLoggedInAccount(): Promise<Account | undefined> {\n    const provider = getLoggedInProvider();\n\n    if (!provider) {\n        return undefined;\n    }\n\n    const loggedInAccountId = await provider.getLoggedInAccountId();\n\n    if (!loggedInAccountId) {\n        return undefined;\n    }\n\n    return getAccountInfoWithProvider(provider.id, loggedInAccountId);\n}\n\nexport async function getAppConfigForProvider(providerId: string): Promise<AppConfig> {\n    const provider = getProviderById(providerId);\n    const config = await provider?.getAppConfig();\n\n    return {\n        nativeTokenDecimals: config?.nativeTokenDecimals ?? 18,\n        nativeTokenSymbol: config?.nativeTokenSymbol ?? '?',\n        stakeTokenDecimals: config?.stakeTokenDecimals ?? 18,\n        stakeTokenSymbol: config?.stakeTokenSymbol ?? '?',\n    };\n}\n\nexport async function stakeWithProvider(providerId: string, amount: string, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.stake(amount, dataRequest, outcome) ?? false;\n}\n\nexport async function finalizeWithProvider(providerId: string, dataRequest: DataRequestViewModel): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.finalize(dataRequest) ?? false;\n}\n\nexport async function claimWithProvider(providerId: string, accountId: string, dataRequest: DataRequestViewModel): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.claim(accountId, dataRequest) ?? false;\n}\n\nexport async function unstakeWithProvider(providerId: string, amount: string, round: number, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.unstake(amount, round, dataRequest, outcome) ?? false;\n}\n\nexport async function getProviderStorageBalance(providerId: string, accountId: string): Promise<{ total: string, used: string, available: string }> {\n    const provider = getProviderById(providerId);\n    return provider?.getStorageBalance(accountId) ?? { total: '0', available: '0', used: '0' };\n}\n\nexport function withdrawStorage(providerId: string, amount: string) {\n    const provider = getProviderById(providerId);\n    provider?.withdrawStorage(amount);\n}\n\nexport async function getTokenInfo(providerId: string, contractId: string): Promise<TokenViewModel> {\n    return cache(`tokeninfo_${providerId}_${contractId}`, async () => {\n        const provider = getProviderById(providerId);\n        const token = await provider?.getTokenInfo(contractId);\n\n        return {\n            decimals: token?.decimals ?? 18,\n            name: token?.name ?? contractId,\n            symbol: token?.symbol ?? contractId,\n            contractId,\n        };\n    });\n}\n","import { IProvider } from \"../IProvider\";\nimport { NEAR_MAX_GAS, NEAR_NULL_CONTRACT, NEAR_ORACLE_CONTRACT_ID, STORAGE_BASE } from \"../../../config\";\nimport { isSameOutcome, Outcome } from \"../../../models/DataRequestOutcome\";\nimport { DataRequestViewModel } from \"../../../models/DataRequest\";\nimport Big from \"big.js\";\nimport { batchSendTransactions, createNearOutcome, getLatestOracleConfig, getTokenBalance, TransactionOption } from \"./NearService\";\nimport { connectWallet } from \"./NearConnectService\";\nimport { createStorageTransaction } from \"./StorageManagerService\";\nimport { Account } from \"../../../models/Account\";\nimport { TokenViewModel } from \"../../../models/Token\";\nimport { AppConfig } from \"../../../models/AppConfig\";\n\nexport default class NearProvider implements IProvider {\n    id = 'near';\n    nativeTokenSymbol = 'NEAR';\n    nativeTokenDecimals = 24;\n\n    async init() {\n        return true;\n    }\n\n    async login() {\n        const wallet = await connectWallet();\n        wallet.requestSignIn(NEAR_NULL_CONTRACT, 'oracle');\n        return true;\n    }\n\n    async logout() {\n        const wallet = await connectWallet();\n        wallet.signOut();\n        return true;\n    }\n\n    async isLoggedIn() {\n        const wallet = await connectWallet();\n        return wallet.isSignedIn();\n    }\n\n    async getLoggedInAccountId(): Promise<string> {\n        const wallet = await connectWallet();\n        return wallet.getAccountId();\n    }\n\n    async getAccountInfo(accountId: string): Promise<Omit<Account, 'providerId'>> {\n        try {\n            const wallet = await connectWallet();\n            const balance = await getTokenBalance(wallet, accountId);\n            const storageInfo = await this.getStorageBalance(accountId);\n\n            return {\n                accountId,\n                balance,\n                storageAvailable: storageInfo.available,\n                storageTotal: storageInfo.total,\n                storageUsed: storageInfo.used,\n            };\n        } catch (error) {\n            return {\n                accountId,\n                balance: '0',\n                storageAvailable: '0',\n                storageTotal: '0',\n                storageUsed: '0',\n            }\n        }\n    }\n\n    async stake(amount: string, dataRequest: DataRequestViewModel, outcome: Outcome) {\n        const wallet = await connectWallet();\n\n        const stakeOutcome = createNearOutcome(dataRequest, outcome);\n        const loggedInAccount = await this.getLoggedInAccountId();\n        const storageTransaction = await createStorageTransaction(NEAR_ORACLE_CONTRACT_ID, loggedInAccount, wallet);\n        const transactions: TransactionOption[] = [];\n\n        if (storageTransaction) {\n            transactions.push(storageTransaction);\n        }\n\n        transactions.push({\n            receiverId: dataRequest.config.stakeToken.contractId,\n            transactionOptions: [{\n                amount: '1',\n                gas: NEAR_MAX_GAS,\n                methodName: 'ft_transfer_call',\n                args: {\n                    receiver_id: NEAR_ORACLE_CONTRACT_ID,\n                    amount,\n                    msg: JSON.stringify({\n                        'StakeDataRequest': {\n                            id: dataRequest.id,\n                            outcome: stakeOutcome,\n                        }\n                    })\n                }\n            }],\n        });\n\n        await batchSendTransactions(wallet, transactions);\n\n        return true;\n    }\n\n    async unstake(amount: string, round: number, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n        if (!account) return false;\n\n        const stakeOutcome = createNearOutcome(dataRequest, outcome);\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'dr_unstake', {\n            request_id: dataRequest.id,\n            resolution_round: round,\n            outcome: stakeOutcome,\n            amount,\n\n            // @ts-ignore\n        }, NEAR_MAX_GAS, '1');\n\n        return true;\n    }\n\n    async finalize(dataRequest: DataRequestViewModel) {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n        if (!account) return false;\n\n        const transactions: TransactionOption[] = [];\n\n        transactions.push({\n            receiverId: NEAR_ORACLE_CONTRACT_ID,\n            transactionOptions: [{\n                amount: '0',\n                gas: NEAR_MAX_GAS,\n                methodName: 'dr_finalize',\n                args: {\n                    request_id: dataRequest.id,\n                }\n            }],\n        });\n\n        await batchSendTransactions(wallet, transactions);\n\n        return true;\n    }\n\n    async claim(accountId: string, dataRequest: DataRequestViewModel) {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n        if (!account) return false;\n\n        const oracleTransaction: TransactionOption = {\n            receiverId: NEAR_ORACLE_CONTRACT_ID,\n            transactionOptions: [],\n        };\n\n        const unbondedStakes = dataRequest.loggedInAccountStakes.filter(stake => !stake.bonded && new Big(stake.totalStake).gt(0));\n        const halfGas = new Big(NEAR_MAX_GAS).div(2).round(0, 0);\n\n        // Claim back any unbonded stake\n        if (unbondedStakes.length) {\n            oracleTransaction.transactionOptions = unbondedStakes.map(stake => {\n                const outcome = createNearOutcome(dataRequest, stake.outcome);\n\n                return {\n                    amount: '1',\n                    gas: halfGas.div(unbondedStakes.length).round(0, 0).toString(),\n                    methodName: 'dr_unstake',\n                    args: {\n                        request_id: stake.dataRequestId,\n                        resolution_round: stake.round,\n                        outcome,\n                        amount: stake.totalStake.toString(),\n                    },\n                }\n            });\n        }\n\n        // Only claim if we actually have something to claim otherwise this would just cost gas\n        const canClaim = dataRequest.loggedInAccountStakes.some(stake => isSameOutcome(stake.outcome, dataRequest.finalized_outcome));\n\n        if (canClaim) {\n            oracleTransaction.transactionOptions.push({\n                amount: STORAGE_BASE,\n                gas: halfGas.toString(),\n                methodName: 'dr_claim',\n                args: {\n                    request_id: dataRequest.id,\n                    account_id: accountId,\n                },\n            });\n        }\n\n        await batchSendTransactions(wallet, [oracleTransaction]);\n\n        return true;\n    }\n\n    async getStorageBalance(accountId: string): Promise<{ total: string, available: string, used: string }> {\n        try {\n            const wallet = await connectWallet();\n            const account = wallet.account();\n            if (!account) {\n                return {\n                    total: '0',\n                    available: '0',\n                    used: '0',\n                };\n            }\n\n            const storageBalance = await account.viewFunction(NEAR_ORACLE_CONTRACT_ID, 'storage_balance_of', {\n                account_id: accountId,\n            });\n\n            const used = new Big(storageBalance.total).sub(storageBalance.available);\n\n            return {\n                total: storageBalance.total,\n                available: storageBalance.available,\n                used: used.toString(),\n            }\n        } catch (error) {\n            console.error('[getStorageBalance -> NEAR]', error);\n            return {\n                total: '0',\n                available: '0',\n                used: '0',\n            }\n        }\n    }\n\n    async withdrawStorage(amount: string): Promise<boolean> {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'storage_withdraw', {\n            amount,\n            // @ts-ignore\n        }, NEAR_MAX_GAS, '1');\n\n        return true;\n    }\n\n    async getTokenInfo(contractId: string): Promise<TokenViewModel | undefined> {\n        try {\n            const wallet = await connectWallet();\n            const account = wallet.account();\n            const result = await account.viewFunction(contractId, 'ft_metadata', {});\n\n            return result;\n        } catch (error) {\n            console.error('[NearProvider-getTokenInfo]', error);\n            return undefined;\n        }\n    }\n\n    async getAppConfig(): Promise<AppConfig> {\n        const wallet = await connectWallet();\n        const config = await getLatestOracleConfig(wallet);\n        const token = await this.getTokenInfo(config.stake_token);\n\n        return {\n            nativeTokenDecimals: this.nativeTokenDecimals,\n            nativeTokenSymbol: this.nativeTokenSymbol,\n            stakeTokenDecimals: token?.decimals ?? 18,\n            stakeTokenSymbol: token?.symbol ?? config.stake_token,\n        };\n    }\n}\n","import format from \"date-fns/format\";\n\nexport function prettyFormatDate(date: Date): string {\n    return format(date, 'MMMM d, yyyy HH:mm:ss');\n}\n\n/**\n * converts nano seconds to milliseconds\n *\n * @export\n * @param {number} nanoSeconds\n * @return {number}\n */\nexport function nsToMs(nanoSeconds: number): number {\n    return nanoSeconds / 1000000;\n}\n\n/**\n * Formats a time number to a human readable format\n *\n * @export\n * @param {number} number\n * @param {('sec' | 'ms')} unit\n */\nexport function formatTimeToReadable(number: number, unit: 'sec' | 'ms' | 'ns') {\n    let s = 0;\n\n    if (unit === 'sec') {\n        s = number\n    } else if (unit === 'ns') {\n        s = Math.floor(number / 1000000000);\n    } else {\n        s = Math.floor(number / 1000)\n    }\n\n    let m = Math.floor(s / 60)\n    s = s % 60\n    let h = Math.floor(m / 60)\n    m = m % 60\n    const d = Math.floor(h / 24)\n    h = h % 24\n\n    return { days: d, hours: h, minutes: m, seconds: s }\n}\n","/**\n * Safely parse json without throwing any errors\n *\n * @export\n * @param {string} str\n * @return {(object | null)}\n */\nexport function parseJson<T>(str: string): T | null {\n    try {\n        return JSON.parse(str);\n    } catch (e) {\n        return null;\n    }\n}\n","export interface ClaimGraphData {\n    payout: string;\n    user_correct_stake: string;\n    total_incorrect_staked: string;\n    total_correct_bonded_staked: string;\n}\n\nexport interface ClaimViewModel {\n    payout: string;\n    userCorrectStake: string;\n}\n\nexport function transformToClaimViewModel(data: ClaimGraphData): ClaimViewModel {\n    return {\n        payout: data.payout,\n        userCorrectStake: data.user_correct_stake,\n    };\n}\n","import { getTokenInfo } from \"../services/providers/ProviderRegistry\";\nimport { TokenViewModel } from \"./Token\";\n\nexport interface OracleConfig {\n    blockHeight: string;\n    date: Date;\n    defaultChallengeWindowDuration: string;\n    finalArbitrator: string;\n    finalArbitratorInvokeAmount: string;\n    gov: string;\n    id: string;\n    maxOutcomes: number;\n    minInitialChallengeWindowDuration: string;\n    resolutionFeePercentage: number;\n    validityBond: string;\n    stakeToken: TokenViewModel;\n    bondToken: TokenViewModel;\n    fluxMarketCap: string;\n    totalValueStaked: string;\n}\n\nexport interface OracleConfigGraphData {\n    block_height: string;\n    payment_token: string;\n    date: string;\n    default_challenge_window_duration: string;\n    final_arbitrator: string;\n    final_arbitrator_invoke_amount: string;\n    gov: string;\n    id: string;\n    max_outcomes: number;\n    min_initial_challenge_window_duration: string;\n    resolution_fee_percentage: number;\n    stake_token: string;\n    validity_bond: string;\n    fee: {\n        flux_market_cap: string;\n        total_value_staked: string;\n        resolution_fee_percentage: number;\n    };\n}\n\nexport async function transformToOracleConfig(data: OracleConfigGraphData): Promise<OracleConfig> {\n    const stakeToken = await getTokenInfo('near', data.stake_token);\n    const bondToken = await getTokenInfo('near', data.payment_token);\n\n    return {\n        blockHeight: data.block_height,\n        bondToken: bondToken,\n        date: new Date(Number(data.date)),\n        defaultChallengeWindowDuration: data.default_challenge_window_duration,\n        finalArbitrator: data.final_arbitrator,\n        finalArbitratorInvokeAmount: data.final_arbitrator_invoke_amount,\n        gov: data.gov,\n        id: data.id,\n        maxOutcomes: data.max_outcomes,\n        minInitialChallengeWindowDuration: data.min_initial_challenge_window_duration,\n        resolutionFeePercentage: data.resolution_fee_percentage ?? data.fee.resolution_fee_percentage,\n        stakeToken: stakeToken,\n        validityBond: data.validity_bond,\n        fluxMarketCap: data.fee.flux_market_cap,\n        totalValueStaked: data.fee.total_value_staked,\n    };\n}\n","import Big from \"big.js\";\nimport { getTokenInfo } from \"../services/providers/ProviderRegistry\";\nimport trans from \"../translation/trans\";\nimport { nsToMs } from \"../utils/dateUtils\";\nimport { parseJson } from \"../utils/jsonUtils\";\nimport { ClaimGraphData, ClaimViewModel, transformToClaimViewModel } from \"./Claim\";\nimport { Outcome, transformToOutcome } from \"./DataRequestOutcome\";\nimport { OracleConfig, OracleConfigGraphData, transformToOracleConfig } from \"./OracleConfig\";\nimport { ResolutionWindow, ResolutionWindowGraphData, transformToResolutionWindow } from \"./ResolutionWindow\";\nimport { TokenViewModel } from \"./Token\";\nimport { transformToUserStakesViewModel, UserStakeGraphData, UserStakeViewModel } from \"./UserStakes\";\n\nexport interface DataRequestSource {\n    endPoint: string;\n    sourcePath: string;\n}\n\nexport enum DataRequestType {\n    Arbitrator,\n    Api\n}\nexport interface DataRequestListItem {\n    id: string;\n    date: Date;\n    requestor: string;\n    finalized_outcome?: Outcome;\n    type: DataRequestType;\n}\n\nexport interface DataRequestViewModel extends DataRequestListItem {\n    loggedInAccountStakes: UserStakeViewModel[];\n    loggedInAccountClaim?: ClaimViewModel;\n    description?: string;\n    config: OracleConfig;\n    sources: DataRequestSource[];\n    outcomes?: string[];\n    resolutionWindows: ResolutionWindow[];\n    totalStaked: string;\n    fee: string;\n    paidFee?: string;\n    finalized_outcome?: Outcome;\n    finalArbitratorTriggered: boolean;\n    settlementTime: Date;\n    tags: string[];\n    stakeToken: TokenViewModel;\n    bondToken: TokenViewModel;\n    totalCorrectStaked?: string;\n    totalIncorrectStaked?: string;\n    number_multiplier?: string;\n    data_type: 'String' | 'Number';\n}\n\nexport interface DataRequestGraphData {\n    account_stakes: UserStakeGraphData[];\n    id: string;\n    fee: string;\n    claim: ClaimGraphData | null;\n    block_height: string;\n    description: string | null;\n    settlement_time: string;\n    date: string;\n    final_arbitrator_triggered: boolean;\n    global_config_id: string;\n    initial_challenge_period: string;\n    total_correct_bonded_staked?: string;\n    total_incorrect_staked?: string;\n    outcomes: string[];\n    requestor: string;\n    finalized_outcome: string | null;\n    tags: string[] | null;\n    paid_fee: string | null;\n    data_type: string;\n    whitelist_item: {\n        active: boolean;\n        code_base_url: string;\n        custom_fee: string;\n        interface_name: string;\n    },\n    sources: {\n        end_point: string;\n        source_path: string;\n    }[];\n    config: OracleConfigGraphData;\n    resolution_windows: ResolutionWindowGraphData[];\n}\n\ninterface NumberDataType {\n    Number: string;\n}\n\nexport function transformToDataRequestListItem(data: DataRequestGraphData): DataRequestListItem {\n    return {\n        id: data.id,\n        date: new Date(Number(data.date)),\n        requestor: data.requestor,\n        finalized_outcome: data.finalized_outcome ? transformToOutcome(data.finalized_outcome) : undefined,\n        type: data.sources.length ? DataRequestType.Api : DataRequestType.Arbitrator,\n    };\n}\n\nexport async function transformToDataRequestViewModel(data: DataRequestGraphData): Promise<DataRequestViewModel> {\n    const stakeToken = await getTokenInfo('near', data.config.stake_token);\n    const bondToken = await getTokenInfo('near', data.config.payment_token);\n\n    const resolutionWindows = await Promise.all(data.resolution_windows.map(rw => transformToResolutionWindow(rw, stakeToken)));\n    const totalStaked = resolutionWindows.reduce((prev, curr) => prev.add(curr.totalStaked), new Big(0));\n    const parsedDataType = parseJson<NumberDataType>(data.data_type);\n\n    return {\n        ...transformToDataRequestListItem(data),\n        config: await transformToOracleConfig(data.config),\n        settlementTime: new Date(nsToMs(Number(data.settlement_time))),\n        resolutionWindows: resolutionWindows,\n        description: data.description ?? undefined,\n        sources: data.sources.map((s) => ({\n            endPoint: s.end_point,\n            sourcePath: s.source_path,\n        })),\n        fee: data.fee ?? '0',\n        outcomes: data.outcomes,\n        totalStaked: totalStaked.toString(),\n        finalized_outcome: data.finalized_outcome ? transformToOutcome(data.finalized_outcome) : undefined,\n        finalArbitratorTriggered: data.final_arbitrator_triggered,\n        tags: data.tags ?? [],\n        data_type: parsedDataType ? \"Number\" : \"String\",\n        number_multiplier: parsedDataType ? parsedDataType.Number : undefined,\n        stakeToken,\n        bondToken,\n        totalCorrectStaked: data.total_correct_bonded_staked,\n        totalIncorrectStaked: data.total_incorrect_staked,\n        paidFee: data.paid_fee ?? undefined,\n        loggedInAccountClaim: data.claim ? transformToClaimViewModel(data.claim) : undefined,\n        loggedInAccountStakes: data.account_stakes.map(ac => transformToUserStakesViewModel(ac, resolutionWindows)),\n    };\n}\n\nexport function canDataRequestBeFinalized(dataRequest: DataRequestViewModel): boolean {\n    // Already finalized\n    if (dataRequest.finalized_outcome) {\n        return false;\n    }\n\n    const currentResolutionWindow = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1];\n    if (!currentResolutionWindow) return false;\n\n    const now = new Date().getTime();\n\n    // Latest resolution window must end\n    if (currentResolutionWindow.endTime.getTime() >= now) {\n        return false;\n    }\n\n    if (!currentResolutionWindow.filled) {\n        // The window has not been filled\n        // If it's the first round we cannot finalize till it's completely filled\n        if (currentResolutionWindow.round === 0) {\n            return false;\n        }\n    }\n\n    // Window has been filled, end time is met and we are not the first round\n    // Meaning that the previous round was filled and ready to be finalized\n    return true;\n}\n\nexport function getDataRequestTypeTranslation(type: DataRequestType) {\n    if (type === DataRequestType.Arbitrator) {\n        return trans('dataRequest.type.arbitrator');\n    }\n\n    return trans('dataRequest.type.api');\n}\n","import { getTokenInfo } from \"../services/providers/ProviderRegistry\";\nimport { isSameOutcome, Outcome, transformToOutcome } from \"./DataRequestOutcome\";\nimport { OutcomeStake } from \"./OutcomeStake\";\nimport { ResolutionWindow } from \"./ResolutionWindow\";\nimport { TokenViewModel } from \"./Token\";\n\n/** @deprecated */\nexport interface UserStakes {\n    [accountId: string]: OutcomeStake[];\n}\n\nexport interface UserStakeViewModel {\n    outcome: Outcome;\n    accountId: string;\n    dataRequestId: string;\n    round: number;\n    totalStake: string;\n    bonded: boolean;\n}\n\nexport interface UserStakeGraphData {\n    account_id: string;\n    data_request_id: string;\n    id: string;\n    outcome: string;\n    round: number;\n    total_stake: string;\n    data_request?: {\n        finalized_outcome: string | null;\n        config: {\n            stake_token: string;\n        }\n    }\n    claim?: {\n        payout: string;\n    }\n}\n\nexport function transformToUserStakesViewModel(userStake: UserStakeGraphData, resolutionWindows: ResolutionWindow[] = []): UserStakeViewModel {\n    let bonded = false;\n    const stakedResolutionWindow = resolutionWindows[userStake.round];\n    const stakedOutcome = transformToOutcome(userStake.outcome);\n\n    if (stakedResolutionWindow && isSameOutcome(stakedResolutionWindow.bondedOutcome, stakedOutcome)) {\n        bonded = true;\n    }\n\n    return {\n        outcome: stakedOutcome,\n        accountId: userStake.account_id,\n        dataRequestId: userStake.data_request_id,\n        totalStake: userStake.total_stake,\n        round: userStake.round,\n        bonded,\n    }\n}\n\nexport async function transformToUserStakes(userStakes: UserStakeGraphData[], stakeToken?: TokenViewModel) {\n    // TODO: Investigate if this is still needed\n    const result: UserStakes = {};\n\n    for await (const userStake of userStakes) {\n        const currentOutcomeStakes = result[userStake.account_id] ?? [];\n        const finalStakeToken = stakeToken ?? await getTokenInfo('near', userStake.data_request?.config.stake_token ?? '');\n\n        currentOutcomeStakes.push({\n            outcome: transformToOutcome(userStake.outcome),\n            stake: userStake.total_stake,\n            round: userStake.round,\n            dataRequestId: userStake.data_request_id,\n            accountId: userStake.account_id,\n            finalizedOutcome: userStake.data_request?.finalized_outcome ? transformToOutcome(userStake.data_request.finalized_outcome) : undefined,\n            claimPayout: userStake.claim?.payout,\n            stakeToken: finalStakeToken,\n            bonded: false,\n        });\n\n        result[userStake.account_id] = currentOutcomeStakes;\n    }\n\n    return result;\n}\n","import Big from \"big.js\";\nimport { isSameOutcome, Outcome, transformToOutcome } from \"./DataRequestOutcome\";\nimport { OutcomeStake } from \"./OutcomeStake\";\nimport { TokenViewModel } from \"./Token\";\nimport { transformToUserStakes, UserStakeGraphData, UserStakes } from \"./UserStakes\";\n\n\nexport interface ResolutionWindow {\n    round: number;\n    bondedOutcome?: Outcome;\n    outcomeStakes: OutcomeStake[];\n    endTime: Date;\n    bondSize: string;\n    totalStaked: string;\n    filled: boolean;\n    userStakes: UserStakes;\n    winningOutcomeStake?: OutcomeStake;\n}\n\nexport interface ResolutionWindowGraphData {\n    block_height: string;\n    bond_size: string;\n    date: string;\n    dr_id: string;\n    end_time: string;\n    id: string;\n    round: number;\n    bonded_outcome: null | string;\n    outcome_stakes: {\n        data_request_id: string;\n        id: string;\n        round: number;\n        total_stake: string;\n        outcome: string;\n    }[];\n    user_stakes: UserStakeGraphData[];\n}\n\nexport async function transformToResolutionWindow(data: ResolutionWindowGraphData, stakeToken?: TokenViewModel): Promise<ResolutionWindow> {\n    let totalStaked = new Big(0);\n    let highestOutcomeStake: OutcomeStake | undefined;\n    const bondedOutcome = data.bonded_outcome ? transformToOutcome(data.bonded_outcome) : undefined;\n\n    const outcomeStakes: OutcomeStake[] = data.outcome_stakes.map((os) => {\n        totalStaked = totalStaked.add(os.total_stake);\n        const outcome = transformToOutcome(os.outcome);\n\n        const outcomeStake: OutcomeStake = {\n            outcome,\n            stake: os.total_stake,\n            dataRequestId: os.data_request_id,\n            round: os.round,\n            bonded: bondedOutcome ? isSameOutcome(outcome, bondedOutcome) : false,\n            stakeToken: stakeToken ?? {\n                contractId: '',\n                decimals: 18,\n                name: '',\n                symbol: '',\n            }\n        };\n\n        // Find the highest stake\n        if (highestOutcomeStake) {\n            const highestStake = new Big(highestOutcomeStake.stake);\n\n            if (highestStake.lt(outcomeStake.stake)) {\n                highestOutcomeStake = outcomeStake;\n            }\n        } else {\n            highestOutcomeStake = outcomeStake;\n        }\n\n        return outcomeStake;\n    });\n\n    return {\n        bondSize: data.bond_size,\n        endTime: new Date(Number(data.end_time) / 1000000),\n        outcomeStakes,\n        filled: highestOutcomeStake?.stake ? new Big(highestOutcomeStake.stake).eq(data.bond_size) : false,\n        totalStaked: totalStaked.toString(),\n        round: data.round,\n        userStakes: await transformToUserStakes(data.user_stakes, stakeToken),\n        bondedOutcome,\n        winningOutcomeStake: highestOutcomeStake,\n    };\n}\n","import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { API_URL } from '../config';\n\nconst cache = new InMemoryCache();\nconst link = createHttpLink({\n    uri: API_URL,\n});\n\nexport const graphqlClient = new ApolloClient({\n    cache,\n    link,\n\n    defaultOptions: {\n        watchQuery: {\n            fetchPolicy: 'cache-and-network',\n        }\n    }\n});\n","import gql from \"graphql-tag\";\nimport { DataRequestGraphData, DataRequestListItem, transformToDataRequestListItem, transformToDataRequestViewModel } from \"../models/DataRequest\";\nimport { Pagination } from \"../models/Pagination\";\nimport { graphqlClient } from \"./GraphQLService\";\n\nexport interface DataRequestFilters {\n    onlyArbitratorRequests: boolean;\n    requestor?: string;\n}\n\ninterface DataRequestPagination {\n    limit: number;\n    offset: number;\n}\n\nexport async function getAllDataRequests({\n    limit,\n    offset,\n}: DataRequestPagination, {\n    onlyArbitratorRequests,\n    requestor,\n}: DataRequestFilters): Promise<Pagination<DataRequestListItem>> {\n    try {\n        const response = await graphqlClient.query({\n            fetchPolicy: 'network-only',\n            query: gql`\n                query GetAllDataRequests($limit: Int, $offset: Int, $onlyArbitratorRequests: Boolean, $requestor: String) {\n                    dataRequests: getDataRequests(limit: $limit, offset: $offset, onlyArbitratorRequests: $onlyArbitratorRequests, requestor: $requestor) {\n                        total\n                        items {\n                            id\n                            date\n                            requestor\n                            finalized_outcome\n                            sources {\n                                end_point\n                                source_path\n                            }\n                        }\n                    }\n                }\n            `,\n            variables: {\n                limit,\n                offset,\n                onlyArbitratorRequests,\n                requestor,\n            }\n        });\n\n        const paginatedDataRequests: DataRequestListItem[] = response.data.dataRequests.items.map((dr: DataRequestGraphData) => transformToDataRequestListItem(dr));\n\n        return {\n            total: response.data.dataRequests.total,\n            items: paginatedDataRequests,\n        };\n    } catch (error) {\n        console.error('[getAllDataRequests]', error);\n\n        return {\n            total: 0,\n            items: [],\n        };\n    }\n}\n\nexport async function getDataRequestById(id: string, accountId?: string) {\n    try {\n        const response = await graphqlClient.query({\n            fetchPolicy: 'network-only',\n            query: gql`\n                query GetDataRequest($id: String!, $accountId: String) {\n                    dataRequest: getDataRequest(id: $id) {\n                        block_height\n                        date\n                        final_arbitrator_triggered\n                        global_config_id\n                        total_incorrect_staked\n                        total_correct_bonded_staked\n                        id\n                        claim(accountId: $accountId) {\n                            payout\n                            user_correct_stake\n                        }\n                        initial_challenge_period\n                        outcomes\n                        requestor\n                        finalized_outcome\n                        paid_fee\n                        description\n                        settlement_time\n                        tags\n                        data_type\n                        fee\n                        account_stakes(accountId: $accountId) {\n                            outcome\n                            total_stake\n                            round\n                            account_id\n                            data_request_id\n                        }\n                        whitelist_item {\n                            active\n                            code_base_url\n                            custom_fee\n                            interface_name\n                        }\n                        sources {\n                            end_point\n                            source_path\n                        }\n                        config {\n                            block_height\n                            payment_token\n                            date\n                            default_challenge_window_duration\n                            final_arbitrator\n                            final_arbitrator_invoke_amount\n                            gov\n                            id\n                            max_outcomes\n                            min_initial_challenge_window_duration\n                            resolution_fee_percentage\n                            stake_token\n                            validity_bond\n                            fee {\n                                flux_market_cap\n                                resolution_fee_percentage\n                                total_value_staked\n                            }\n                        }\n                        resolution_windows {\n                            block_height\n                            bond_size\n                            bonded_outcome\n                            date\n                            dr_id\n                            end_time\n                            id\n                            outcome_stakes {\n                                data_request_id\n                                id\n                                round\n                                total_stake\n                                outcome\n                            }\n                            round\n                            user_stakes {\n                                account_id\n                                data_request_id\n                                id\n                                outcome\n                                round\n                                total_stake\n                            }\n                        }\n                    }\n                }\n            `,\n            variables: {\n                id,\n                accountId,\n            }\n        });\n\n        return transformToDataRequestViewModel(response.data.dataRequest);\n    } catch(error) {\n        console.error('[getDataRequestById]', error);\n        return null;\n    }\n}\n\nexport async function doesDataRequestExists(id: string): Promise<boolean> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                query DataRequestExists($id: String!) {\n                    request: getDataRequest(id: $id) {\n                        id\n                    }\n                }\n            `,\n            variables: {\n                id,\n            }\n        });\n\n        if (!response.data.request || !response.data.request.id) {\n            return false;\n        }\n\n        return true;\n    } catch (error) {\n        console.error('[doesDataRequestExists]', error);\n        return false;\n    }\n}\n\n","import { Pagination } from \"../models/Pagination\";\nimport { routePaths } from \"../routes\";\nimport { doesDataRequestExists } from \"./DataRequestService\";\n\nexport interface SearchResult {\n    url: string;\n}\n\nexport async function search(query: string): Promise<Pagination<SearchResult>> {\n    try {\n        if (isNaN(Number(query))) {\n            return {\n                items: [{\n                    url: routePaths.account('near', query),\n                }],\n                total: 1,\n            };\n        }\n\n        const dataRequest = await doesDataRequestExists(query);\n\n        if (dataRequest) {\n            return {\n                items: [{\n                    url: routePaths.dataRequestDetail('near', query),\n                }],\n                total: 1,\n            };\n        }\n\n        return {\n            items: [],\n            total: 0,\n        };\n    } catch (error) {\n        return {\n            items: [],\n            total: 0,\n        };\n    }\n}\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router';\nimport SearchForm from '../../containers/SearchForm';\nimport { routePaths } from '../../routes';\nimport { search } from '../../services/SearchService';\n\ninterface Props {\n    className?: string;\n    inputClassName?: string;\n}\n\nexport default function SearchConnector({\n    className,\n    inputClassName,\n}: Props) {\n    const history = useHistory();\n    const handleSearch = useCallback(async (query) => {\n        const result = await search(query);\n\n        if (result.total === 0) {\n            history.push(routePaths.search(query));\n            return;\n        }\n\n        history.push(result.items[0].url);\n    }, [history]);\n\n    return (\n        <SearchForm\n            onSearch={handleSearch}\n            className={className}\n            inputClassName={inputClassName}\n        />\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\nimport { default as MuiButton } from '@material-ui/core/Button';\n\nimport s from './Button.module.scss';\n\ninterface Props {\n    className?: string;\n    disabled?: boolean;\n    onClick?: () => void;\n}\n\nexport default function Button({\n    children,\n    className,\n    disabled = false,\n    onClick = () => {},\n}: PropsWithChildren<Props>) {\n    return (\n        <MuiButton\n            className={classnames(className, s.button)}\n            variant=\"contained\"\n            onClick={onClick}\n            disabled={disabled}\n        >\n            {children}\n        </MuiButton>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\nimport { default as MuiDialog } from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport Button from '../../components/Button';\n\nimport s from './Dialog.module.scss';\nimport trans from '../../translation/trans';\n\ninterface Props {\n    title: string;\n    open: boolean;\n    isInfoDialog?: boolean;\n    onRequestClose: () => void;\n    onSubmitClick?: () => void;\n    canSubmit?: boolean;\n    hideButtons?: boolean;\n    paperClassName?: string;\n}\n\nexport default function Dialog({\n    title,\n    children,\n    open,\n    isInfoDialog = false,\n    onRequestClose,\n    onSubmitClick = () => {},\n    canSubmit = true,\n    hideButtons = false,\n    paperClassName = '',\n}: PropsWithChildren<Props>) {\n    return (\n        <MuiDialog open={open} classes={{ paper: classnames(s.paper, paperClassName) }}>\n            <DialogTitle className={s.title}>\n                {title}\n            </DialogTitle>\n            <DialogContent className={s.content}>\n                {children}\n            </DialogContent>\n            {isInfoDialog && (\n                <DialogActions>\n                    <Button className={s.cancelButton} onClick={onRequestClose}>\n                        {trans('global.action.close')}\n                    </Button>\n                </DialogActions>\n            )}\n\n            {!hideButtons && (\n                <DialogActions>\n                    <Button className={s.cancelButton} onClick={onRequestClose}>\n                        {trans('global.action.cancel')}\n                    </Button>\n                    <Button disabled={!canSubmit} className={s.confirmButton} onClick={onSubmitClick}>\n                        {trans('global.action.submit')}\n                    </Button>\n                </DialogActions>\n            )}\n        </MuiDialog>\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport TextField from '@material-ui/core/TextField';\n\nimport s from './Input.module.scss';\n\nexport interface InputProps {\n    label?: string;\n    className?: string;\n    type?: 'text' | 'number';\n    onChange?: (value: string) => void;\n    value?: string;\n    error?: string;\n    endAdornment?: any;\n}\n\nexport default function Input({\n    className,\n    label,\n    type,\n    onChange = () => {},\n    value,\n    error,\n    endAdornment,\n}: InputProps) {\n    return (\n        <TextField\n            label={label}\n            className={classnames(className, s.input)}\n            type={type}\n            onChange={(event) => onChange(event.currentTarget.value)}\n            value={value}\n            error={!!error}\n            helperText={error}\n            InputProps={{\n                endAdornment,\n            }}\n        />\n    );\n}\n","import React from 'react';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport Input, { InputProps } from '../../components/Input/Input';\nimport trans from '../../translation/trans';\n\ninterface Props extends InputProps {\n    showMax?: boolean;\n    onMaxClick?: () => void,\n}\n\nexport default function NumberInput({\n    showMax = false,\n    onMaxClick = () => {},\n    ...props\n}: Props) {\n    return (\n        <Input\n            {...props}\n            type=\"number\"\n            endAdornment={\n                <>\n                    {showMax && (\n                        <InputAdornment position=\"end\">\n                            <Button onClick={onMaxClick}>\n                                {trans('global.max')}\n                            </Button>\n                        </InputAdornment>\n                    )}\n                </>\n            }\n        />\n    );\n}\n","import React, { useCallback, useState } from 'react';\nimport Dialog from '../../compositions/Dialog';\nimport { Account } from '../../models/Account';\nimport trans from '../../translation/trans';\nimport createDefaultStorageManagerFormValues, { StorageManagerFormValues } from './services/createDefaultStorageManagerFormValues';\nimport validateStorageManagerFormValues from './services/validateStorageManagerFormValues';\nimport { formatToken, toToken } from '../../utils/tokenUtils';\n\nimport s from './StorageManagerDialog.module.scss';\nimport NumberInput from '../../compositions/NumberInput';\nimport { AppConfig } from '../../models/AppConfig';\nimport Big from 'big.js';\n\ninterface Props {\n    open: boolean;\n    account: Account;\n    appConfig: AppConfig;\n    onRequestClose: () => void;\n    onSubmit: (formValues: StorageManagerFormValues) => void;\n}\n\nexport default function StorageManagerDialog({\n    open,\n    account,\n    appConfig,\n    onRequestClose,\n    onSubmit,\n}: Props) {\n    const [formValues, setFormValues] = useState(createDefaultStorageManagerFormValues());\n\n    const errors = validateStorageManagerFormValues(formValues, account);\n\n    function handleAmountChange(amount: string) {\n        if (amount && new Big(amount).lt(0)) {\n            return;\n        }\n\n        setFormValues({\n            amount: amount ? toToken(amount, appConfig.nativeTokenDecimals) : '0',\n            amountFormatted: amount ? amount : '',\n        });\n    }\n\n    const handleMaxClick = useCallback(() => {\n        setFormValues({\n            amount: account.storageAvailable,\n            amountFormatted: formatToken(account.storageAvailable, appConfig.nativeTokenDecimals, 4),\n        });\n    }, [account, appConfig]);\n\n    return (\n        <Dialog\n           open={open}\n           onRequestClose={onRequestClose}\n           title={trans('storageManagerDialog.title')}\n           onSubmitClick={() => onSubmit(formValues)}\n           canSubmit={errors.canSubmit}\n        >\n            <form>\n                <p>\n                    {trans('storageManagerDialog.description', { nativeToken: appConfig.nativeTokenSymbol })}\n                </p>\n                <p>\n                    {trans('storageManagerDialog.label.amountAvailable', {\n                        amount: formatToken(account.storageAvailable, appConfig.nativeTokenDecimals, 4),\n                        nativeToken: appConfig.nativeTokenSymbol,\n                    })}\n                </p>\n                <div className={s.formItem}>\n                    <NumberInput\n                        label={trans('storageManagerDialog.label.withdrawAmount', { nativeToken: appConfig.nativeTokenSymbol })}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleAmountChange}\n                        type=\"number\"\n                        error={errors.amount}\n                        showMax\n                        onMaxClick={handleMaxClick}\n                    />\n                </div>\n            </form>\n        </Dialog>\n    );\n}\n","export interface StorageManagerFormValues {\n    amountFormatted: string;\n    amount: string;\n}\n\nexport default function createDefaultStorageManagerFormValues(): StorageManagerFormValues {\n    return {\n        amount: '0',\n        amountFormatted: '0',\n    }\n}\n","import Big from \"big.js\";\nimport { Account } from \"../../../models/Account\";\nimport trans from \"../../../translation/trans\";\nimport { StorageManagerFormValues } from \"./createDefaultStorageManagerFormValues\";\n\ninterface StorageManagerErrors {\n    amount: string;\n    canSubmit: boolean;\n}\n\nexport default function validateStorageManagerFormValues(formValues: StorageManagerFormValues, account: Account): StorageManagerErrors {\n    const errors: StorageManagerErrors = {\n        amount: '',\n        canSubmit: true,\n    }\n\n    if (formValues.amount) {\n        const amountToWithdraw = new Big(formValues.amount);\n\n        if (amountToWithdraw.gt(account.storageAvailable)) {\n            errors.amount = trans('storageManagerDialog.errors.withdrawAmount.notEnoughToWithdraw');\n            errors.canSubmit = false;\n        }\n\n        if (amountToWithdraw.lte(0)) {\n            errors.canSubmit = false;\n        }\n    }\n\n    return errors;\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { DataRequestViewModel } from '../../models/DataRequest';\n\nexport type DialogsState = Readonly<{\n    stakeDialog: {\n        open: boolean;\n        dataRequest?: DataRequestViewModel;\n    },\n    unstakeDialog: {\n        open: boolean;\n        dataRequest?: DataRequestViewModel;\n    },\n    storageManager: {\n        open: boolean;\n    }\n}>;\n\nconst initialState: DialogsState = {\n    stakeDialog: {\n        open: false,\n    },\n    unstakeDialog: {\n        open: false,\n    },\n    storageManager: {\n        open: false,\n    }\n};\n\nconst dialogsSlice = createSlice({\n    initialState,\n    name: 'dialogs',\n    reducers: {\n        setStakeDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['stakeDialog']>): DialogsState {\n            return ({\n                ...state,\n                stakeDialog: action.payload,\n            });\n        },\n\n        setUnstakeDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['unstakeDialog']>): DialogsState {\n            return ({\n                ...state,\n                unstakeDialog: action.payload,\n            });\n        },\n\n        setStorageManagerDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['storageManager']>): DialogsState {\n            return {\n                ...state,\n                storageManager: action.payload,\n            };\n        }\n    },\n});\n\nexport const {\n    setStakeDialogOpen,\n    setUnstakeDialogOpen,\n    setStorageManagerDialogOpen,\n} = dialogsSlice.actions;\n\nexport default dialogsSlice.reducer;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport StorageManagerDialog from '../../containers/StorageManagerDialog';\nimport { StorageManagerFormValues } from '../../containers/StorageManagerDialog/services/createDefaultStorageManagerFormValues';\nimport { setStorageManagerDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\nimport { withdrawStorage } from '../../services/providers/ProviderRegistry';\n\nexport default function StorageManagerDialogConnector() {\n    const open = useSelector((store: Reducers) => store.dialogs.storageManager.open);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n    const dispatch = useDispatch();\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setStorageManagerDialogOpen({\n            open: false,\n        }));\n    }, [dispatch]);\n\n    const handleSumbit = useCallback((formValues: StorageManagerFormValues) => {\n        withdrawStorage('near', formValues.amount);\n    }, []);\n\n    if (!account) return null;\n\n    return (\n        <StorageManagerDialog\n            open={open}\n            appConfig={appConfig}\n            account={account}\n            onRequestClose={handleRequestClose}\n            onSubmit={handleSumbit}\n        />\n    );\n}\n","import React, { FormEvent, useState } from 'react';\nimport MuiMenu from '@material-ui/core/Menu';\nimport MuiMenuItem from '@material-ui/core/MenuItem';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport IconButton from '@material-ui/core/IconButton';\nimport { NavLink, Link, useHistory } from 'react-router-dom';\nimport FakeLinkButton from '../../components/FakeLinkButton';\nimport SearchConnector from '../../connectors/SearchConnector';\nimport { Account } from '../../models/Account';\nimport { routePaths, routes } from '../../routes';\nimport trans from '../../translation/trans';\nimport { formatToken } from '../../utils/tokenUtils';\n\nimport s from './Menu.module.scss';\nimport StorageManagerDialogConnector from '../../connectors/StorageManagerDialogConnector';\nimport { AppConfig } from '../../models/AppConfig';\n\ninterface Props {\n    account?: Account;\n    appConfig: AppConfig;\n    onLoginClick: () => void;\n    onLogoutClick: () => void;\n    onStorageManagerClick: () => void;\n}\n\nexport default function Menu({\n    account,\n    appConfig,\n    onLoginClick,\n    onLogoutClick,\n    onStorageManagerClick,\n}: Props) {\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element | null>(null);\n    const history = useHistory();\n\n    function handleMenuClick(event: FormEvent) {\n        setMenuAnchorEl(event.currentTarget);\n    }\n\n    function handleMenuClose() {\n        setMenuAnchorEl(null);\n    }\n\n    function handleLogoutClick() {\n        handleMenuClose();\n        onLogoutClick();\n    }\n\n    function handleStorageManagerClick() {\n        handleMenuClose();\n        onStorageManagerClick();\n    }\n\n    function handleAccountClick() {\n        if (!account) return;\n        handleMenuClose();\n\n        history.push(routePaths.account(account.providerId, account.accountId));\n    }\n\n    return (\n        <header className={s.root}>\n            <div className={s.menu}>\n                <div className={s.topBar}>\n                    <div>\n                        <Link to={routePaths.root()} className={s.logoWrapper}>\n                            <div className={s.logo} />\n                        </Link>\n                    </div>\n                    <div>\n                        <SearchConnector />\n                        <StorageManagerDialogConnector />\n                    </div>\n                </div>\n                <div className={s.bottomBar}>\n                    <ul className={s.menuItems}>\n                        {routes.map(route => {\n                            if (!route.inNavigation) {\n                                return null;\n                            }\n\n                            return (\n                                <li className={s.menuItem} key={route.key}>\n                                    <NavLink\n                                        className={s.menuLink}\n                                        activeClassName={s['menuLink--active']}\n                                        exact\n                                        to={route.navPath}\n                                    >\n                                        {route.label}\n                                    </NavLink>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                    <div className={s.rightMenu}>\n                        <ul className={s.accountLinks}>\n                            {account && (\n                                <>\n                                    <li className={s.menuItem}>\n                                        <Link className={s.link} to={routePaths.account(account.providerId, account.accountId)}>{account.accountId}</Link>\n                                    </li>\n                                    <li className={s.menuItem}>\n                                        {formatToken(account.balance, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}\n                                    </li>\n                                </>\n                            )}\n                        </ul>\n                        <div className={s.moreMenu}>\n                            {!account && (\n                                <FakeLinkButton onClick={onLoginClick}>\n                                    {trans('menu.label.login')}\n                                </FakeLinkButton>\n                            )}\n\n                            {account && (\n                                <>\n                                    <IconButton onClick={handleMenuClick} className={s.iconButton}>\n                                        <MoreVertIcon />\n                                    </IconButton>\n                                    <MuiMenu anchorEl={menuAnchorEl} keepMounted open={Boolean(menuAnchorEl)} onClose={handleMenuClose}>\n                                        <MuiMenuItem className={s.mobileOnly} onClick={handleAccountClick}>{account.accountId}</MuiMenuItem>\n                                        <MuiMenuItem className={s.mobileOnly} disabled>{formatToken(account.balance, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</MuiMenuItem>\n                                        <MuiMenuItem onClick={handleStorageManagerClick}>{trans('menu.label.storageManager')}</MuiMenuItem>\n                                        <MuiMenuItem onClick={handleLogoutClick}>{trans('menu.label.logout')}</MuiMenuItem>\n                                    </MuiMenu>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </header>\n    );\n}\n","import { parseJson } from \"../utils/jsonUtils\"\n\ninterface FixedCustomFee {\n    fee: string;\n    type: 'fixed';\n}\n\ninterface MultiplierCustomFee {\n    multiplier: number;\n    type: 'multiplier';\n}\n\ninterface MultiplierCustomFeeGraphData {\n    Multiplier: number;\n}\n\ninterface FixedCustomFeeGraphData {\n    Fixed: string;\n}\n\nexport interface WhitelistItemGraphData {\n    interface_name: string;\n    account_id: string;\n    custom_fee: string;\n    code_base_url: string;\n    active: boolean;\n}\n\nexport interface WhitelistItemViewModel {\n    interfaceName: string;\n    accountId: string;\n    codeBaseUrl: string;\n    active: boolean;\n    customFee?: FixedCustomFee | MultiplierCustomFee;\n}\n\nexport function transformToWhitelistItemViewModel(data: WhitelistItemGraphData): WhitelistItemViewModel {\n    const parsedCustomFee = parseJson<FixedCustomFeeGraphData | MultiplierCustomFeeGraphData>(data.custom_fee);\n    let customFee: WhitelistItemViewModel['customFee'];\n\n    if (parsedCustomFee) {\n        if ('Fixed' in parsedCustomFee) {\n            customFee = {\n                fee: parsedCustomFee.Fixed,\n                type: 'fixed',\n            }\n        } else {\n            customFee = {\n                multiplier: parsedCustomFee.Multiplier,\n                type: 'multiplier',\n            }\n        }\n    }\n\n    return {\n        active: data.active,\n        codeBaseUrl: data.code_base_url,\n        accountId: data.account_id,\n        customFee,\n        interfaceName: data.interface_name,\n    }\n}\n","import gql from \"graphql-tag\";\nimport { AccountInfo } from \"../models/Account\";\nimport { transformToWhitelistItemViewModel } from \"../models/WhitelistItem\";\nimport { graphqlClient } from \"./GraphQLService\";\nimport { getProviderStorageBalance } from \"./providers/ProviderRegistry\";\n\nexport async function getAccountInfo(accountId: string, providerId: string = 'near'): Promise<AccountInfo> {\n    try {\n        const storageBalanceRequest = getProviderStorageBalance(providerId, accountId);\n        const response = await graphqlClient.query({\n            query: gql`\n                    query AccountInfo($accountId: String!) {\n                        accountInfo: getAccountInfo(accountId: $accountId) {\n                            active_staking\n                            total_staked\n                            total_claimed\n                            whitelist_item {\n                                active\n                                code_base_url\n                                custom_fee\n                                interface_name\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n            }\n        });\n\n        const data = response.data.accountInfo;\n        const storageBalance = await storageBalanceRequest;\n\n        return {\n            activeStaking: data.active_staking,\n            totalStaked: data.total_staked,\n            totalClaimed: data.total_claimed,\n            storageAvailable: storageBalance.available,\n            storageTotal: storageBalance.total,\n            storageUsed: storageBalance.used,\n            whitelistItem: data.whitelist_item ? transformToWhitelistItemViewModel(data.whitelist_item) : undefined,\n        }\n    } catch (error) {\n        console.error('[getAccountInfo]', error);\n\n        return {\n            activeStaking: '0',\n            totalStaked: '0',\n            totalClaimed: '0',\n            storageAvailable: '0',\n            storageTotal: '0',\n            storageUsed: '0',\n        }\n    }\n}\n","import Big from \"big.js\";\nimport { Outcome, OutcomeType } from \"./DataRequestOutcome\";\nimport { TokenViewModel } from \"./Token\";\n\nexport interface OutcomeStake {\n    outcome: Outcome;\n    stake: string;\n    round: number;\n    bonded: boolean;\n    dataRequestId: string;\n    accountId?: string;\n    finalizedOutcome?: Outcome;\n    claimPayout?: string;\n    stakeToken: TokenViewModel;\n}\n\nexport function combineOutcomeStakes(outcomeStakes: OutcomeStake[] = []): OutcomeStake[] {\n    const result = new Map<string, OutcomeStake>();\n\n    outcomeStakes.forEach((outcomeStake) => {\n        let answer = '';\n\n        if (outcomeStake.outcome.type === OutcomeType.Invalid) {\n            answer = 'Invalid';\n        } else {\n            answer = `Answer(${outcomeStake.outcome.answer})`;\n        }\n\n        const internalId = `${answer}_${outcomeStake.dataRequestId}`;\n        const currentItem = result.get(internalId);\n\n        if (currentItem) {\n            let stake = new Big(currentItem.stake);\n            stake = stake.add(outcomeStake.stake);\n            result.set(internalId, {\n                ...currentItem,\n                stake: stake.toString(),\n            });\n        } else {\n            result.set(internalId, outcomeStake);\n        }\n    });\n\n    return Array.from(result.values());\n}\n","import gql from \"graphql-tag\";\nimport { combineOutcomeStakes, OutcomeStake } from \"../models/OutcomeStake\";\nimport { Pagination } from \"../models/Pagination\";\nimport { transformToUserStakes, UserStakes } from \"../models/UserStakes\";\nimport { graphqlClient } from \"./GraphQLService\";\n\nasync function getUserStakesByRequestIdAndAccountId(requestId: string, accountId: string) {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakesRequestAndAccount($requestId: String!, $accountId: String!) {\n                        stakes: getUserStakesByRequestId(id: $requestId, accountId: $accountId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                            data_request {\n                                config {\n                                    stake_token\n                                }\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                requestId,\n                accountId,\n            }\n        });\n\n        const userStakes = transformToUserStakes(response.data.stakes);\n        return userStakes;\n    } catch (error) {\n        console.error('[getUserStakesByRequestIdAndAccountId]', error);\n        return {};\n    }\n}\n\nexport async function getUserStakesByRequestId(requestId: string, accountId?: string): Promise<UserStakes> {\n    try {\n        if (accountId) {\n            return getUserStakesByRequestIdAndAccountId(requestId, accountId);\n        }\n\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakes($requestId: String!) {\n                        stakes: getUserStakesByRequestId(id: $requestId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                            data_request {\n                                config {\n                                    stake_token\n                                }\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                requestId,\n            }\n        });\n\n        const userStakes = transformToUserStakes(response.data.stakes);\n        return userStakes;\n    } catch(error) {\n        console.error('[getUserStakesByRequestId]', error);\n        return {};\n    }\n}\n\nexport interface UserStakesForAccountFilters {\n    limit: number;\n    offset: number;\n}\n\nexport async function getUserStakesByAccountId(accountId: string, filters: UserStakesForAccountFilters): Promise<Pagination<OutcomeStake>> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakesAccount($accountId: String!, $limit: Int, $offset: Int) {\n                        stakes: getUserStakes(accountId: $accountId, limit: $limit, offset: $offset) {\n                            items {\n                                data_request_id\n                                account_id\n                                id\n                                outcome\n                                round\n                                total_stake\n                                data_request {\n                                    finalized_outcome\n                                    config {\n                                        stake_token\n                                    }\n                                }\n                            }\n                            total\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n                limit: filters.limit,\n                offset: filters.offset,\n            }\n        });\n\n        const items = await transformToUserStakes(response.data.stakes.items);\n\n        return {\n            items: items[accountId],\n            total: response.data.stakes.total,\n        }\n    } catch (error) {\n        console.error('[getUserStakesByAccountId]', error);\n        return {\n            items: [],\n            total: 0,\n        };\n    }\n}\n\n\nexport async function getUnclaimedStakesByAccountId(accountId: string): Promise<OutcomeStake[]> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUnclaimedStakesAccount($accountId: String!) {\n                        stakes: getUnclaimedStakes(accountId: $accountId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                            data_request {\n                                finalized_outcome\n                                config {\n                                    stake_token\n                                }\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n            }\n        });\n\n        const items = await transformToUserStakes(response.data.stakes);\n        return combineOutcomeStakes(items[accountId]);\n    } catch (error) {\n        console.error('[getUnclaimedStakesByAccountId]', error);\n        return [];\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Account, AccountInfo } from '../../models/Account';\nimport { DataRequestListItem } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\n\nexport type AccountState = Readonly<{\n    account?: Account;\n    accountDetail: {\n        account?: Account;\n        info: AccountInfo;\n        unclaimedStakes: OutcomeStake[];\n\n        accountRequests: DataRequestListItem[];\n        accountRequestsTotal: number;\n\n        accountStakes: OutcomeStake[];\n        accountStakesTotal: number;\n    };\n    error?: string[];\n    loading: boolean;\n}>;\n\nconst initialState: AccountState = {\n    loading: false,\n    accountDetail: {\n        account: undefined,\n        info: {\n            activeStaking: '0',\n            totalStaked: '0',\n            totalClaimed: '0',\n            storageAvailable: '0',\n            storageTotal: '0',\n            storageUsed: '0',\n        },\n        accountStakes: [],\n        accountStakesTotal: 0,\n        accountRequests: [],\n        accountRequestsTotal: 0,\n        unclaimedStakes: [],\n    }\n};\n\nconst accountSlice = createSlice({\n    initialState,\n    name: 'account',\n    reducers: {\n        setAccountErrors(state: AccountState, action: PayloadAction<string[]>): AccountState {\n            return ({\n                ...state,\n                error: action.payload,\n            });\n        },\n        setAccountLoading(state: AccountState, action: PayloadAction<boolean>): AccountState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n        setAccount(state: AccountState, action: PayloadAction<Account | undefined>): AccountState {\n            return ({\n                ...state,\n                account: action.payload,\n            });\n        },\n        setAccountDetail(state: AccountState, action: PayloadAction<Account>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    account: action.payload,\n                },\n            });\n        },\n        setAccountStakes(state: AccountState, action: PayloadAction<OutcomeStake[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountStakes: action.payload,\n                },\n            });\n        },\n        setAccountStakesTotal(state: AccountState, action: PayloadAction<number>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountStakesTotal: action.payload,\n                },\n            });\n        },\n        setAccountInfo(state: AccountState, action: PayloadAction<AccountInfo>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    info: action.payload,\n                },\n            });\n        },\n        setAccountUnclaimedStakes(state: AccountState, action: PayloadAction<OutcomeStake[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    unclaimedStakes: action.payload,\n                },\n            });\n        },\n        setAccountRequests(state: AccountState, action: PayloadAction<DataRequestListItem[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountRequests: action.payload,\n                },\n            });\n        },\n        setAccountRequestsTotal(state: AccountState, action: PayloadAction<number>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountRequestsTotal: action.payload,\n                },\n            });\n        },\n    },\n});\n\nexport const {\n    setAccount,\n    setAccountErrors,\n    setAccountLoading,\n    setAccountDetail,\n    setAccountStakes,\n    setAccountStakesTotal,\n    setAccountInfo,\n    setAccountUnclaimedStakes,\n    setAccountRequests,\n    setAccountRequestsTotal,\n} = accountSlice.actions;\n\nexport default accountSlice.reducer;\n","import { DEFAULT_PAGINATION_LIMIT } from \"../../config\";\nimport { getAccountInfo } from \"../../services/AccountService\";\nimport { getAllDataRequests } from \"../../services/DataRequestService\";\nimport { getAccountInfoWithProvider, getLoggedInAccount, loginWithProvider, logoutWithProvider } from \"../../services/providers/ProviderRegistry\";\nimport { getUnclaimedStakesByAccountId, getUserStakesByAccountId } from \"../../services/UserStakeService\";\nimport { setAccount, setAccountDetail, setAccountInfo, setAccountLoading, setAccountRequests, setAccountRequestsTotal, setAccountStakes, setAccountStakesTotal, setAccountUnclaimedStakes } from \"./account\";\n\nexport function loadLoggedInAccount() {\n    return async (dispatch: Function) => {\n        const account = await getLoggedInAccount();\n        if (!account) return;\n\n        dispatch(setAccount(account));\n    };\n}\n\nexport function loadAccount(providerId: string, accountId: string) {\n    return async (dispatch: Function) => {\n        const account = await getAccountInfoWithProvider(providerId, accountId);\n\n        if (!account) {\n            return;\n        }\n\n        const accountInfo = await getAccountInfo(accountId);\n        dispatch(setAccountDetail(account));\n        dispatch(setAccountInfo(accountInfo));\n    };\n}\n\n\nexport function loadAccountStakes(page: number, accountId: string) {\n    return async (dispatch: Function) => {\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const stakes = await getUserStakesByAccountId(accountId, {\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        });\n\n        dispatch(setAccountStakesTotal(stakes.total));\n        dispatch(setAccountStakes(stakes.items));\n    }\n}\n\nexport function loadAccountRequests(page: number, requestor: string) {\n    return async (dispatch: Function) => {\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const requests = await getAllDataRequests({\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        }, { requestor, onlyArbitratorRequests: false });\n\n        dispatch(setAccountRequests(requests.items));\n        dispatch(setAccountRequestsTotal(requests.total));\n    }\n}\n\nexport function loadUnclaimedAccountStakes(accountId: string) {\n    return async (dispatch: Function) => {\n        const stakes = await getUnclaimedStakesByAccountId(accountId);\n        dispatch(setAccountUnclaimedStakes(stakes));\n    }\n}\n\nexport function loginAccount() {\n    return async (dispatch: Function) => {\n        dispatch(setAccountLoading(true));\n\n        await loginWithProvider('near');\n\n        dispatch(setAccountLoading(false));\n    };\n}\n\n\nexport function logoutAccount() {\n    return async (dispatch: Function) => {\n        await logoutWithProvider('near');\n        dispatch(setAccount(undefined));\n    };\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppConfig } from '../../models/AppConfig';\n\nexport type AppConfigState = Readonly<{\n    loading: boolean;\n    appConfig: AppConfig;\n}>;\n\nconst initialState: AppConfigState = {\n    loading: false,\n    appConfig: {\n        nativeTokenDecimals: 18,\n        nativeTokenSymbol: '?',\n        stakeTokenDecimals: 18,\n        stakeTokenSymbol: '?',\n    }\n};\n\nconst appConfigSlice = createSlice({\n    initialState,\n    name: 'appconfig',\n    reducers: {\n        setAppConfigLoading(state: AppConfigState, action: PayloadAction<AppConfigState['loading']>): AppConfigState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n\n        setAppConfig(state: AppConfigState, action: PayloadAction<AppConfigState['appConfig']>): AppConfigState {\n            return ({\n                ...state,\n                appConfig: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setAppConfig,\n    setAppConfigLoading,\n} = appConfigSlice.actions;\n\nexport default appConfigSlice.reducer;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Menu from '../../containers/Menu';\nimport { loadLoggedInAccount, loginAccount, logoutAccount } from '../../redux/account/accountActions';\nimport { loadAppConfig } from '../../redux/appconfig/appconfigActions';\nimport { setStorageManagerDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function MenuConnector() {\n    const dispatch = useDispatch();\n    const account = useSelector((store: Reducers) => store.account.account);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    const handleLoginClick = useCallback(() => {\n        dispatch(loginAccount());\n    }, [dispatch]);\n\n    const handleLogoutClick = useCallback(() => {\n        dispatch(logoutAccount());\n    }, [dispatch]);\n\n    const handleStorageManagerClick = useCallback(() => {\n        dispatch(setStorageManagerDialogOpen({\n            open: true,\n        }));\n    }, [dispatch]);\n\n    useEffect(() => {\n        dispatch(loadLoggedInAccount());\n        dispatch(loadAppConfig());\n    }, [dispatch]);\n\n    return (\n        <Menu\n            onLoginClick={handleLoginClick}\n            account={account}\n            appConfig={appConfig}\n            onLogoutClick={handleLogoutClick}\n            onStorageManagerClick={handleStorageManagerClick}\n        />\n    );\n}\n","import { getAppConfigForProvider } from \"../../services/providers/ProviderRegistry\";\nimport { setAppConfig, setAppConfigLoading } from \"./appconfig\";\n\nexport function loadAppConfig() {\n    return async (dispatch: Function) => {\n        dispatch(setAppConfigLoading(true));\n\n        const config = await getAppConfigForProvider('near');\n\n        dispatch(setAppConfig(config));\n        dispatch(setAppConfigLoading(false));\n    };\n}\n","import React from 'react';\n\nimport s from './Footer.module.scss';\n\n\nexport default function Footer() {\n    return (\n        <footer className={s.footer}>\n            <div className={s.footerWrapper}>\n                <div className={s.logo} />\n            </div>\n        </footer>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport MenuConnector from '../../connectors/MenuConnector';\nimport Footer from '../Footer';\n\nimport s from './Page.module.scss';\n\ninterface Props {\n    className?: string;\n    bodyClassName?: string;\n    hasNavigation?: boolean;\n}\n\nexport default function Page({\n    className,\n    children,\n    hasNavigation = true,\n}: PropsWithChildren<Props>) {\n    return (\n        <div className={s.page}>\n            <MenuConnector />\n            <main className={s.body}>\n                {children}\n            </main>\n            <Footer />\n        </div>\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport trans from '../../translation/trans';\n\nimport s from './Pagination.module.scss';\n\ninterface Props {\n    total: number;\n    page: number;\n    rowsPerPage: number;\n    onChangePage: (page: number) => void;\n    className?: string;\n}\n\nexport default function Pagination({\n    total,\n    page,\n    onChangePage,\n    rowsPerPage,\n    className\n}: Props) {\n    const handleFirstPageButtonClick = () => {\n        onChangePage(0);\n    };\n\n    const handleBackButtonClick = () => {\n        onChangePage(page - 1);\n    };\n\n    const handleNextButtonClick = () => {\n        onChangePage(page + 1);\n    };\n\n    const handleLastPageButtonClick = () => {\n        onChangePage(total);\n    };\n\n    return (\n        <div className={classnames(s.pagination, className)}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                <FirstPageIcon />\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                <KeyboardArrowLeft />\n            </IconButton>\n            <span>\n                {trans('pagination.pageIndication', {\n                    currentPage: (page + 1).toString(),\n                    totalPages: (total + 1).toString(),\n                })}\n            </span>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page === total || total <= 0}\n                aria-label=\"next page\"\n            >\n                <KeyboardArrowRight />\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page === total || total <= 0}\n                aria-label=\"last page\"\n            >\n                <LastPageIcon />\n            </IconButton>\n        </div>\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\nimport Pagination from '../Pagination/Pagination';\nimport { OutcomeStake } from '../../models/OutcomeStake';\n\nimport s from './OutcomeStakesOverview.module.scss';\nimport { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport trans from '../../translation/trans';\nimport { routePaths } from '../../routes';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport { formatToken } from '../../utils/tokenUtils';\n\ninterface Props {\n    outcomeStakes: OutcomeStake[];\n    page: number;\n    totalItems: number;\n    onRequestPageChange: (page: number) => void;\n    showPagination?: boolean;\n}\n\nexport default function OutcomeStakesOverview({\n    onRequestPageChange,\n    outcomeStakes = [],\n    page,\n    totalItems,\n    showPagination = true,\n}: Props) {\n    return (\n        <div>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.id')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.roud')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.finalizedOutcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.stake')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {outcomeStakes.map((stake) => (\n                            <TableRow key={`${stake.dataRequestId}_${stake.round}_${transfromOutcomeToString(stake.outcome)}`}>\n                                <TableCell className={s.linkCell}>\n                                    <Link to={routePaths.dataRequestDetail('near', stake.dataRequestId)}>\n                                        #{stake.dataRequestId}\n                                    </Link>\n                                </TableCell>\n                                <TableCell>\n                                    {stake.round}\n                                </TableCell>\n                                <TableCell>\n                                    {transfromOutcomeToString(stake.outcome)}\n                                </TableCell>\n                                <TableCell>\n                                    {stake.finalizedOutcome ? transfromOutcomeToString(stake.finalizedOutcome) : null}\n                                </TableCell>\n                                <TableCell>\n                                    {formatToken(stake.stake, stake.stakeToken.decimals)} {stake.stakeToken.symbol}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {showPagination && (\n                <Pagination\n                    className={s.pagination}\n                    total={Math.ceil(totalItems / DEFAULT_PAGINATION_LIMIT) - 1}\n                    page={page}\n                    rowsPerPage={DEFAULT_PAGINATION_LIMIT}\n                    onChangePage={onRequestPageChange}\n                />\n            )}\n        </div>\n    );\n}\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport OutcomeStakesOverview from '../../containers/OutcomeStakesOverview';\nimport { loadAccountStakes } from '../../redux/account/accountActions';\nimport { Reducers } from '../../redux/reducers';\n\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountOutcomeStakesConnector() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n    const stakes = useSelector((store: Reducers) => store.account.accountDetail.accountStakes);\n    const total = useSelector((store: Reducers) => store.account.accountDetail.accountStakesTotal);\n    const [page, setPage] = useState(0);\n\n    const handleRequestPageChange = useCallback((newPage: number) => {\n        dispatch(loadAccountStakes(newPage, params.accountId));\n        setPage(newPage);\n    }, [dispatch, params]);\n\n    return (\n        <OutcomeStakesOverview\n            onRequestPageChange={handleRequestPageChange}\n            outcomeStakes={stakes}\n            totalItems={total}\n            page={page}\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountOutcomeStakesConnector from '../../../../connectors/AccountOutcomeStakesConnector';\nimport { loadAccountStakes } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountStakesPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadAccountStakes(0, params.accountId));\n    }, [dispatch, params]);\n\n    return (\n        <div>\n            <AccountOutcomeStakesConnector />\n        </div>\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\n\nimport { DataRequestListItem, getDataRequestTypeTranslation } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\nimport { routePaths } from '../../routes';\nimport Pagination from '../Pagination/Pagination';\n\nimport s from './DataRequestsOverview.module.scss';\nimport { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport { prettyFormatDate } from '../../utils/dateUtils';\n\ninterface Props {\n    dataRequests: DataRequestListItem[];\n    page: number;\n    totalItems: number;\n    showPagination?: boolean;\n    onRequestPageChange: (page: number) => void;\n}\n\nexport default function DataRequestsOverview({\n    dataRequests,\n    page,\n    totalItems,\n    showPagination = true,\n    onRequestPageChange,\n}: Props) {\n    return (\n        <div className={s.root}>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('dataRequestsOverview.table.label.id')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.type')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.status')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.timestamp')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {dataRequests.map((request) => (\n                            <TableRow key={request.id}>\n                                <TableCell className={s.linkCell}>\n                                    <Link to={routePaths.dataRequestDetail('near', request.id)}>\n                                        #{request.id}\n                                    </Link>\n                                </TableCell>\n                                <TableCell>\n                                    {getDataRequestTypeTranslation(request.type)}\n                                </TableCell>\n                                <TableCell>\n                                    {request.finalized_outcome && (\n                                        <span>{trans('global.status.completed')}</span>\n                                    )}\n\n                                    {!request.finalized_outcome && (\n                                        <span>{trans('global.status.ongoing')}</span>\n                                    )}\n                                </TableCell>\n                                <TableCell>\n                                    {prettyFormatDate(request.date)}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            {dataRequests.length === 0 && (\n                <div className={s.noRequests}>{trans('global.empty.noRequests')}</div>\n            )}\n            {showPagination && (\n                <Pagination\n                    className={s.pagination}\n                    total={Math.ceil(totalItems / DEFAULT_PAGINATION_LIMIT) - 1}\n                    page={page}\n                    rowsPerPage={DEFAULT_PAGINATION_LIMIT}\n                    onChangePage={onRequestPageChange}\n                />\n            )}\n        </div>\n    );\n}\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { loadAccountRequests } from '../../redux/account/accountActions';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountRequestsConnector() {\n    const [page, setPage] = useState(0);\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n    const dataRequests = useSelector((store: Reducers) => store.account.accountDetail.accountRequests);\n    const dataRequestsTotal = useSelector((store: Reducers) => store.account.accountDetail.accountRequestsTotal);\n\n    const handleRequestPageChange = useCallback((newPage: number) => {\n        dispatch(loadAccountRequests(newPage, params.accountId));\n        setPage(newPage);\n    }, [dispatch, params]);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={dataRequests}\n            onRequestPageChange={handleRequestPageChange}\n            page={page}\n            totalItems={dataRequestsTotal}\n            showPagination\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountRequestsConnector from '../../../../connectors/AccountRequestsConnector';\nimport { loadAccountRequests } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountRequestsPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadAccountRequests(0, params.accountId));\n    }, [dispatch, params.accountId]);\n\n    return (\n        <div>\n            <AccountRequestsConnector />\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OutcomeStakesOverview from '../../containers/OutcomeStakesOverview';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function AccountUnclaimedStakesConnector() {\n    const unclaimedStakes = useSelector((store: Reducers) => store.account.accountDetail.unclaimedStakes);\n\n    return (\n        <OutcomeStakesOverview\n            totalItems={0}\n            page={0}\n            onRequestPageChange={() => {}}\n            outcomeStakes={unclaimedStakes}\n            showPagination={false}\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountUnclaimedStakesConnector from '../../../../connectors/AccountUnclaimedStakesConnector';\nimport { loadUnclaimedAccountStakes } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountUnclaimedPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadUnclaimedAccountStakes(params.accountId));\n    }, [dispatch, params]);\n\n    return (\n        <div>\n            <AccountUnclaimedStakesConnector />\n        </div>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport { useCallback } from 'react';\n\nimport s from './ExternalLink.module.scss';\n\ninterface Props {\n    href: string;\n}\n\nexport default function ExternalLink({\n    children,\n    href,\n}: PropsWithChildren<Props>) {\n    const onClick = useCallback((event) => {\n        event.preventDefault();\n        window.open(href, '_blank');\n    }, [href]);\n\n    return (\n        <a href={href} className={s.link} onClick={onClick}>{children}</a>\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\n\nimport s from './WhitelistInfoCard.module.scss';\nimport trans, { booleanToYesNo } from '../../translation/trans';\nimport InformationRows from '../InformationRows';\nimport { WhitelistItemViewModel } from '../../models/WhitelistItem';\nimport { InformationRow } from '../InformationRows/InformationRows';\nimport { formatToken } from '../../utils/tokenUtils';\nimport ExternalLink from '../../components/ExternalLink';\nimport { AppConfig } from '../../models/AppConfig';\n\ninterface Props {\n    whitelist: WhitelistItemViewModel;\n    appConfig: AppConfig;\n}\n\nexport default function WhitelistInfoCard({\n    whitelist,\n    appConfig,\n}: Props) {\n    const rows: InformationRow[] = [\n        {\n            label: trans('whitelistInfoCard.label.interfaceName'),\n            value: <span>{whitelist.interfaceName}</span>,\n        },\n        {\n            label: trans('whitelistInfoCard.label.codeBaseUrl'),\n            value: <ExternalLink href={whitelist.codeBaseUrl}>{whitelist.codeBaseUrl}</ExternalLink>,\n        },\n        {\n            label: trans('whitelistInfoCard.label.active'),\n            value: <span>{booleanToYesNo(whitelist.active)}</span>,\n        }\n    ];\n\n    if (whitelist.customFee) {\n        if (whitelist.customFee.type === 'fixed') {\n            rows.push({\n                label: trans('whitelistInfoCard.label.fixedFee'),\n                value: <span>{formatToken(whitelist.customFee.fee, appConfig.stakeTokenDecimals)} {appConfig.stakeTokenSymbol}</span>\n            });\n        } else if (whitelist.customFee.type === 'multiplier') {\n            rows.push({\n                label: trans('whitelistInfoCard.label.stakeMultiplier'),\n                value: <span>{whitelist.customFee.multiplier}x</span>\n            });\n        }\n    }\n\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('whitelistInfoCard.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={rows}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport WhitelistInfoCard from '../../containers/WhitelistInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function WhitelistInfoCardConnector() {\n    const whitelist = useSelector((store: Reducers) => store.account.accountDetail.info.whitelistItem);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    if (!whitelist) {\n        return null;\n    }\n\n    return (\n        <WhitelistInfoCard\n            whitelist={whitelist}\n            appConfig={appConfig}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport trans from '../../translation/trans';\n\nimport s from './OracleConfigInfoCard.module.scss';\nimport InformationRows from '../InformationRows';\nimport { OracleConfig } from '../../models/OracleConfig';\nimport { formatTimeToReadable, prettyFormatDate } from '../../utils/dateUtils';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { prettyFormatNumber } from '../../utils/prettyFormatNumber';\n\ninterface Props {\n    oracleConfig: OracleConfig;\n}\n\nexport default function OracleConfigInfoCard({\n    oracleConfig,\n}: Props) {\n    const minInitialChallengeWindowDuration = formatTimeToReadable(Number(oracleConfig.minInitialChallengeWindowDuration), 'ns');\n    const defaultChallengeWindowDuration = formatTimeToReadable(Number(oracleConfig.defaultChallengeWindowDuration), 'ns');\n\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('oracleConfigInfoCard.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[{\n                        label: trans('oracleConfigInfoCard.label.createdAt'),\n                        value: <span>{prettyFormatDate(oracleConfig.date)}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.gov'),\n                        value: <span>{oracleConfig.gov}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.bondToken'),\n                        value: <span>{oracleConfig.bondToken.contractId}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.stakeToken'),\n                        value: <span>{oracleConfig.stakeToken.contractId}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.finalArbitrator'),\n                        value: <span>{oracleConfig.finalArbitrator}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.finalArbitratorInvokeAmount'),\n                        value: <span>{formatToken(oracleConfig.finalArbitratorInvokeAmount, oracleConfig.stakeToken.decimals, 2)} {oracleConfig.stakeToken.symbol}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.resolutionFeePercentage'),\n                        value: <span>{oracleConfig.resolutionFeePercentage / 1000}%</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.fluxMarketCap'),\n                        value: <span>${prettyFormatNumber(formatToken(oracleConfig.fluxMarketCap, 2, 2))}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.totalValueStaked'),\n                        value: <span>{oracleConfig.totalValueStaked}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.maxOutcomes'),\n                        value: <span>{oracleConfig.maxOutcomes}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.minInitialChallengeWindowDuration'),\n                        value: <span>\n                            {trans('global.date.smallFormat', {\n                                days: minInitialChallengeWindowDuration.days.toString(),\n                                hours: minInitialChallengeWindowDuration.hours.toString(),\n                                minutes: minInitialChallengeWindowDuration.minutes.toString(),\n                                seconds: minInitialChallengeWindowDuration.seconds.toString(),\n                            })} / {oracleConfig.minInitialChallengeWindowDuration} ns\n                        </span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.defaultChallengeWindowDuration'),\n                        value: <span>{\n                            trans('global.date.smallFormat', {\n                                days: defaultChallengeWindowDuration.days.toString(),\n                                hours: defaultChallengeWindowDuration.hours.toString(),\n                                minutes: defaultChallengeWindowDuration.minutes.toString(),\n                                seconds: defaultChallengeWindowDuration.seconds.toString(),\n                            })} / {oracleConfig.defaultChallengeWindowDuration} ns\n                        </span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.validityBond'),\n                        value: <span>{formatToken(oracleConfig.validityBond, oracleConfig.bondToken.decimals, 2)} {oracleConfig.bondToken.symbol}</span>\n                    },]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","export function prettyFormatNumber(num: string): string {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OracleConfigInfoCard from '../../containers/OracleConfigInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function OracleConfigInfoCardConnector() {\n    const oracleConfig = useSelector((store: Reducers) => store.oracleConfig.detail);\n\n    if (!oracleConfig) {\n        return null;\n    }\n\n    return (\n        <OracleConfigInfoCard\n            oracleConfig={oracleConfig}\n        />\n    );\n}\n","import gql from \"graphql-tag\";\nimport { OracleConfig, transformToOracleConfig } from \"../models/OracleConfig\";\nimport { graphqlClient } from \"./GraphQLService\";\n\nexport async function getOracleConfigById(id: string): Promise<OracleConfig | undefined> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                query GetOracleConfig($id: String!) {\n                    config: getOracleConfig(id: $id) {\n                        block_height\n                        payment_token\n                        date\n                        default_challenge_window_duration\n                        final_arbitrator\n                        final_arbitrator_invoke_amount\n                        gov\n                        id\n                        max_outcomes\n                        min_initial_challenge_window_duration\n                        resolution_fee_percentage\n                        stake_token\n                        validity_bond\n                        fee {\n                            flux_market_cap\n                            resolution_fee_percentage\n                            total_value_staked\n                        }\n                    }\n                }\n            `,\n            variables: {\n                id,\n            }\n        });\n\n        return transformToOracleConfig(response.data.config);\n    } catch (error) {\n        console.error('[getOracleConfig]', error);\n        return undefined;\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { OracleConfig } from '../../models/OracleConfig';\n\nexport type OracleConfigState = Readonly<{\n    detail?: OracleConfig;\n    loading: boolean;\n}>;\n\nconst initialState: OracleConfigState = {\n    loading: false,\n};\n\nconst oracleConfigSlice = createSlice({\n    initialState,\n    name: 'oracleConfig',\n    reducers: {\n        setOracleConfigDetail(state: OracleConfigState, action: PayloadAction<OracleConfig | undefined>): OracleConfigState {\n            return ({\n                ...state,\n                detail: action.payload,\n            });\n        },\n\n        setOracleConfigLoading(state: OracleConfigState, action: PayloadAction<boolean>): OracleConfigState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setOracleConfigDetail,\n    setOracleConfigLoading,\n} = oracleConfigSlice.actions;\n\nexport default oracleConfigSlice.reducer;\n","import React, { PropsWithChildren } from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Card from '../../components/Card';\nimport trans from '../../translation/trans';\n\nimport s from './AccountStakesInfoCard.module.scss';\nimport { ClaimViewModel } from '../../models/Claim';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { isSameOutcome, Outcome, OutcomeType } from '../../models/DataRequestOutcome';\nimport { TokenViewModel } from '../../models/Token';\nimport { UserStakeViewModel } from '../../models/UserStakes';\nimport Big from 'big.js';\n\ninterface Props {\n    claim?: ClaimViewModel;\n    accountStakes: UserStakeViewModel[];\n    finalizedOutcome?: Outcome;\n    finalizedRound?: number;\n    stakeToken: TokenViewModel;\n}\n\nfunction EmptyDiv(props: PropsWithChildren<{}>) {\n    return <div>{props.children}</div>\n}\n\nexport default function AccountStakesInfoCard({\n    claim,\n    accountStakes,\n    finalizedRound,\n    finalizedOutcome,\n    stakeToken,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('accountStakesInfoCard.title')}</h2>\n                </div>\n\n                {claim && (\n                    <div className={s.claim}>\n                        {trans('dataRequestDetail.label.claimed', {\n                            payout: formatToken(claim.payout, stakeToken.decimals),\n                            userCorrectStake: formatToken(claim.userCorrectStake, stakeToken.decimals),\n                            tokenSymbol: stakeToken.symbol,\n                        })}\n                    </div>\n                )}\n\n                {finalizedOutcome && !claim && (\n                    <div className={s.claim}>\n                        {trans('dataRequestDetail.description.unclaimed')}\n                    </div>\n                )}\n\n                {accountStakes.length > 0 && (\n                    <TableContainer className={s.container} component={EmptyDiv}>\n                        <Table className={s.table}>\n                            <TableHead className={s.tableHead}>\n                                <TableRow>\n                                    <TableCell>{trans('outcomeStakeInfo.table.label.round')}</TableCell>\n                                    <TableCell>{trans('outcomeStakeInfo.table.label.outcome')}</TableCell>\n                                    <TableCell>{trans('outcomeStakeInfo.table.label.stake')}</TableCell>\n                                    {finalizedOutcome && <TableCell>{trans('outcomeStakeInfo.table.label.correcltyStaked')}</TableCell>}\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {accountStakes.map((stakeInfo, index) => {\n                                    if (new Big(stakeInfo.totalStake).lte(0)) {\n                                        return null;\n                                    }\n\n                                    return (\n                                        <TableRow key={index}>\n                                            <TableCell>\n                                                {stakeInfo.round}\n                                            </TableCell>\n                                            <TableCell>\n                                                {stakeInfo.outcome.type === OutcomeType.Answer && (\n                                                    <span>\"{stakeInfo.outcome.answer}\"</span>\n                                                )}\n\n                                                {stakeInfo.outcome.type === OutcomeType.Invalid && (\n                                                    <span>{trans('outcomeStakeInfo.label.invalid')}</span>\n                                                )}\n                                            </TableCell>\n                                            <TableCell>\n                                                {formatToken(stakeInfo.totalStake, stakeToken.decimals)} {stakeToken.symbol}\n                                            </TableCell>\n\n                                            {finalizedOutcome && typeof finalizedRound !== 'undefined' && (\n                                                <TableCell>\n                                                    {stakeInfo.bonded && isSameOutcome(finalizedOutcome, stakeInfo.outcome) && trans('outcomeStakeInfo.label.correct')}\n                                                    {stakeInfo.bonded && !isSameOutcome(finalizedOutcome, stakeInfo.outcome) && trans('outcomeStakeInfo.label.incorrect')}\n                                                    {!stakeInfo.bonded && trans('outcomeStakeInfo.label.unbonded')}\n                                                </TableCell>\n                                            )}\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                )}\n\n                {accountStakes.length === 0 && (\n                    <div className={s.noStakes}>\n                        {trans('accountStakesInfoCard.noStakes')}\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport AccountStakesInfoCard from '../../containers/AccountStakesInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function AccountStakesInfoCardConnector() {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n    const finalizedOutcome = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail?.finalized_outcome);\n    const resolutionWindows = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail?.resolutionWindows) ?? [];\n\n    let finalizedRound: number | undefined = undefined;\n\n    if (finalizedOutcome) {\n        // -2 because the last round is always an open window\n        finalizedRound = resolutionWindows[resolutionWindows.length - 2].round;\n    }\n\n    if (!dataRequest) return null;\n\n    return (\n        <AccountStakesInfoCard\n            accountStakes={dataRequest.loggedInAccountStakes}\n            claim={dataRequest.loggedInAccountClaim}\n            finalizedOutcome={finalizedOutcome}\n            finalizedRound={finalizedRound}\n            stakeToken={dataRequest.stakeToken}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\n\nimport s from './CallDataInfoCard.module.scss';\nimport LabeledText from '../../compositions/LabeledText';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function CallDataInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('callDataInfo.title')}</h2>\n                </div>\n\n                {dataRequest.description && (\n                    <LabeledText label={trans('callDataInfo.description')} className={s.label}>{dataRequest.description}</LabeledText>\n                )}\n\n                {dataRequest.sources.length > 0 && (\n                    <table className={s.table}>\n                        <thead>\n                            <tr className={s.tableHeadRow}>\n                                <th>{trans('callDataInfo.label.endPoint')}</th>\n                                <th>{trans('callDataInfo.label.sourcePath')}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {dataRequest.sources.map(source => (\n                                <tr key={`${source.endPoint}_${source.sourcePath}`}>\n                                    <td className={s.tableItem}>\n                                        <span className={s.tableItemInner}>{source.endPoint}</span>\n                                    </td>\n                                    <td className={s.tableItem}><pre>{source.sourcePath}</pre></td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n\n                {dataRequest.outcomes?.length && (\n                    <>\n                        <LabeledText label={trans('callDataInfo.outcomes.title')} />\n                        <pre className={s.possibleOutcomes}>\n                            {JSON.stringify(dataRequest.outcomes, null, 4)}\n                        </pre>\n                    </>\n                )}\n\n                <LabeledText label={trans('callDataInfo.dataType')} className={s.label}>{dataRequest.data_type}</LabeledText>\n\n                {dataRequest.data_type === \"Number\" && (\n                    <LabeledText label={trans('callDataInfo.numberMultiplier')} className={s.label}>{dataRequest.number_multiplier}</LabeledText>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport CallDataInfoCard from '../../containers/CallDataInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function CallDataInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <CallDataInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import React from 'react';\nimport { default as ReactCountdown } from 'react-countdown';\n\ninterface Props {\n    date: Date;\n    onComplete: () => void;\n}\n\nexport default function Countdown({\n    date,\n    onComplete,\n}: Props) {\n    return (\n        <ReactCountdown date={date} onComplete={onComplete} />\n    );\n}\n","import Big from 'big.js';\nimport React, { useCallback, useState } from 'react';\nimport Button from '../../components/Button';\nimport Countdown from '../../compositions/Countdown';\nimport { Account } from '../../models/Account';\nimport { canDataRequestBeFinalized, DataRequestViewModel } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport trans from '../../translation/trans';\n\nimport s from './DataRequestDetailHeader.module.scss';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    onStakeClick: () => void;\n    onUnstakeClick: () => void;\n    onClaimClick: () => void;\n    onFinalizeClick: () => void;\n    account?: Account;\n    accountStakes: OutcomeStake[];\n}\n\nexport default function DataRequestDetailHeader({\n    dataRequest,\n    onStakeClick,\n    onClaimClick,\n    onUnstakeClick,\n    onFinalizeClick,\n    account,\n    accountStakes,\n}: Props) {\n    const now = new Date();\n    const [canInteract, setInteract] = useState(dataRequest.settlementTime.getTime() <= now.getTime());\n    const isFinalized = typeof dataRequest.finalized_outcome !== 'undefined';\n    const canFinalize = canDataRequestBeFinalized(dataRequest);\n    const hasClaimed = Boolean(dataRequest.loggedInAccountClaim?.payout);\n    const canUnstake = dataRequest.loggedInAccountStakes.some(stake => !stake.bonded && new Big(stake.totalStake).gt(0));\n\n    const onCountdownComplete = useCallback(() => {\n        setInteract(true);\n    }, []);\n\n    return (\n        <header className={s.header}>\n            <h1>{trans('dataRequestDetail.title', { id: dataRequest.id })}</h1>\n            <div className={s.actions}>\n                {!canInteract && (\n                    <span>\n                        {trans('dataRequestDetail.canBeResolvedIn')}\n                        <Countdown\n                            date={dataRequest.settlementTime}\n                            onComplete={onCountdownComplete}\n                        />\n                    </span>\n                )}\n\n                {canInteract && account && !isFinalized && (\n                    <Button className={s.button} onClick={onStakeClick}>\n                        {trans('dataRequestDetail.label.stake')}\n                    </Button>\n                )}\n\n                {canInteract && account && canUnstake && (\n                    <Button className={s.button} onClick={onUnstakeClick}>\n                        {trans('dataRequestDetail.label.unstake')}\n                    </Button>\n                )}\n\n                {canInteract && account && canFinalize && (\n                    <Button className={s.button} onClick={onFinalizeClick}>\n                        {trans('dataRequestDetail.label.finalize')}\n                    </Button>\n                )}\n\n                {canInteract && account && !hasClaimed && accountStakes.length > 0 && isFinalized && (\n                    <Button className={s.button} onClick={onClaimClick}>\n                        {trans('dataRequestDetail.label.claim')}\n                    </Button>\n                )}\n            </div>\n        </header>\n    );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { DataRequestListItem, DataRequestViewModel } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\nexport type DataRequestsState = Readonly<{\n    dataRequests: DataRequestListItem[];\n    dataRequestFilters: DataRequestFilters;\n    totalDataRequests: number;\n    error?: string[];\n    detailLoading: boolean;\n    loading: boolean;\n    dataRequestDetail?: DataRequestViewModel;\n    accountStakes: OutcomeStake[];\n}>;\n\nconst initialState: DataRequestsState = {\n    detailLoading: false,\n    loading: false,\n    dataRequests: [],\n    totalDataRequests: 0,\n    accountStakes: [],\n    dataRequestFilters: {\n        onlyArbitratorRequests: false,\n    }\n};\n\nconst dataRequestsSlice = createSlice({\n    initialState,\n    name: 'dataRequests',\n    reducers: {\n        setDataRequestsErrors(state: DataRequestsState, action: PayloadAction<string[]>): DataRequestsState {\n            return ({\n                ...state,\n                error: action.payload,\n            });\n        },\n        setDataRequestsLoading(state: DataRequestsState, action: PayloadAction<boolean>): DataRequestsState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n        setDataRequestDetailLoading(state: DataRequestsState, action: PayloadAction<boolean>): DataRequestsState {\n            return ({\n                ...state,\n                detailLoading: action.payload,\n            });\n        },\n        setDataRequests(state: DataRequestsState, action: PayloadAction<DataRequestListItem[]>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequests: action.payload,\n            });\n        },\n        setDataRequestDetail(state: DataRequestsState, action: PayloadAction<DataRequestViewModel | undefined>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequestDetail: action.payload,\n            });\n        },\n        setTotalDataRequest(state: DataRequestsState, action: PayloadAction<number>): DataRequestsState {\n            return ({\n                ...state,\n                totalDataRequests: action.payload,\n            });\n        },\n        setDataRequestAccountStakes(state: DataRequestsState, action: PayloadAction<OutcomeStake[]>): DataRequestsState {\n            return ({\n                ...state,\n                accountStakes: action.payload,\n            });\n        },\n        setDataRequestFilters(state: DataRequestsState, action: PayloadAction<DataRequestFilters>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequestFilters: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setDataRequests,\n    setDataRequestsErrors,\n    setDataRequestsLoading,\n    setDataRequestDetail,\n    setDataRequestDetailLoading,\n    setTotalDataRequest,\n    setDataRequestAccountStakes,\n    setDataRequestFilters,\n} = dataRequestsSlice.actions;\n\nexport default dataRequestsSlice.reducer;\n","import { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport { StakeFormValues } from '../../containers/StakeDialog/services/createDefaultStakeFormValues';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport { Outcome, OutcomeType } from '../../models/DataRequestOutcome';\nimport { combineOutcomeStakes, OutcomeStake } from '../../models/OutcomeStake';\nimport { UserStakeViewModel } from '../../models/UserStakes';\nimport { getAllDataRequests, getDataRequestById } from '../../services/DataRequestService';\nimport { claimWithProvider, finalizeWithProvider, getLoggedInAccountId, stakeWithProvider, unstakeWithProvider } from '../../services/providers/ProviderRegistry';\nimport { getUserStakesByRequestId } from '../../services/UserStakeService';\nimport { Reducers } from '../reducers';\nimport { setDataRequestDetailLoading, setDataRequestDetail, setDataRequestsLoading, setDataRequests, setTotalDataRequest, setDataRequestsErrors, setDataRequestAccountStakes } from './dataRequest';\n\nexport function loadDataRequests(page: number) {\n    return async (dispatch: Function, getState: () => Reducers) => {\n        const store = getState();\n        dispatch(setDataRequestsLoading(true));\n\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const result = await getAllDataRequests({\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        }, store.dataRequest.dataRequestFilters);\n\n        dispatch(setDataRequests(result.items));\n        dispatch(setTotalDataRequest(result.total));\n        dispatch(setDataRequestsLoading(false));\n    }\n}\n\nexport function unloadDataRequest() {\n    return (dispatch: Function) => {\n        dispatch(setDataRequestDetail(undefined));\n        dispatch(setDataRequestAccountStakes([]));\n    }\n}\n\nexport function loadDataRequestById(id: string) {\n    return async (dispatch: Function) => {\n        dispatch(setDataRequestDetailLoading(true));\n        const accountId = await getLoggedInAccountId();\n        const accountStakesRequest = getUserStakesByRequestId(id, accountId);\n        const dataRequest = await getDataRequestById(id, accountId);\n\n        if (!dataRequest) {\n            setDataRequestsErrors(['404']);\n            return;\n        }\n\n        const accountStakes = await accountStakesRequest;\n        let accountOutcomeStakes: OutcomeStake[] = [];\n\n        if (accountId && accountStakes[accountId]) {\n            accountOutcomeStakes = combineOutcomeStakes(accountStakes[accountId]);\n        }\n\n        dispatch(setDataRequestAccountStakes(accountOutcomeStakes));\n        dispatch(setDataRequestDetail(dataRequest));\n        dispatch(setDataRequestDetailLoading(false));\n    }\n}\n\nexport function stakeDataRequest(dataRequest: DataRequestViewModel, stakeFormValues: StakeFormValues) {\n    return async (dispatch: Function) => {\n        let outcome: Outcome = {\n            type: OutcomeType.Invalid,\n        };\n\n        if (!stakeFormValues.isInvalid) {\n            outcome = {\n                answer: stakeFormValues.answer,\n                type: OutcomeType.Answer,\n            };\n        }\n\n        await stakeWithProvider('near', stakeFormValues.amount, dataRequest, outcome);\n    }\n}\n\nexport function finalizeDataRequest(dataRequest: DataRequestViewModel) {\n    return async (dispatch: Function) => {\n        await finalizeWithProvider('near', dataRequest);\n    }\n}\n\nexport function claimDataRequest(accountId: string, dataRequest: DataRequestViewModel) {\n    return async (dispatch: Function) => {\n        await claimWithProvider('near', accountId, dataRequest);\n    }\n}\n\nexport function unstakeDataRequest(amount: string, dataRequest: DataRequestViewModel, stakedOutcome: UserStakeViewModel) {\n    return async (dispatch: Function) => {\n        await unstakeWithProvider('near', amount, stakedOutcome.round, dataRequest, stakedOutcome.outcome);\n    }\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport DataRequestDetailHeader from '../../containers/DataRequestDetailHeader';\nimport { claimDataRequest, finalizeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setStakeDialogOpen, setUnstakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function DataRequestDetailHeaderConnector() {\n    const dispatch = useDispatch();\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const accountStakes = useSelector((store: Reducers) => store.dataRequest.accountStakes);\n\n    const handleStakeClick = useCallback(() => {\n        dispatch(setStakeDialogOpen({\n            open: true,\n            dataRequest,\n        }));\n    }, [dispatch, dataRequest]);\n\n    const handleUnstakeClick = useCallback(() => {\n        dispatch(setUnstakeDialogOpen({\n            open: true,\n            dataRequest\n        }));\n    }, [dispatch, dataRequest]);\n\n    const handleFinalizeClick = useCallback(() => {\n        if (!dataRequest) return;\n        dispatch(finalizeDataRequest(dataRequest));\n    }, [dispatch, dataRequest]);\n\n    const handleClaimClick = useCallback(() => {\n        if (!dataRequest || !account) return;\n        dispatch(claimDataRequest(account.accountId, dataRequest));\n    }, [dispatch, dataRequest, account]);\n\n    if (!dataRequest) return null;\n\n    return (\n        <DataRequestDetailHeader\n            dataRequest={dataRequest}\n            onStakeClick={handleStakeClick}\n            onFinalizeClick={handleFinalizeClick}\n            onClaimClick={handleClaimClick}\n            onUnstakeClick={handleUnstakeClick}\n            account={account}\n            accountStakes={accountStakes}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\n\nimport s from './RequestInfoCard.module.scss';\nimport InformationRows from '../InformationRows';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport { Link } from 'react-router-dom';\nimport { routePaths } from '../../routes';\nimport { prettyFormatDate } from '../../utils/dateUtils';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function RequestInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('requestInfo.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[{\n                        label: trans('requestInfo.label.requestor'),\n                        value: <Link className={s.link} to={routePaths.account('near', dataRequest.requestor)}>{dataRequest.requestor}</Link>,\n                    }, {\n                        label: trans('requestInfo.label.dateCreated'),\n                        value: <span>{prettyFormatDate(dataRequest.date)}</span>,\n                    }, {\n                        label: trans('requestInfo.label.config'),\n                        value: <Link className={s.link} to={routePaths.config('near', dataRequest.config.id)}>{dataRequest.config.id}</Link>,\n                    }, {\n                        label: trans('requestInfo.label.finalArbitratorTriggered'),\n                        value: <span>{dataRequest.finalArbitratorTriggered + ''}</span>,\n                    }, {\n                        label: trans('requestInfo.label.feeReward'),\n                        value: <span>{formatToken(dataRequest.fee, dataRequest.stakeToken.decimals)} {dataRequest.stakeToken.symbol}</span>,\n                    }, {\n                        label: trans('requestInfo.label.totalStaked'),\n                        value: <span>{`${formatToken(dataRequest.totalStaked, dataRequest.stakeToken.decimals)} ${dataRequest.stakeToken.symbol}`}</span>,\n                    }, {\n                        label: trans('requestInfo.label.totalCorrectStaked'),\n                        value: (\n                            <span>\n                                {dataRequest.totalCorrectStaked ?\n                                    `${formatToken(dataRequest.totalCorrectStaked, dataRequest.stakeToken.decimals)} ${dataRequest.stakeToken.symbol}` :\n                                    trans('global.na')\n                                }\n                            </span>\n                        )\n                    }, {\n                        label: trans('requestInfo.label.totalIncorrectStaked'),\n                        value: (\n                            <span>\n                                {dataRequest.totalIncorrectStaked ?\n                                    `${formatToken(dataRequest.totalIncorrectStaked, dataRequest.stakeToken.decimals)} ${dataRequest.stakeToken.symbol}` :\n                                    trans('global.na')\n                                }\n                            </span>\n                        )\n                    }, {\n                        label: trans('requestInfo.label.tags'),\n                        value: <span>{dataRequest.tags.length ? dataRequest.tags.map(t => `\"${t}\"`).join(', ') : trans('requestInfo.label.noTags')}</span>\n                    }, {\n                        label: trans('requestInfo.label.finalizedOutcome'),\n                        value: <span>{dataRequest.finalized_outcome ? transfromOutcomeToString(dataRequest.finalized_outcome) : 'null'}</span>,\n                    }]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport RequestInfoCard from '../../containers/RequestInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function RequestInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <RequestInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import React, { ReactElement } from 'react';\nimport classnames from 'classnames';\nimport Switch from '@material-ui/core/Switch';\n\nimport s from './OptionSwitch.module.scss';\n\ninterface Props {\n    className?: string;\n    label: string,\n    labelA: string;\n    labelB: string;\n    onChange?: (checked: boolean) => void;\n    value?: boolean;\n}\n\nexport default function OptionSwitch({\n    label,\n    labelA,\n    labelB,\n    onChange = () => {},\n    value,\n    className = '',\n}: Props): ReactElement {\n    return (\n        <span className={classnames(s.root, className)}>\n            <span>{label}</span>\n            <div className={s.options}>\n                <span>{labelA}</span>\n                <Switch\n                    value={value}\n                    classes={{\n                        thumb: s.thumb,\n                        track: s.track,\n                        switchBase: s.switchBase,\n                    }}\n                    onChange={(_, checked) => onChange(checked)}\n                />\n                <span>{labelB}</span>\n            </div>\n        </span>\n    );\n}\n","import React, { ChangeEvent } from 'react';\nimport { default as MuiSelect } from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport s from './Select.module.scss';\n\n\nexport interface SelectItem {\n    name: string;\n    value: string;\n}\n\ninterface Props {\n    id: string;\n    items: SelectItem[];\n    value: string;\n    label?: string;\n    onChange?: (value: string) => void;\n}\n\nexport default function Select({\n    items,\n    value,\n    label,\n    id,\n    onChange = () => {},\n}: Props) {\n    function handleChange(event: ChangeEvent<{ name?: string, value: unknown }>) {\n        onChange(event.target.value as string);\n    }\n\n    return (\n        <div>\n            <InputLabel id={id}>{label}</InputLabel>\n            <MuiSelect\n                value={value}\n                labelId={id}\n                className={s.select}\n                onChange={handleChange}\n            >\n                {items.map(item => (\n                    <MenuItem key={item.value} value={item.value}>{item.name}</MenuItem>\n                ))}\n            </MuiSelect>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport Input from '../../components/Input';\nimport OptionSwitch from '../../components/OptionSwitch/OptionSwitch';\nimport Select from '../../components/Select';\nimport Dialog from '../../compositions/Dialog';\nimport { Account } from '../../models/Account';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\nimport { toToken } from '../../utils/tokenUtils';\nimport createDefaultStakeFormValues, { StakeFormValues } from './services/createDefaultStakeFormValues';\nimport validateStakeFormValues from './services/validateStakeFormValues';\n\nimport s from './StakeDialog.module.scss';\n\ninterface Props {\n    onRequestClose: () => void;\n    onSubmit: (formValues: StakeFormValues) => void;\n    open: boolean;\n    account: Account;\n    dataRequest: DataRequestViewModel;\n}\n\nexport default function StakeDialog({\n    onRequestClose,\n    onSubmit,\n    open,\n    account,\n    dataRequest,\n}: Props) {\n    const [formValues, setFormValues] = useState(createDefaultStakeFormValues(dataRequest));\n\n    function handleValidityChange(isInvalid: boolean) {\n        setFormValues({\n            ...formValues,\n            isInvalid,\n        });\n    }\n\n    function handleAnswerChange(answer: string) {\n        setFormValues({\n            ...formValues,\n            answer,\n        });\n    }\n\n    function handleStakeChange(amount: string) {\n        setFormValues({\n            ...formValues,\n            amount: amount ? toToken(amount, dataRequest.stakeToken.decimals) : '0',\n            amountFormatted: amount ? amount : '',\n        });\n    }\n\n    const errors = validateStakeFormValues(formValues, account, dataRequest);\n\n    return (\n        <Dialog\n            open={open}\n            onRequestClose={onRequestClose}\n            onSubmitClick={() => onSubmit(formValues)}\n            title={trans('stakeDialog.title')}\n            canSubmit={errors.canSubmit}\n        >\n            <form className={s.form}>\n                <div className={s.formItem}>\n                    <OptionSwitch\n                        label={trans('stakeDialog.label.validity')}\n                        labelA={trans('stakeDialog.label.valid')}\n                        labelB={trans('stakeDialog.label.invalid')}\n                        className={s.formInput}\n                        value={formValues.isInvalid}\n                        onChange={handleValidityChange}\n                    />\n                </div>\n\n                {!formValues.isInvalid && dataRequest.outcomes && (\n                    <div className={s.formItem}>\n                        <Select\n                            id=\"stake_dialog_outcome\"\n                            value={formValues.answer}\n                            label={trans('stakeDialog.label.answer')}\n                            onChange={handleAnswerChange}\n                            items={dataRequest.outcomes.map(outcome => ({\n                                name: outcome,\n                                value: outcome,\n                            }))}\n                        />\n                    </div>\n                )}\n\n                {!formValues.isInvalid && !dataRequest.outcomes && (\n                    <div className={s.formItem}>\n                        <Input\n                            label={trans('stakeDialog.label.answer')}\n                            className={s.formInput}\n                            value={formValues.answer}\n                            error={errors.answer}\n                            onChange={handleAnswerChange}\n                            type={dataRequest.data_type === 'Number' ? 'number' : 'text'}\n                        />\n                    </div>\n                )}\n                <div className={s.formItem}>\n                    <Input\n                        label={trans('stakeDialog.label.stakeAmount', { tokenSymbol: dataRequest.stakeToken.symbol })}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleStakeChange}\n                        type=\"number\"\n                        error={errors.amount}\n                    />\n                </div>\n                {errors.message && (<div className={s.error}>{errors.message}</div>)}\n            </form>\n        </Dialog>\n    );\n}\n","import { DataRequestViewModel } from \"../../../models/DataRequest\";\n\nexport interface StakeFormValues {\n    amount: string;\n    amountFormatted: string;\n    isInvalid: boolean;\n    answer: string;\n}\n\nexport default function createDefaultStakeFormValues(dataRequest: DataRequestViewModel): StakeFormValues {\n    return {\n        amount: '0',\n        amountFormatted: '0',\n        isInvalid: false,\n        answer: dataRequest.outcomes ? dataRequest.outcomes[0] : '',\n    };\n}\n","import Big from 'big.js';\nimport { Account } from '../../../models/Account';\nimport { DataRequestViewModel } from '../../../models/DataRequest';\nimport { OutcomeType } from '../../../models/DataRequestOutcome';\nimport trans from '../../../translation/trans';\nimport { StakeFormValues } from './createDefaultStakeFormValues';\n\ninterface StakeFormErrors {\n    amount: string;\n    answer: string;\n    message: string;\n    canSubmit: boolean;\n}\n\nexport default function validateStakeFormValues(formValues: StakeFormValues, account: Account, dataRequest: DataRequestViewModel): StakeFormErrors {\n    const errors: StakeFormErrors = {\n        amount: '',\n        answer: '',\n        message: '',\n        canSubmit: true,\n    };\n\n    const accountBalance = new Big(account.balance);\n\n    if (!formValues.isInvalid) {\n        if (!formValues.answer) {\n            errors.canSubmit = false;\n        }\n\n        if (dataRequest.outcomes && dataRequest.outcomes.length) {\n            if (!dataRequest.outcomes.includes(formValues.answer)) {\n                errors.answer = trans('stakeDialog.errors.mustBeAnOutcome');\n                errors.canSubmit = false;\n            }\n        }\n    }\n\n    if (accountBalance.lt(formValues.amount)) {\n        errors.amount = trans('stakeDialog.errors.notEnoughBalance')\n        errors.canSubmit = false;\n    }\n\n    if (new Big(formValues.amount).lte(0)) {\n        errors.canSubmit = false;\n    }\n\n    // You cannot stake on the same bonded outcome as the previous outcome\n    const currentRound = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1];\n    if (currentRound && currentRound.round !== 0) {\n        const previousRound = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 2];\n\n        if (previousRound?.bondedOutcome?.type === OutcomeType.Invalid && formValues.isInvalid) {\n            errors.canSubmit = false;\n            errors.message = trans('stakeDialog.errors.sameAnswerAsPreviousRound');\n        }\n\n        if (previousRound?.bondedOutcome?.type === OutcomeType.Answer && previousRound.bondedOutcome.answer === formValues.answer) {\n            errors.canSubmit = false;\n            errors.message = trans('stakeDialog.errors.sameAnswerAsPreviousRound');\n        }\n    }\n\n    return errors;\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport StakeDialog from '../../containers/StakeDialog';\nimport { StakeFormValues } from '../../containers/StakeDialog/services/createDefaultStakeFormValues';\nimport { stakeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setStakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\nexport default function StakeDialogConnector() {\n    const dispatch = useDispatch();\n    const open = useSelector((store: Reducers) => store.dialogs.stakeDialog.open);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const dataRequest = useSelector((store: Reducers) => store.dialogs.stakeDialog.dataRequest);\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setStakeDialogOpen({\n            open: false,\n            dataRequest: undefined,\n        }));\n    }, [dispatch]);\n\n    const handleSubmit = useCallback((formValues: StakeFormValues) => {\n        if (!dataRequest) return;\n\n        dispatch(stakeDataRequest(dataRequest, formValues))\n    }, [dispatch, dataRequest]);\n\n    if (!account || !dataRequest) return null;\n\n    return (\n        <StakeDialog\n            open={open}\n            onRequestClose={handleRequestClose}\n            onSubmit={handleSubmit}\n            account={account}\n            dataRequest={dataRequest}\n        />\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { ResolutionWindow } from '../../../../models/ResolutionWindow';\nimport trans from '../../../../translation/trans';\nimport { formatToken } from '../../../../utils/tokenUtils';\n\nimport s from './StakerReport.module.scss';\nimport { OutcomeType } from '../../../../models/DataRequestOutcome';\nimport { Link } from 'react-router-dom';\nimport { routePaths } from '../../../../routes';\nimport { TokenViewModel } from '../../../../models/Token';\nimport Big from 'big.js';\n\nexport interface Props {\n    stakeToken: TokenViewModel;\n    userStakes: ResolutionWindow['userStakes'];\n}\n\nexport default function StakerReport({\n    userStakes,\n    stakeToken,\n}: Props) {\n    return (\n        <div className={s.stakerReport}>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('stakeReport.table.label.accountId')}</TableCell>\n                            <TableCell>{trans('stakeReport.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('stakeReport.table.label.stake')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {Object.keys(userStakes).map((accountId, index) => {\n                            const outcomeInfos = userStakes[accountId];\n\n                            return outcomeInfos.map((outcomeInfo) => {\n                                if (new Big(outcomeInfo.stake).lte(0)) {\n                                    return null;\n                                }\n\n                                return (\n                                    <TableRow key={`${accountId}_${JSON.stringify(outcomeInfo.outcome)}`}>\n                                        <TableCell>\n                                            <Link className={s.link} to={routePaths.account('near', accountId)}>{accountId}</Link>\n                                        </TableCell>\n                                        <TableCell>\n                                            {outcomeInfo.outcome.type === OutcomeType.Answer && (\n                                                <span>\"{outcomeInfo.outcome.answer}\"</span>\n                                            )}\n\n                                            {outcomeInfo.outcome.type === OutcomeType.Invalid && (\n                                                <span>{trans('stakerReport.label.invalid')}</span>\n                                            )}\n                                        </TableCell>\n                                        <TableCell>\n                                            {formatToken(outcomeInfo.stake, stakeToken.decimals)} {stakeToken.symbol}\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            });\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { OutcomeStake } from '../../../../models/OutcomeStake';\n\nimport s from './OutcomeStakeInfo.module.scss';\nimport trans from '../../../../translation/trans';\nimport { formatToken } from '../../../../utils/tokenUtils';\nimport { isSameOutcome, Outcome, OutcomeType } from '../../../../models/DataRequestOutcome';\nimport { TokenViewModel } from '../../../../models/Token';\nimport Big from 'big.js';\n\nexport interface Props {\n    outcomeStakes: OutcomeStake[];\n    tableComponent?: any;\n    finalizedOutcome?: Outcome;\n    finalizedRound?: number;\n    stakeToken: TokenViewModel;\n}\n\nexport default function OutcomeStakeInfo({\n    outcomeStakes,\n    tableComponent = Paper,\n    finalizedOutcome,\n    finalizedRound,\n    stakeToken,\n}: Props) {\n    return (\n        <div>\n            <TableContainer className={s.container} component={tableComponent}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('outcomeStakeInfo.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakeInfo.table.label.stake')}</TableCell>\n                            {finalizedOutcome && <TableCell>{trans('outcomeStakeInfo.table.label.correcltyStaked')}</TableCell>}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {outcomeStakes.map((outcomeInfo, index) => {\n                            if (new Big(outcomeInfo.stake).lte(0)) {\n                                return null;\n                            }\n\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell>\n                                        {outcomeInfo.outcome.type === OutcomeType.Answer && (\n                                            <span>\"{outcomeInfo.outcome.answer}\"</span>\n                                        )}\n\n                                        {outcomeInfo.outcome.type === OutcomeType.Invalid && (\n                                            <span>{trans('outcomeStakeInfo.label.invalid')}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {formatToken(outcomeInfo.stake, stakeToken.decimals)} {stakeToken.symbol}\n                                    </TableCell>\n\n                                    {finalizedOutcome && typeof finalizedRound !== 'undefined' && (\n                                        <TableCell>\n                                            {outcomeInfo.round <= finalizedRound && isSameOutcome(finalizedOutcome, outcomeInfo.outcome) && trans('outcomeStakeInfo.label.correct')}\n                                            {outcomeInfo.round <= finalizedRound && !isSameOutcome(finalizedOutcome, outcomeInfo.outcome) && trans('outcomeStakeInfo.label.incorrect')}\n                                            {outcomeInfo.round > finalizedRound && trans('outcomeStakeInfo.label.unbonded')}\n                                        </TableCell>\n                                    )}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    );\n}\n","import React from 'react';\nimport Accordion from '@material-ui/core/Accordion';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Big from 'big.js';\n\nimport { ResolutionWindow } from '../../models/ResolutionWindow';\nimport trans from '../../translation/trans';\nimport StakerReport from './components/StakerReport/StakerReport';\nimport InformationRows from '../InformationRows';\nimport { prettyFormatDate } from '../../utils/dateUtils';\nimport { formatToken } from '../../utils/tokenUtils';\nimport OutcomeStakeInfo from './components/OutcomeStakeInfo/OutcomeStakeInfo';\n\nimport s from './ResolutionWindowAccordion.module.scss';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport Countdown from '../../compositions/Countdown';\nimport { useState } from 'react';\nimport { TokenViewModel } from '../../models/Token';\n\ninterface Props {\n    stakeToken: TokenViewModel;\n    resolutionWindow: ResolutionWindow;\n    defaultExpanded?: boolean;\n}\n\nexport default function ResolutionWindowAccordion({\n    resolutionWindow,\n    defaultExpanded,\n    stakeToken,\n}: Props) {\n    const now = new Date();\n    const [isWindowClosed, setWindowClosed] = useState(resolutionWindow.endTime.getTime() <= now.getTime());\n    const percentageFilled = resolutionWindow.winningOutcomeStake ? new Big(resolutionWindow.winningOutcomeStake.stake).div(resolutionWindow.bondSize).mul(100).toString() : '0';\n\n    return (\n        <Accordion className={s.accordion} defaultExpanded={defaultExpanded}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <span className={s.roundTitle}>{trans('resolutionWindow.round', { round: resolutionWindow.round.toString() })}</span>\n                <span>{resolutionWindow.bondedOutcome ? transfromOutcomeToString(resolutionWindow.bondedOutcome) : ''}</span>\n\n                {!isWindowClosed && !resolutionWindow.bondedOutcome && (\n                    <span>\n                        {trans('resolutionWindow.label.closesIn')}\n                        <Countdown\n                            date={resolutionWindow.endTime}\n                            onComplete={() => setWindowClosed(true)}\n                        />\n                    </span>\n                )}\n            </AccordionSummary>\n            <AccordionDetails className={s.details}>\n                <InformationRows\n                    rows={[\n                        {\n                            label: trans('resolutionWindowAccordion.label.endTime'),\n                            value: <span>{prettyFormatDate(resolutionWindow.endTime)}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.bondSize'),\n                            value: <span>{`${formatToken(resolutionWindow.bondSize, stakeToken.decimals)} ${stakeToken.symbol}`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.totalStaked'),\n                            value: <span>{`${formatToken(resolutionWindow.totalStaked, stakeToken.decimals)} ${stakeToken.symbol}`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.percentageFilled'),\n                            value: <span>{`${percentageFilled}%`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.winningOutcome'),\n                            value: <span>{resolutionWindow.winningOutcomeStake ? transfromOutcomeToString(resolutionWindow.winningOutcomeStake.outcome) : ''}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.bondedOutcome'),\n                            value: <span>{resolutionWindow.bondedOutcome ? transfromOutcomeToString(resolutionWindow.bondedOutcome) : ''}</span>,\n                        }\n                    ]}\n                />\n                <h3>{trans('resolutionWindowAccordion.outcomeStakes.title')}</h3>\n                <OutcomeStakeInfo stakeToken={stakeToken} outcomeStakes={resolutionWindow.outcomeStakes} />\n                <h3>{trans('resolutionWindowAccordion.stakerReports.title')}</h3>\n                <StakerReport\n                    userStakes={resolutionWindow.userStakes}\n                    stakeToken={stakeToken}\n                />\n            </AccordionDetails>\n        </Accordion>\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport Card from '../../components/Card';\nimport trans from '../../translation/trans';\n\nimport s from './ResolutionWindowInfoCard.module.scss';\nimport ResolutionWindowAccordion from '../ResolutionWindowAccordion';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function ResolutionWindowInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n    const resolutionWindows = dataRequest.resolutionWindows.slice().reverse();\n\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('stakerReportsInfo.title')}</h2>\n                </div>\n                <div>\n                    {resolutionWindows.map((resolutionWindow, index) => {\n                        return (\n                            <ResolutionWindowAccordion\n                                resolutionWindow={resolutionWindow}\n                                defaultExpanded={index === 0}\n                                key={resolutionWindow.round}\n                                stakeToken={dataRequest.stakeToken}\n                            />\n                        );\n                    })}\n                </div>\n                {resolutionWindows.length === 0 && (\n                    <div className={s.noWindows}>\n                        {trans('stakerReportsInfo.noWindows')}\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport StakerAnswersInfoCard from '../../containers/StakersReportInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function ResolutionWindowsInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <StakerAnswersInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import Big from 'big.js';\nimport React, { useState } from 'react';\nimport Select from '../../components/Select';\nimport Dialog from '../../compositions/Dialog';\nimport NumberInput from '../../compositions/NumberInput';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport trans from '../../translation/trans';\nimport { formatToken, toToken } from '../../utils/tokenUtils';\nimport { UnstakeFormValues, createDefaultUnstakeFormValues } from './services/createDefaultUnstakeFormValues';\nimport validateUnstakeFormValues from './services/validateUnstakeFormValues';\n\nimport s from './UnstakeDialog.module.scss';\n\ninterface Props {\n    onRequestClose: () => void;\n    onSubmit: (formValues: UnstakeFormValues) => void;\n    open: boolean;\n    dataRequest: DataRequestViewModel;\n}\n\n\nexport default function UnstakeDialog({\n    dataRequest,\n    onRequestClose,\n    onSubmit,\n    open,\n}: Props) {\n    const [formValues, setFormValues] = useState(createDefaultUnstakeFormValues());\n    const unbondedStakes = dataRequest.loggedInAccountStakes.filter(stake => !stake.bonded && new Big(stake.totalStake).gt(0));\n\n    function handleStakeChange(amount: string) {\n        setFormValues({\n            ...formValues,\n            amount: amount ? toToken(amount, dataRequest.stakeToken.decimals) : '0',\n            amountFormatted: amount ? amount : '',\n        });\n    }\n\n    function handleMaxClick() {\n        const selectedOutcomeStake = unbondedStakes[formValues.stakeIndex];\n\n        setFormValues({\n            ...formValues,\n            amount: selectedOutcomeStake.totalStake,\n            amountFormatted: formatToken(selectedOutcomeStake.totalStake, dataRequest.stakeToken.decimals),\n        });\n    }\n\n    function handleOutcomeChange(outcomeIndex: string) {\n        setFormValues({\n            ...formValues,\n            stakeIndex: Number(outcomeIndex),\n            selectedStakedOutcome: unbondedStakes[Number(outcomeIndex)],\n        });\n    }\n\n    const errors = validateUnstakeFormValues(formValues, unbondedStakes);\n\n    return (\n        <Dialog\n            open={open}\n            onRequestClose={onRequestClose}\n            onSubmitClick={() => onSubmit({\n                ...formValues,\n                selectedStakedOutcome: unbondedStakes[formValues.stakeIndex],\n            })}\n            title={trans('unstakeDialog.title')}\n            canSubmit={errors.canSubmit}\n        >\n            <form>\n                <div className={s.formItem}>\n                    <Select\n                        id=\"unstake_dialog_outcome\"\n                        value={formValues.stakeIndex.toString()}\n                        label={trans('unstakeDialog.label.answer')}\n                        onChange={handleOutcomeChange}\n                        items={unbondedStakes.map((stake, index) => ({\n                            name: `Round ${stake.round} - ${transfromOutcomeToString(stake.outcome)}`,\n                            value: index.toString(),\n                        }))}\n                    />\n                </div>\n                <div className={s.formItem}>\n                    {trans('unstakeDialog.label.staked', {\n                        stake: formatToken(unbondedStakes[formValues.stakeIndex].totalStake, dataRequest.stakeToken.decimals),\n                        tokenSymbol: dataRequest.stakeToken.symbol,\n                    })}\n                </div>\n                <div className={s.formItem}>\n                    <NumberInput\n                        label={trans('unstakeDialog.label.stakeAmount', { tokenSymbol: dataRequest.stakeToken.symbol })}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleStakeChange}\n                        onMaxClick={handleMaxClick}\n                        showMax\n                        error={errors.amount}\n                    />\n                </div>\n            </form>\n        </Dialog>\n    );\n}\n","import { UserStakeViewModel } from \"../../../models/UserStakes\";\n\nexport interface UnstakeFormValues {\n    selectedStakedOutcome?: UserStakeViewModel;\n    stakeIndex: number;\n    amount: string;\n    amountFormatted: string;\n}\n\nexport function createDefaultUnstakeFormValues(): UnstakeFormValues {\n    return {\n        selectedStakedOutcome: undefined,\n        amount: '',\n        amountFormatted: '',\n        stakeIndex: 0,\n    };\n}\n","import Big from \"big.js\";\nimport { UserStakeViewModel } from \"../../../models/UserStakes\";\nimport trans from \"../../../translation/trans\";\nimport { UnstakeFormValues } from \"./createDefaultUnstakeFormValues\";\n\ninterface UnstakeFormErrors {\n    canSubmit: boolean;\n    amount: string;\n}\n\nexport default function validateUnstakeFormValues(formValues: UnstakeFormValues, unbondedStakes: UserStakeViewModel[]): UnstakeFormErrors {\n    const errors: UnstakeFormErrors = {\n        canSubmit: true,\n        amount: '',\n    };\n\n    const selectedStakedOutcome = unbondedStakes[formValues.stakeIndex];\n\n    if (!selectedStakedOutcome) {\n        errors.canSubmit = false;\n        return errors;\n    }\n\n    if (formValues.amount) {\n        const amount = new Big(formValues.amount);\n\n        if (amount.lte(0)) {\n            errors.canSubmit = false;\n        }\n\n        if (amount.gt(selectedStakedOutcome.totalStake)) {\n            errors.canSubmit = false;\n            errors.amount = trans('unstakeDialog.errors.notEnoughStaked');\n        }\n    } else {\n        errors.canSubmit = false;\n    }\n\n    return errors;\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport UnstakeDialog from '../../containers/UnstakeDialog';\nimport { UnstakeFormValues } from '../../containers/UnstakeDialog/services/createDefaultUnstakeFormValues';\nimport { unstakeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setUnstakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function UnstakeDialogConnector() {\n    const dispatch = useDispatch();\n    const open = useSelector((store: Reducers) => store.dialogs.unstakeDialog.open);\n    // const accountStakes = useSelector((store: Reducers) => store.dataRequest.accountStakes);\n    const dataRequest = useSelector((store: Reducers) => store.dialogs.unstakeDialog.dataRequest);\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setUnstakeDialogOpen({\n            open: false,\n            dataRequest: undefined,\n        }));\n    }, [dispatch]);\n\n    const handleSubmit = useCallback((formValues: UnstakeFormValues) => {\n        if (!dataRequest || !formValues.selectedStakedOutcome) return;\n\n        dispatch(unstakeDataRequest(formValues.amount, dataRequest, formValues.selectedStakedOutcome));\n    }, [dispatch, dataRequest]);\n\n    if (!dataRequest) return null;\n\n    return (\n        <UnstakeDialog\n            onRequestClose={handleRequestClose}\n            open={open}\n            dataRequest={dataRequest}\n            onSubmit={handleSubmit}\n        />\n    );\n}\n","import React, { useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { Reducers } from '../../redux/reducers';\nimport { routePaths } from '../../routes';\n\ninterface Props {\n    page: number;\n}\n\nexport default function DataRequestsOverviewConnector({\n    page,\n}: Props) {\n    const history = useHistory();\n    const dataRequests = useSelector((store: Reducers) => store.dataRequest.dataRequests);\n    const totalItems = useSelector((store: Reducers) => store.dataRequest.totalDataRequests);\n\n    const handleRequestPageChange = useCallback((page: number) => {\n        history.push({\n            pathname: routePaths.dataRequests(page.toString()),\n            search: history.location.search,\n        });\n    }, [history]);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={dataRequests}\n            page={page}\n            totalItems={totalItems}\n            onRequestPageChange={handleRequestPageChange}\n        />\n    );\n}\n","import React from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { default as MuiCheckbox } from '@material-ui/core/Checkbox';\n\nimport s from './Checkbox.module.scss';\n\ninterface Props {\n    checked: boolean;\n    onChange: (checked: boolean) => void;\n    label: string;\n}\n\nexport default function Checkbox({\n    checked,\n    label,\n    onChange,\n}: Props) {\n    return (\n        <FormControlLabel\n            control={\n                <MuiCheckbox\n                    checked={checked}\n                    onChange={(e) => onChange(e.target.checked)}\n                    classes={{\n                        checked: s.checked\n                    }}\n                />\n            }\n            label={label}\n        />\n    );\n}\n","import React from 'react';\nimport Checkbox from '../../components/Checkbox';\nimport trans from '../../translation/trans';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\nimport s from './DataRequestsOverviewFilters.module.scss';\ninterface Props {\n    totalRequests: string;\n    filters: DataRequestFilters;\n    onFilterChange: (filters: DataRequestFilters) => void;\n}\n\nexport default function DataRequestsOverviewFilters({\n    totalRequests,\n    filters,\n    onFilterChange,\n}: Props) {\n\n    function handleArbitratorCheckboxClick(checked: boolean) {\n        onFilterChange({\n            ...filters,\n            onlyArbitratorRequests: checked,\n        });\n    }\n\n    return (\n        <div>\n            <h1>{trans('dataRequests.title')}</h1>\n            <div className={s.wrapper}>\n                <span className={s.subtitle}>{trans('dataRequest.subtitle', { total: totalRequests })}</span>\n                <Checkbox\n                    label={trans('dataRequestFilters.label.arbitrator')}\n                    checked={filters.onlyArbitratorRequests}\n                    onChange={handleArbitratorCheckboxClick}\n                />\n            </div>\n        </div>\n    );\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router';\nimport DataRequestsOverviewFilters from '../../containers/DataRequestsOverviewFilters';\nimport { setDataRequestFilters } from '../../redux/dataRequest/dataRequest';\nimport { loadDataRequests } from '../../redux/dataRequest/dataRequestAction';\nimport { Reducers } from '../../redux/reducers';\nimport { routePaths } from '../../routes';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\ninterface Params {\n    page: string;\n}\n\nexport default function DataRequestsOverviewFiltersConnector() {\n    const dispatch = useDispatch();\n    const totalRequests = useSelector((store: Reducers) => store.dataRequest.totalDataRequests);\n    const params = useParams<Params>();\n    const history = useHistory();\n    const urlParams = new URLSearchParams(history.location.search);\n    const filters: DataRequestFilters = {\n        onlyArbitratorRequests: urlParams.get('onlyArbitratorRequests') === 'true',\n    };\n\n    function onFilterChange(filters: DataRequestFilters) {\n        const url = new URLSearchParams();\n        url.append('onlyArbitratorRequests', '' + filters.onlyArbitratorRequests);\n\n        history.replace({\n            pathname: routePaths.dataRequests(params.page),\n            search: url.toString(),\n        });\n    }\n\n    useEffect(() => {\n        dispatch(setDataRequestFilters(filters));\n        dispatch(loadDataRequests(Number(params.page)));\n    }, [urlParams.toString(), dispatch, params]);\n\n    return (\n        <DataRequestsOverviewFilters\n            totalRequests={totalRequests.toString()}\n            filters={filters}\n            onFilterChange={onFilterChange}\n        />\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function HomeDataRequestsConnector() {\n    const latestRequests = useSelector((store: Reducers) => store.stats.latestRequests);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={latestRequests}\n            page={0}\n            totalItems={latestRequests.length}\n            onRequestPageChange={() => {}}\n            showPagination={false}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\nimport SearchConnector from '../../connectors/SearchConnector';\nimport trans from '../../translation/trans';\n\nimport s from './HomeHeader.module.scss';\n\nexport default function HomeHeader() {\n    return (\n        <Card>\n            <CardContent>\n                <h1 className={s.title}>{trans('homeHeader.title')}</h1>\n                <SearchConnector inputClassName={s.searchInput} className={s.search} />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport HomeHeader from '../../containers/HomeHeader';\n\n\nexport default function HomeHeaderConnector() {\n    return (\n        <HomeHeader />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../../../components/Card';\n\nimport s from './StatCard.module.scss';\n\ninterface Props {\n    label: string;\n    value: string;\n}\n\nexport default function StatCard({\n    label,\n    value,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <h2 className={s.statLabel}>{label}</h2>\n                <span className={s.statValue}>{value}</span>\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport millify from 'millify';\n\nimport s from './OracleStats.module.scss';\nimport trans from '../../translation/trans';\nimport StatCard from './components/StatCard/StatCard';\nimport { AppConfig } from '../../models/AppConfig';\n\ninterface Props {\n    totalRequests: string;\n    tokenPrice: number;\n    tokenMarketCap: number;\n    appConfig: AppConfig;\n}\n\nexport default function OracleStats({\n    totalRequests,\n    tokenMarketCap,\n    tokenPrice,\n    appConfig,\n}: Props) {\n    const marketCapFormatted = millify(tokenMarketCap);\n\n    return (\n        <div className={s.root}>\n            <StatCard\n                label={trans('oracleStats.label.totalRequests')}\n                value={totalRequests}\n            />\n            <StatCard\n                label={trans('oracleStats.label.tokenPrice', { tokenSymbol: appConfig.stakeTokenSymbol })}\n                value={`$${tokenPrice}`}\n            />\n            <StatCard\n                label={trans('oracleStats.label.tokenMarketCap')}\n                value={`$${marketCapFormatted}`}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OracleStats from '../../containers/OracleStats';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function OracleStatsConnector() {\n    const totalRequests = useSelector((store: Reducers) => store.stats.totalRequests);\n    const tokenPrice = useSelector((store: Reducers) => store.stats.tokenPrice);\n    const tokenMarketCap = useSelector((store: Reducers) => store.stats.tokenMarketCap);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    return (\n        <OracleStats\n            totalRequests={totalRequests}\n            tokenMarketCap={tokenMarketCap}\n            tokenPrice={tokenPrice}\n            appConfig={appConfig}\n        />\n    );\n}\n","import { COINGECKO_API_URL } from '../config';\n\nexport interface TokenMarketInfoResponse {\n    price: number;\n    marketCap: number;\n}\n\nexport async function getTokenMarketInfoByTicker(ticker: string, currency = 'usd'): Promise<TokenMarketInfoResponse> {\n    try {\n        const response = await fetch(`${COINGECKO_API_URL}/coins/${ticker}?localization=false`);\n        const data = await response.json();\n\n        return {\n            price: data.market_data.current_price[currency],\n            marketCap: data.market_data.market_cap[currency],\n        };\n    } catch (error) {\n        console.error('[getTokenMarketInfoByTicker]', error);\n\n        return {\n            marketCap: 0,\n            price: 0,\n        };\n    }\n}\n\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { DataRequestListItem } from '../../models/DataRequest';\n\nexport type StatsState = Readonly<{\n    totalRequests: string;\n    tokenPrice: number;\n    tokenMarketCap: number;\n    latestRequests: DataRequestListItem[];\n}>;\n\nconst initialState: StatsState = {\n    totalRequests: '0',\n    tokenPrice: 0,\n    tokenMarketCap: 0,\n    latestRequests: [],\n};\n\nconst statsSlice = createSlice({\n    initialState,\n    name: 'stats',\n    reducers: {\n        setTotalRequestsStat(state: StatsState, action: PayloadAction<string>): StatsState {\n            return ({\n                ...state,\n                totalRequests: action.payload,\n            });\n        },\n\n        setTokenPriceStat(state: StatsState, action: PayloadAction<number>): StatsState {\n            return ({\n                ...state,\n                tokenPrice: action.payload,\n            });\n        },\n\n        setTokenMarketCapStat(state: StatsState, action: PayloadAction<number>): StatsState {\n            return ({\n                ...state,\n                tokenMarketCap: action.payload,\n            });\n        },\n\n        setLatestRequestsStat(state: StatsState, action: PayloadAction<DataRequestListItem[]>): StatsState {\n            return ({\n                ...state,\n                latestRequests: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setTokenMarketCapStat,\n    setTokenPriceStat,\n    setTotalRequestsStat,\n    setLatestRequestsStat,\n} = statsSlice.actions;\n\nexport default statsSlice.reducer;\n","import { COINGECKO_TOKEN_TICKER } from \"../../config\";\nimport { getTokenMarketInfoByTicker } from \"../../services/DashboardService\";\nimport { getAllDataRequests } from \"../../services/DataRequestService\"\nimport cache from \"../../utils/cache\";\nimport { setLatestRequestsStat, setTokenMarketCapStat, setTokenPriceStat, setTotalRequestsStat } from \"./stats\";\n\nexport function loadStats() {\n    return async (dispatch: Function) => {\n        getAllDataRequests({\n            limit: 10,\n            offset: 0,\n        }, { onlyArbitratorRequests: false }).then((result) => {\n            dispatch(setTotalRequestsStat(result.total.toString()));\n            dispatch(setLatestRequestsStat(result.items));\n        });\n\n        cache('flx_token_price', async () => {\n            return getTokenMarketInfoByTicker(COINGECKO_TOKEN_TICKER);\n        }, 10000).then((result) => {\n            dispatch(setTokenPriceStat(result.price));\n            dispatch(setTokenMarketCapStat(result.marketCap));\n        });\n    }\n}\n","import { ComponentType } from 'react';\nimport AccountPage from './pages/AccountPage';\nimport ConfigPage from './pages/ConfigPage';\nimport DataRequestDetailPage from './pages/DataRequestDetailPage';\nimport DataRequestsPage from './pages/DataRequestsPage';\nimport HomePage from './pages/HomePage';\nimport SearchResultPage from './pages/SearchResultPage';\nimport trans from './translation/trans';\n\ninterface RouteProps {\n    component: ComponentType;\n    exact: boolean;\n    path: string;\n    navPath: string;\n    inNavigation: boolean;\n    key: string;\n    label: string;\n    icon?: string;\n}\n\nexport const routePaths = {\n    root: () => '/',\n\n    account: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}`,\n    accountRequests: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}/requests`,\n    accountUnclaimed: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}/unclaimed`,\n\n    config: (provider = ':provider', id = ':id') => `/config/${provider}/${id}`,\n\n    search: (query = ':query') => `/search/${query}`,\n\n    dataRequests: (page = ':page') => `/requests/${page}`,\n    dataRequestDetail: (provider = ':provider', id = ':id') => `/request/${provider}/${id}`,\n}\n\nexport const routes: RouteProps[] = [\n    {\n        component: HomePage,\n        exact: true,\n        inNavigation: true,\n        key: 'home',\n        label: trans('routes.label.home'),\n        path: routePaths.root(),\n        navPath: routePaths.root(),\n    },\n    {\n        component: SearchResultPage,\n        exact: true,\n        inNavigation: false,\n        key: 'search',\n        label: trans('routes.label.search'),\n        path: routePaths.search(),\n        navPath: routePaths.search(),\n    },\n    {\n        component: AccountPage,\n        exact: false,\n        inNavigation: false,\n        key: 'account',\n        label: trans('routes.label.account'),\n        path: routePaths.account(),\n        navPath: routePaths.account(),\n    },\n    {\n        component: DataRequestDetailPage,\n        exact: false,\n        inNavigation: false,\n        key: 'data-request-detail',\n        label: 'Data request detail',\n        path: routePaths.dataRequestDetail(),\n        navPath: routePaths.dataRequestDetail(),\n    },\n    {\n        component: DataRequestsPage,\n        exact: true,\n        inNavigation: true,\n        key: 'data-requests',\n        label: trans('routes.label.dataRequests'),\n        path: routePaths.dataRequests(),\n        navPath: routePaths.dataRequests('0'),\n    },\n    {\n        component: ConfigPage,\n        exact: true,\n        inNavigation: false,\n        key: 'config-detail',\n        label: trans('routes.label.config'),\n        path: routePaths.config(),\n        navPath: routePaths.config(),\n    },\n];\n","import useInterval from '@use-it/interval';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HOME_REFRESH_INTERVAL } from '../../config';\nimport HomeDataRequestsConnector from '../../connectors/HomeDataRequestsConnector';\nimport HomeHeaderConnector from '../../connectors/HomeHeaderConnector';\nimport OracleStatsConnector from '../../connectors/OracleStatsConnector';\n\nimport Page from '../../containers/Page';\nimport { loadStats } from '../../redux/stats/statsActions';\nimport trans from '../../translation/trans';\n\n\nexport default function HomePage() {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(loadStats());\n    }, [dispatch]);\n\n    useInterval(() => {\n        dispatch(loadStats());\n    }, HOME_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <HomeHeaderConnector />\n            <OracleStatsConnector />\n            <h2>{trans('homePage.title.latestRequests')}</h2>\n            <HomeDataRequestsConnector />\n        </Page>\n    );\n}\n","import React from 'react';\nimport { useParams } from 'react-router';\n\nimport Page from '../../containers/Page';\nimport trans from '../../translation/trans';\n\nimport s from './SearchResultPage.module.scss';\n\ninterface Params {\n    query: string;\n}\n\nexport default function SearchResultPage() {\n    const params = useParams<Params>();\n\n    return (\n        <Page>\n            <div>\n                <h1 className={s.title}>{trans('searchResultPage.title', { query: params.query })}</h1>\n            </div>\n            <div>\n                {trans('searchResultPage.noResults')}\n            </div>\n        </Page>\n    );\n}\n","import CardContent from '@material-ui/core/CardContent';\nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, Switch, useHistory, useLocation, useParams } from 'react-router';\nimport Card from '../../components/Card';\nimport TabBar from '../../compositions/TabBar';\nimport { TabBarItem } from '../../compositions/TabBar/TabBar';\nimport AccountDetailsInfoCardConnector from '../../connectors/AccountDetailsInfoCardConnector';\nimport Page from '../../containers/Page';\nimport { loadAccount } from '../../redux/account/accountActions';\nimport { routePaths } from '../../routes';\nimport trans from '../../translation/trans';\nimport AccountStakesPage from './sub-pages/AccountStakesPage';\nimport AccountRequestsPage from './sub-pages/AccountRequestsPage';\n\nimport s from './AccountPage.module.scss';\nimport AccountUnclaimedPage from './sub-pages/AccountUnclaimedPage';\nimport WhitelistInfoCardConnector from '../../connectors/WhitelistInfoCardConnector';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountPage() {\n    const params = useParams<Params>();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const location = useLocation();\n    const whitelistInfo = useSelector((store: Reducers) => store.account.accountDetail.info.whitelistItem);\n\n    useEffect(() => {\n        dispatch(loadAccount(params.provider, params.accountId));\n    }, [dispatch, params]);\n\n    const onTabClick = useCallback((item: TabBarItem) => {\n        history.push(item.id);\n    }, [history]);\n\n    const isRequestInterface = Boolean(whitelistInfo);\n\n    return (\n        <Page>\n            <div>\n                <h1 className={s.title}>{params.accountId}</h1>\n            </div>\n            <AccountDetailsInfoCardConnector />\n            <WhitelistInfoCardConnector />\n            <Card className={s.card}>\n                <CardContent>\n                    <TabBar\n                        activeId={location.pathname}\n                        className={s.tabBar}\n                        onTabClick={onTabClick}\n                        items={[{\n                            id: routePaths.account(params.provider, params.accountId),\n                            label: trans('accountPage.label.stakes'),\n                            show: true,\n                        }, {\n                            id: routePaths.accountUnclaimed(params.provider, params.accountId),\n                            label: trans('accountPage.label.unclaimed'),\n                            show: true,\n                        }, {\n                            id: routePaths.accountRequests(params.provider, params.accountId),\n                            label: trans('accountPage.label.requests'),\n                            show: isRequestInterface,\n                        }]}\n                    />\n                    <Switch>\n                        <Route exact path={routePaths.account()} component={AccountStakesPage} />\n                        <Route exact path={routePaths.accountRequests()} component={AccountRequestsPage} />\n                        <Route exact path={routePaths.accountUnclaimed()} component={AccountUnclaimedPage} />\n                    </Switch>\n                </CardContent>\n            </Card>\n        </Page>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport useInterval from '@use-it/interval';\nimport classnames from 'classnames';\n\nimport AccountStakesInfoCardConnector from '../../connectors/AccountStakesInfoCardConnector';\nimport CallDataInfoConnector from '../../connectors/CallDataInfoConnector';\nimport DataRequestDetailHeaderConnector from '../../connectors/DataRequestDetailHeaderConnector';\nimport RequestInfoConnector from '../../connectors/RequestInfoConnector';\nimport StakeDialogConnector from '../../connectors/StakeDialogConnector';\nimport ResolutionWindowsInfoConnector from '../../connectors/ResolutionWindowsInfoConnector';\nimport Page from '../../containers/Page';\nimport { loadDataRequestById, unloadDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { Reducers } from '../../redux/reducers';\nimport { REQUEST_DETAIL_REFRESH_INTERVAL } from '../../config';\nimport UnstakeDialogConnector from '../../connectors/UnstakeDialogConnector';\n\nimport s from './DataRequestDetailPage.module.scss';\n\ninterface RouterParams {\n    id: string;\n}\n\nexport default function DataRequestDetailPage() {\n    const dispatch = useDispatch();\n    const { id } = useParams<RouterParams>();\n    const account = useSelector((store: Reducers) => store.account.account);\n\n    useEffect(() => {\n        dispatch(loadDataRequestById(id));\n\n        return () => {\n            dispatch(unloadDataRequest());\n        }\n    }, [dispatch, id]);\n\n    useInterval(() => {\n        dispatch(loadDataRequestById(id));\n    }, REQUEST_DETAIL_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <DataRequestDetailHeaderConnector />\n            <StakeDialogConnector />\n            <UnstakeDialogConnector />\n            <RequestInfoConnector className={s.card} />\n            {account && <AccountStakesInfoCardConnector />}\n            <CallDataInfoConnector className={s.card} />\n            <ResolutionWindowsInfoConnector className={classnames(s.card, s.lastCard)} />\n        </Page>\n    );\n}\n","import useInterval from '@use-it/interval';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport DataRequestsOverviewConnector from '../../connectors/DataRequestsOverviewConnector';\nimport Page from '../../containers/Page';\nimport { loadDataRequests } from '../../redux/dataRequest/dataRequestAction';\nimport { REQUEST_LIST_REFRESH_INTERVAL } from '../../config';\nimport DataRequestsOverviewFiltersConnector from '../../connectors/DataRequestsOverviewFiltersConnector';\n\ninterface Params {\n    page: string;\n}\n\nexport default function DataRequestsPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useInterval(() => {\n        dispatch(loadDataRequests(Number(params.page)));\n    }, REQUEST_LIST_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <DataRequestsOverviewFiltersConnector />\n            <DataRequestsOverviewConnector page={Number(params.page)} />\n        </Page>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport OracleConfigInfoCardConnector from '../../connectors/OracleConfigInfoCardConnector';\nimport Page from '../../containers/Page';\nimport { loadOracleConfig } from '../../redux/oracleConfig/oracleConfigActions';\nimport trans from '../../translation/trans';\n\ninterface Params {\n    id: string;\n    provider: string;\n}\n\nexport default function ConfigPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadOracleConfig(params.id));\n    }, [dispatch, params.id]);\n\n    return (\n        <Page>\n            <h1>{trans('oracleConfig.title', { id: params.id })}</h1>\n            <OracleConfigInfoCardConnector />\n        </Page>\n    );\n}\n","import { getOracleConfigById } from '../../services/OracleConfigService';\nimport { setOracleConfigDetail, setOracleConfigLoading } from './oracleConfig';\n\nexport function loadOracleConfig(id: string) {\n    return async (dispatch: Function) => {\n        dispatch(setOracleConfigLoading(true));\n        const config = await getOracleConfigById(id);\n        dispatch(setOracleConfigDetail(config));\n        dispatch(setOracleConfigLoading(false));\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport dataRequest, { DataRequestsState } from './dataRequest/dataRequest';\nimport account, { AccountState } from './account/account';\nimport dialogs, { DialogsState } from './dialogs/dialogs';\nimport stats, { StatsState } from './stats/stats';\nimport oracleConfig, { OracleConfigState } from './oracleConfig/oracleConfig';\nimport appconfig, { AppConfigState } from './appconfig/appconfig';\n\nexport interface Reducers {\n    dataRequest: DataRequestsState;\n    account: AccountState;\n    dialogs: DialogsState;\n    stats: StatsState;\n    oracleConfig: OracleConfigState;\n    appconfig: AppConfigState;\n}\n\nexport default combineReducers<Reducers>({\n    account,\n    appconfig,\n    dataRequest,\n    dialogs,\n    stats,\n    oracleConfig,\n});\n","import {\n    applyMiddleware,\n    CombinedState,\n    createStore,\n    Store,\n    StoreEnhancer,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport reducers, { Reducers } from './reducers';\n\nconst createEnhancer = (): StoreEnhancer => (process.env.REACT_APP_APP_ENV !== 'production'\n    ? composeWithDevTools(applyMiddleware(thunk))\n    : applyMiddleware(thunk)\n);\n\nexport default function configureStore(preloadedState: Record<string, any> = {}): Store<CombinedState<Reducers>> {\n    const enhancer = createEnhancer();\n    return createStore(reducers, preloadedState, enhancer);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { StylesProvider } from '@material-ui/core/styles';\n\nimport { routes } from './routes';\nimport configureStore from './redux/store';\nimport { initProviders } from './services/providers/ProviderRegistry';\n\nimport './styles/global.module.scss';\n\nconst store = configureStore({});\ninitProviders();\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter basename=\"/\" hashType=\"hashbang\">\n            <StylesProvider injectFirst>\n                <Switch>\n                    {routes.map(route => <Route {...route} key={route.key} />)}\n                </Switch>\n            </StylesProvider>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"CallDataInfoCard_titleWrapper__27iZZ\",\"title\":\"CallDataInfoCard_title__y9qga\",\"label\":\"CallDataInfoCard_label__KSOgB\",\"table\":\"CallDataInfoCard_table__2FKa3\",\"tableHeadRow\":\"CallDataInfoCard_tableHeadRow__RWXv0\",\"tableItem\":\"CallDataInfoCard_tableItem__3hv8p\",\"tableItemInner\":\"CallDataInfoCard_tableItemInner__1JjPs\",\"possibleOutcomes\":\"CallDataInfoCard_possibleOutcomes__2zyN7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"AccountStakesInfoCard_card__2oQpV\",\"titleWrapper\":\"AccountStakesInfoCard_titleWrapper__XsRI6\",\"title\":\"AccountStakesInfoCard_title__xXeRR\",\"noStakes\":\"AccountStakesInfoCard_noStakes__nGDmS\",\"claim\":\"AccountStakesInfoCard_claim__2MMmZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"StakeDialog_form__2Jewc\",\"formItem\":\"StakeDialog_formItem__11Oc1\",\"formInput\":\"StakeDialog_formInput__1nO1v\",\"error\":\"StakeDialog_error__3U3jC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"DataRequestsOverview_root__1C_f3\",\"container\":\"DataRequestsOverview_container__gtVbk\",\"tableHead\":\"DataRequestsOverview_tableHead__1UCIA\",\"linkCell\":\"DataRequestsOverview_linkCell__v_ecT\",\"pagination\":\"DataRequestsOverview_pagination__3VSEr\",\"noRequests\":\"DataRequestsOverview_noRequests__2MHyM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"Dialog_paper__XrzDE\",\"title\":\"Dialog_title__2o5jO\",\"content\":\"Dialog_content__2Ebv9\",\"cancelButton\":\"Dialog_cancelButton__3SRaV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"DataRequestDetailHeader_header__22oVK\",\"button\":\"DataRequestDetailHeader_button__zUMJ0\"};"],"sourceRoot":""}