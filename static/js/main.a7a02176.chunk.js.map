{"version":3,"sources":["containers/OutcomeStakesOverview/OutcomeStakesOverview.module.scss","containers/AccountStakesInfoCard/AccountStakesInfoCard.module.scss","containers/RequestInfoCard/RequestInfoCard.module.scss","components/OptionSwitch/OptionSwitch.module.scss","containers/ResolutionWindowAccordion/components/StakerReport/StakerReport.module.scss","containers/UnstakeDialog/UnstakeDialog.module.scss","pages/DataRequestDetailPage/DataRequestDetailPage.module.scss","compositions/TabBar/TabBar.module.scss","compositions/LabeledText/LabeledText.module.scss","containers/AccountDetailsInfoCard/AccountDetailsInfoCard.module.scss","containers/Footer/Footer.module.scss","pages/AccountPage/AccountPage.module.scss","containers/WhitelistInfoCard/WhitelistInfoCard.module.scss","containers/OracleConfigInfoCard/OracleConfigInfoCard.module.scss","containers/ResolutionWindowAccordion/components/OutcomeStakeInfo/OutcomeStakeInfo.module.scss","containers/StakersReportInfoCard/ResolutionWindowInfoCard.module.scss","containers/ResolutionWindowAccordion/ResolutionWindowAccordion.module.scss","containers/HomeHeader/HomeHeader.module.scss","containers/OracleStats/components/StatCard/StatCard.module.scss","containers/InformationRows/InformationRows.module.scss","containers/StorageManagerDialog/StorageManagerDialog.module.scss","containers/Page/Page.module.scss","containers/DataRequestsOverviewFilters/DataRequestsOverviewFilters.module.scss","components/Card/Card.module.scss","components/InfoToolTip/InfoToolTip.module.scss","components/FakeLinkButton/FakeLinkButton.module.scss","components/Button/Button.module.scss","containers/Pagination/Pagination.module.scss","components/ExternalLink/ExternalLink.module.scss","components/Select/Select.module.scss","components/Checkbox/Checkbox.module.scss","containers/OracleStats/OracleStats.module.scss","pages/SearchResultPage/SearchResultPage.module.scss","containers/Menu/Menu.module.scss","components/Card/Card.tsx","compositions/TabBar/TabBar.tsx","components/InfoToolTip/InfoToolTip.tsx","compositions/LabeledText/LabeledText.tsx","containers/InformationRows/InformationRows.tsx","translation/trans.ts","utils/tokenUtils.ts","containers/AccountDetailsInfoCard/AccountDetailsInfoCard.tsx","connectors/AccountDetailsInfoCardConnector/AccountDetailsInfoCardConnector.tsx","components/FakeLinkButton/FakeLinkButton.tsx","components/SearchInput/SearchInput.tsx","containers/SearchForm/SearchForm.tsx","models/DataRequestOutcome.ts","models/DataRequest.ts","utils/dateUtils.ts","utils/jsonUtils.ts","models/Claim.ts","models/OracleConfig.ts","models/UserStakes.ts","models/ResolutionWindow.ts","config.ts","services/GraphQLService.ts","services/DataRequestService.ts","services/SearchService.ts","connectors/SearchConnector/SearchConnector.tsx","components/Button/Button.tsx","compositions/Dialog/Dialog.tsx","components/Input/Input.tsx","compositions/NumberInput/NumberInput.tsx","containers/StorageManagerDialog/StorageManagerDialog.tsx","containers/StorageManagerDialog/services/createDefaultStorageManagerFormValues.ts","containers/StorageManagerDialog/services/validateStorageManagerFormValues.ts","redux/dialogs/dialogs.ts","services/providers/near/NearService.ts","services/providers/near/NearConnectService.ts","utils/cache.ts","services/providers/near/StorageManagerService.ts","services/providers/ProviderRegistry.ts","services/providers/near/NearProvider.ts","connectors/StorageManagerDialogConnector/StorageManagerDialogConnector.tsx","containers/Menu/Menu.tsx","models/WhitelistItem.ts","services/AccountService.ts","models/OutcomeStake.ts","services/UserStakeService.ts","redux/account/account.ts","redux/account/accountActions.ts","redux/appconfig/appconfig.ts","connectors/MenuConnector/MenuConnector.tsx","redux/appconfig/appconfigActions.ts","containers/Footer/Footer.tsx","containers/Page/Page.tsx","containers/Pagination/Pagination.tsx","containers/OutcomeStakesOverview/OutcomeStakesOverview.tsx","connectors/AccountOutcomeStakesConnector/AccountOutcomeStakesConnector.tsx","pages/AccountPage/sub-pages/AccountStakesPage/AccountStakesPage.tsx","containers/DataRequestsOverview/DataRequestsOverview.tsx","connectors/AccountRequestsConnector/AccountRequestsConnector.tsx","pages/AccountPage/sub-pages/AccountRequestsPage/AccountRequestsPage.tsx","connectors/AccountUnclaimedStakesConnector/AccountUnclaimedStakesConnector.tsx","pages/AccountPage/sub-pages/AccountUnclaimedPage/AccountUnclaimedPage.tsx","components/ExternalLink/ExternalLink.tsx","containers/WhitelistInfoCard/WhitelistInfoCard.tsx","connectors/WhitelistInfoCardConnector/WhitelistInfoCardConnector.tsx","containers/OracleConfigInfoCard/OracleConfigInfoCard.tsx","connectors/OracleConfigInfoCardConnector/OracleConfigInfoCardConnector.tsx","services/OracleConfigService.ts","redux/oracleConfig/oracleConfig.ts","containers/ResolutionWindowAccordion/components/OutcomeStakeInfo/OutcomeStakeInfo.tsx","containers/AccountStakesInfoCard/AccountStakesInfoCard.tsx","connectors/AccountStakesInfoCardConnector/AccountStakesInfoCardConnector.tsx","containers/CallDataInfoCard/CallDataInfoCard.tsx","connectors/CallDataInfoConnector/CallDataInfoConnector.tsx","compositions/Countdown/Countdown.tsx","containers/DataRequestDetailHeader/DataRequestDetailHeader.tsx","utils/bigUtils.ts","redux/dataRequest/dataRequest.ts","redux/dataRequest/dataRequestAction.ts","connectors/DataRequestDetailHeaderConnector/DataRequestDetailHeaderConnector.tsx","containers/RequestInfoCard/RequestInfoCard.tsx","connectors/RequestInfoConnector/RequestInfoConnector.tsx","components/OptionSwitch/OptionSwitch.tsx","components/Select/Select.tsx","containers/StakeDialog/StakeDialog.tsx","containers/StakeDialog/services/createDefaultStakeFormValues.ts","containers/StakeDialog/services/validateStakeFormValues.ts","connectors/StakeDialogConnector/StakeDialogConnector.tsx","containers/ResolutionWindowAccordion/components/StakerReport/StakerReport.tsx","containers/ResolutionWindowAccordion/ResolutionWindowAccordion.tsx","containers/StakersReportInfoCard/ResolutionWindowInfoCard.tsx","connectors/ResolutionWindowsInfoConnector/ResolutionWindowsInfoConnector.tsx","containers/UnstakeDialog/UnstakeDialog.tsx","containers/UnstakeDialog/services/createDefaultUnstakeFormValues.ts","containers/UnstakeDialog/services/validateUnstakeFormValues.ts","connectors/UnstakeDialogConnector/UnstakeDialogConnector.tsx","connectors/DataRequestsOverviewConnector/DataRequestsOverviewConnector.tsx","components/Checkbox/Checkbox.tsx","containers/DataRequestsOverviewFilters/DataRequestsOverviewFilters.tsx","connectors/DataRequestsOverviewFiltersConnector/DataRequestsOverviewFiltersConnector.tsx","connectors/HomeDataRequestsConnector/HomeDataRequestsConnector.tsx","containers/HomeHeader/HomeHeader.tsx","connectors/HomeHeaderConnector/HomeHeaderConnector.tsx","containers/OracleStats/components/StatCard/StatCard.tsx","containers/OracleStats/OracleStats.tsx","connectors/OracleStatsConnector/OracleStatsConnector.tsx","services/DashboardService.ts","redux/stats/stats.ts","redux/stats/statsActions.ts","routes.ts","pages/HomePage/HomePage.tsx","pages/SearchResultPage/SearchResultPage.tsx","pages/AccountPage/AccountPage.tsx","pages/DataRequestDetailPage/DataRequestDetailPage.tsx","pages/DataRequestsPage/DataRequestsPage.tsx","pages/ConfigPage/ConfigPage.tsx","redux/oracleConfig/oracleConfigActions.ts","redux/reducers.ts","redux/store.ts","index.tsx","containers/CallDataInfoCard/CallDataInfoCard.module.scss","containers/StakeDialog/StakeDialog.module.scss","containers/DataRequestsOverview/DataRequestsOverview.module.scss","compositions/Dialog/Dialog.module.scss","containers/DataRequestDetailHeader/DataRequestDetailHeader.module.scss"],"names":["module","exports","Card","props","className","classnames","s","card","TabBar","items","onTabClick","activeId","variant","tabClassName","Tabs","classes","indicator","root","value","filter","tab","show","map","Tab","onClick","label","id","InfoToolTip","text","Tooltip","title","arrow","infoTooltipWrapper","LabeledText","info","children","tooltip","InformationRows","rows","row","item","trans","key","attributes","uppercaseFirstLetter","result","translations","resultWithAttributes","options","replace","word","undefined","replaceAttributes","charAt","toUpperCase","substring","booleanToYesNo","bool","formatToken","amount","decimals","dp","denominator","Big","pow","div","round","toFixed","toToken","mul","AccountDetailsInfoCard","account","appConfig","accountInfo","CardContent","titleWrapper","balance","activeStaking","totalStaked","totalClaimed","nativeToken","nativeTokenSymbol","storageUsed","nativeTokenDecimals","storageAvailable","AccountDetailsInfoCardConnector","accountDetail","useSelector","store","appconfig","FakeLinkButton","button","SearchInput","onChange","handleChange","useCallback","event","currentTarget","TextField","type","InputProps","endAdornment","InputAdornment","position","SearchForm","onSearch","inputClassName","useState","query","setQuery","handleSearchSubmit","preventDefault","onSubmit","v","hidden","OutcomeType","DataRequestType","prettyFormatDate","date","format","formatTimeToReadable","number","unit","Math","floor","m","h","days","hours","minutes","seconds","parseJson","str","JSON","parse","e","transformToClaimViewModel","data","payout","userCorrectStake","user_correct_stake","transformToOutcome","outcome","Invalid","parsedOutcome","Answer","answer","String","Number","multiplier","negative","toString","transfromOutcomeToString","isSameOutcome","a","b","stringify","transformToOracleConfig","blockHeight","block_height","bondToken","bond_token","Date","defaultChallengeWindowDuration","default_challenge_window_duration","finalArbitrator","final_arbitrator","finalArbitratorInvokeAmount","final_arbitrator_invoke_amount","gov","maxOutcomes","max_outcomes","minInitialChallengeWindowDuration","min_initial_challenge_window_duration","resolutionFeePercentage","resolution_fee_percentage","stakeToken","stake_token","validityBond","validity_bond","transformToUserStakes","userStakes","forEach","userStake","currentOutcomeStakes","account_id","push","stake","total_stake","dataRequestId","data_request_id","accountId","finalizedOutcome","data_request","finalized_outcome","claimPayout","claim","transformToDataRequestListItem","requestor","sources","length","Api","Arbitrator","transformToDataRequestViewModel","nanoSeconds","resolutionWindows","resolution_windows","rw","highestOutcomeStake","outcomeStakes","outcome_stakes","os","add","outcomeStake","lt","bondSize","bond_size","endTime","end_time","filled","eq","user_stakes","bondedOutcome","bonded_outcome","winningOutcomeStake","transformToResolutionWindow","reduce","prev","curr","parsedDataType","data_type","claimInfo","config","settlementTime","settlement_time","description","endPoint","end_point","sourcePath","source_path","fee","outcomes","targetContract","target_contract","finalArbitratorTriggered","final_arbitrator_triggered","tags","number_multiplier","API_URL","process","COINGECKO_API_URL","DEFAULT_PAGINATION_LIMIT","NEAR_NETWORK","NEAR_NULL_CONTRACT","NEAR_FLUX_TOKEN_ID","NEAR_ORACLE_CONTRACT_ID","NEAR_MAX_GAS","STORAGE_BASE","PE","cache","InMemoryCache","link","createHttpLink","uri","graphqlClient","ApolloClient","defaultOptions","watchQuery","fetchPolicy","getAllDataRequests","limit","offset","onlyArbitratorRequests","gql","variables","response","paginatedDataRequests","dataRequests","dr","total","console","error","getDataRequestById","dataRequest","doesDataRequestExists","request","search","isNaN","url","routePaths","dataRequestDetail","SearchConnector","history","useHistory","handleSearch","Button","disabled","Dialog","open","isInfoDialog","onRequestClose","onSubmitClick","canSubmit","hideButtons","paperClassName","paper","DialogTitle","DialogContent","content","DialogActions","cancelButton","confirmButton","Input","input","helperText","NumberInput","showMax","onMaxClick","StorageManagerDialog","amountFormatted","formValues","setFormValues","errors","amountToWithdraw","gt","lte","validateStorageManagerFormValues","handleMaxClick","formItem","formInput","dialogsSlice","createSlice","initialState","stakeDialog","unstakeDialog","storageManager","name","reducers","setStakeDialogOpen","state","action","payload","setUnstakeDialogOpen","setStorageManagerDialogOpen","actions","batchSendTransactions","walletConnection","txs","callbackUrl","getAccountId","_near","connection","signer","getPublicKey","networkId","localKey","provider","block","finality","blockHash","utils","serialize","base_decode","header","hash","Promise","all","index","receiverId","transactionOptions","tx","transactions","functionCall","methodName","args","BN","gas","accessKeyForTransaction","accessKey","Error","publicKey","PublicKey","from","public_key","nonce","access_key","createTransaction","resultTxs","requestSignTransactions","getTokenBalance","viewFunction","createNearOutcome","isNegative","createNetworkConfig","connectConfig","nodeUrl","walletUrl","customNodeUrl","contractName","customWalletUrl","initialBalance","connectedNear","connectNear","nearInstance","networkConfig","connect","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","connectWallet","near","WalletConnection","cacheStorage","Map","creationPromises","createCallback","ttl","get","onGoingRequest","createRequest","set","createdItem","setTimeout","delete","getMinimumStorage","contractId","minimumBalance","min","getStorageBalance","storage","available","createStorageTransaction","extraStorage","minimumStorageRequired","storageBalance","storageRequired","sub","providerInitPromise","NearProvider","requestSignIn","signOut","wallet","isSignedIn","this","storageInfo","storageTotal","used","stakeOutcome","getLoggedInAccountId","loggedInAccount","storageTransaction","receiver_id","msg","request_id","resolution_round","providers","p","init","getProviderById","find","getLoggedInProvider","isLoggedIn","loginWithProvider","providerId","login","logoutWithProvider","logout","getAccountInfoWithProvider","getAccountInfo","getLoggedInAccount","loggedInAccountId","getAppConfigForProvider","stakeWithProvider","finalizeWithProvider","finalize","claimWithProvider","unstakeWithProvider","unstake","getProviderStorageBalance","StorageManagerDialogConnector","dialogs","dispatch","useDispatch","handleRequestClose","handleSumbit","withdrawStorage","Menu","onLoginClick","onLogoutClick","onStorageManagerClick","menuAnchorEl","setMenuAnchorEl","handleMenuClose","menu","topBar","to","logoWrapper","logo","bottomBar","menuItems","routes","route","inNavigation","menuItem","menuLink","activeClassName","exact","navPath","rightMenu","accountLinks","moreMenu","IconButton","iconButton","anchorEl","keepMounted","Boolean","onClose","mobileOnly","transformToWhitelistItemViewModel","customFee","parsedCustomFee","custom_fee","Fixed","Multiplier","active","codeBaseUrl","code_base_url","contractEntry","contract_entry","interfaceName","interface_name","storageBalanceRequest","active_staking","total_staked","total_claimed","whitelistItem","whitelist_item","combineOutcomeStakes","internalId","currentItem","Array","values","getUserStakesByRequestIdAndAccountId","requestId","stakes","getUserStakesByRequestId","getUserStakesByAccountId","filters","getUnclaimedStakesByAccountId","loading","accountStakes","accountStakesTotal","accountRequests","accountRequestsTotal","unclaimedStakes","accountSlice","setAccountErrors","setAccountLoading","setAccount","setAccountDetail","setAccountStakes","setAccountStakesTotal","setAccountInfo","setAccountUnclaimedStakes","setAccountRequests","setAccountRequestsTotal","loadAccountStakes","page","loadAccountRequests","requests","appConfigSlice","setAppConfigLoading","setAppConfig","MenuConnector","handleLoginClick","handleLogoutClick","handleStorageManagerClick","useEffect","Footer","footer","footerWrapper","Page","hasNavigation","body","Pagination","onChangePage","rowsPerPage","pagination","aria-label","currentPage","totalPages","OutcomeStakesOverview","onRequestPageChange","totalItems","showPagination","TableContainer","container","component","Paper","Table","table","TableHead","tableHead","TableRow","TableCell","TableBody","linkCell","ceil","AccountOutcomeStakesConnector","params","useParams","setPage","handleRequestPageChange","newPage","AccountStakesPage","DataRequestsOverview","noRequests","AccountRequestsConnector","dataRequestsTotal","AccountRequestsPage","AccountUnclaimedStakesConnector","AccountUnclaimedPage","ExternalLink","href","window","WhitelistInfoCard","whitelist","WhitelistInfoCardConnector","OracleConfigInfoCard","oracleConfig","OracleConfigInfoCardConnector","detail","getOracleConfigById","oracleConfigSlice","setOracleConfigDetail","setOracleConfigLoading","OutcomeStakeInfo","tableComponent","finalizedRound","outcomeInfo","EmptyDiv","AccountStakesInfoCard","tokenSymbol","noStakes","AccountStakesInfoCardConnector","CallDataInfoCard","tableHeadRow","source","tableItem","tableItemInner","possibleOutcomes","CallDataInfoConnector","Countdown","onComplete","DataRequestDetailHeader","onStakeClick","onClaimClick","onUnstakeClick","onFinalizeClick","now","getTime","canInteract","setInteract","currentResolutionWindow","isFinalized","canFinalize","canDataRequestBeFinalized","hasClaimed","roundStakes","stakedOnRound","roundStake","onCountdownComplete","dataRequestsSlice","detailLoading","totalDataRequests","dataRequestFilters","setDataRequestsErrors","setDataRequestsLoading","setDataRequestDetailLoading","setDataRequests","setDataRequestDetail","setTotalDataRequest","setDataRequestAccountStakes","setDataRequestFilters","loadDataRequests","getState","loadDataRequestById","accountStakesRequest","accountOutcomeStakes","DataRequestDetailHeaderConnector","handleStakeClick","handleUnstakeClick","handleFinalizeClick","finalizeDataRequest","handleClaimClick","claimDataRequest","RequestInfoCard","t","join","RequestInfoConnector","OptionSwitch","labelA","labelB","Switch","thumb","track","switchBase","_","checked","Select","InputLabel","labelId","select","target","MenuItem","StakeDialog","isInvalid","createDefaultStakeFormValues","handleAnswerChange","message","accountBalance","includes","currentRound","previousRound","validateStakeFormValues","form","StakeDialogConnector","handleSubmit","stakeFormValues","stakeDataRequest","StakerReport","stakerReport","Object","keys","ResolutionWindowAccordion","resolutionWindow","defaultExpanded","isWindowClosed","setWindowClosed","percentageFilled","Accordion","accordion","AccordionSummary","expandIcon","roundTitle","AccordionDetails","details","ResolutionWindowInfoCard","slice","reverse","noWindows","ResolutionWindowsInfoConnector","UnstakeDialog","outcomeIndex","validateUnstakeFormValues","selectedOutcomeStake","UnstakeDialogConnector","unstakeDataRequest","DataRequestsOverviewConnector","pathname","location","Checkbox","FormControlLabel","control","DataRequestsOverviewFilters","totalRequests","onFilterChange","wrapper","subtitle","DataRequestsOverviewFiltersConnector","urlParams","URLSearchParams","append","HomeDataRequestsConnector","latestRequests","stats","HomeHeader","searchInput","HomeHeaderConnector","StatCard","statLabel","statValue","OracleStats","tokenMarketCap","tokenPrice","marketCapFormatted","millify","OracleStatsConnector","getTokenMarketInfoByTicker","ticker","currency","fetch","json","price","market_data","current_price","marketCap","market_cap","statsSlice","setTotalRequestsStat","setTokenPriceStat","setTokenMarketCapStat","setLatestRequestsStat","loadStats","then","accountUnclaimed","useInterval","path","useLocation","tabBar","lastCard","combineReducers","createEnhancer","REACT_APP_APP_ENV","composeWithDevTools","applyMiddleware","thunk","preloadedState","enhancer","createStore","configureStore","initProviders","ReactDOM","render","basename","hashType","StylesProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.a7a02176.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"OutcomeStakesOverview_container__d2gou\",\"tableHead\":\"OutcomeStakesOverview_tableHead__2uKGi\",\"linkCell\":\"OutcomeStakesOverview_linkCell__1JQo4\",\"pagination\":\"OutcomeStakesOverview_pagination__9qflK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"AccountStakesInfoCard_card__2oQpV\",\"titleWrapper\":\"AccountStakesInfoCard_titleWrapper__XsRI6\",\"title\":\"AccountStakesInfoCard_title__xXeRR\",\"noStakes\":\"AccountStakesInfoCard_noStakes__nGDmS\",\"claim\":\"AccountStakesInfoCard_claim__2MMmZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"RequestInfoCard_titleWrapper__3noPW\",\"title\":\"RequestInfoCard_title__3_LHr\",\"requestDetails\":\"RequestInfoCard_requestDetails__1YEfP\",\"item\":\"RequestInfoCard_item__10SUD\",\"link\":\"RequestInfoCard_link__1uLuv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"OptionSwitch_root__URwjr\",\"options\":\"OptionSwitch_options__3MHNp\",\"thumb\":\"OptionSwitch_thumb__2cImY\",\"track\":\"OptionSwitch_track__2IbZB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"StakerReport_container__1KMDE\",\"link\":\"StakerReport_link__28dEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"UnstakeDialog_form__C2-VH\",\"formItem\":\"UnstakeDialog_formItem__3mtQ-\",\"formInput\":\"UnstakeDialog_formInput__3LoeJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"DataRequestDetailPage_card__3etft\",\"lastCard\":\"DataRequestDetailPage_lastCard__1-jEK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TabBar_root__2tnOA\",\"tab\":\"TabBar_tab__t4I0-\",\"indicator\":\"TabBar_indicator__2rgIT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"LabeledText_root___tErh\",\"label\":\"LabeledText_label__3rjG2\",\"tooltip\":\"LabeledText_tooltip__1GkBn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"AccountDetailsInfoCard_titleWrapper__13sTy\",\"card\":\"AccountDetailsInfoCard_card__15fyo\",\"title\":\"AccountDetailsInfoCard_title__1q59t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__30IoI\",\"footerWrapper\":\"Footer_footerWrapper__2JRgQ\",\"logo\":\"Footer_logo__1GRAA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabBar\":\"AccountPage_tabBar__nyIhL\",\"card\":\"AccountPage_card__21C88\",\"title\":\"AccountPage_title__21f5o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"WhitelistInfoCard_titleWrapper__aGhS9\",\"card\":\"WhitelistInfoCard_card__3P3YS\",\"title\":\"WhitelistInfoCard_title__38y1w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"OracleConfigInfoCard_titleWrapper__1ddeR\",\"title\":\"OracleConfigInfoCard_title__3mNUJ\",\"card\":\"OracleConfigInfoCard_card__ut_iI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"OutcomeStakeInfo_container__1nmxk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"ResolutionWindowInfoCard_titleWrapper__1xIda\",\"title\":\"ResolutionWindowInfoCard_title__14x7-\",\"noWindows\":\"ResolutionWindowInfoCard_noWindows__2uZTP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accordion\":\"ResolutionWindowAccordion_accordion__XN6Ij\",\"roundTitle\":\"ResolutionWindowAccordion_roundTitle__1OvP0\",\"details\":\"ResolutionWindowAccordion_details__9JJHE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HomeHeader_title__3isjk\",\"search\":\"HomeHeader_search__2w-zi\",\"searchInput\":\"HomeHeader_searchInput__39vB0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"StatCard_card__1M2jM\",\"statLabel\":\"StatCard_statLabel__N14eN\",\"statValue\":\"StatCard_statValue__F5gOf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"InformationRows_root__1CR4v\",\"item\":\"InformationRows_item__1QOpX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"StorageManagerDialog_form__2SPdU\",\"formItem\":\"StorageManagerDialog_formItem__1Ps1x\",\"formInput\":\"StorageManagerDialog_formInput__12vWX\",\"error\":\"StorageManagerDialog_error__3REyq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Page_page__1vav1\",\"body\":\"Page_body__34Ach\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subtitle\":\"DataRequestsOverviewFilters_subtitle__3ViXR\",\"wrapper\":\"DataRequestsOverviewFilters_wrapper__2lMdn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__35wN0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoTooltipWrapper\":\"InfoToolTip_infoTooltipWrapper__tIv_o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FakeLinkButton_button__3y9OQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Lf63\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__CcIoD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"ExternalLink_link__1Kew6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"Select_select__JK0vz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checked\":\"Checkbox_checked__2Gh-t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"OracleStats_root__2Ae20\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"SearchResultPage_title__1YHPd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Menu_root__3JE0d\",\"menu\":\"Menu_menu__2sZJU\",\"topBar\":\"Menu_topBar__1xIMt\",\"bottomBar\":\"Menu_bottomBar__1J-Xi\",\"menuItems\":\"Menu_menuItems__1E3rU\",\"accountLinks\":\"Menu_accountLinks__3tRwW\",\"menuItem\":\"Menu_menuItem__3mHfR\",\"menuLink\":\"Menu_menuLink__2oVrc\",\"menuLink--active\":\"Menu_menuLink--active__3XNkb\",\"link\":\"Menu_link__1lvRI\",\"logoWrapper\":\"Menu_logoWrapper__3tZ4v\",\"logo\":\"Menu_logo__2SxFW\",\"rightMenu\":\"Menu_rightMenu__GMj4U\",\"moreMenu\":\"Menu_moreMenu__1jmd5\",\"mobileOnly\":\"Menu_mobileOnly__Yj8kA\"};","import React from 'react';\nimport classnames from 'classnames';\nimport { CardProps, default as MuiCard } from '@material-ui/core/Card';\n\nimport s from './Card.module.scss';\n\nexport default function Card(props: CardProps) {\n    return (\n        <MuiCard {...props} className={classnames(s.card, props.className)} />\n    );\n}\n","import React, { ReactElement } from 'react';\nimport classnames from 'classnames';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport s from './TabBar.module.scss';\n\nexport interface TabBarItem {\n    id: string;\n    label: string;\n    show: boolean;\n}\n\ninterface Props {\n    items: TabBarItem[];\n    activeId: string;\n    onTabClick: (item: TabBarItem) => void;\n    className?: string;\n    tabClassName?: string;\n    variant?: 'standard' | 'scrollable' | 'fullWidth';\n}\n\nexport default function TabBar({\n    items,\n    onTabClick,\n    activeId,\n    variant = 'standard',\n    tabClassName = '',\n    className = '',\n}: Props): ReactElement {\n    return (\n        <Tabs\n            classes={{ indicator: s.indicator }}\n            className={classnames(s.root, className)}\n            variant={variant}\n            value={activeId}\n        >\n            {items.filter(tab => tab.show).map(tab => (\n                <Tab\n                    key={tab.id}\n                    onClick={() => onTabClick(tab)}\n                    className={classnames(s.tab, tabClassName)}\n                    label={tab.label}\n                    value={tab.id}\n                />\n            ))}\n        </Tabs>\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport InfoIcon from '@material-ui/icons/Info';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport s from './InfoToolTip.module.scss';\n\ninterface Props {\n    text: string;\n    className?: string;\n}\n\nexport default function InfoToolTip({\n    text,\n    className = '',\n}: Props) {\n    return (\n        <Tooltip title={text} arrow>\n            <div className={classnames(className, s.infoTooltipWrapper)}>\n                <InfoIcon />\n            </div>\n        </Tooltip>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nimport s from './LabeledText.module.scss';\nimport InfoToolTip from '../../components/InfoToolTip';\n\ninterface Props {\n    label: string;\n    info?: string;\n    className?: string;\n}\n\nexport default function LabeledText({\n    label,\n    info = '',\n    children,\n    className,\n}: PropsWithChildren<Props>) {\n    return (\n        <div className={classnames(s.root, className)}>\n            <span className={s.label}>\n                {label}\n                {info && <InfoToolTip className={s.tooltip} text={info} />}\n            </span>\n            <span>{children}</span>\n        </div>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport LabeledText from '../../compositions/LabeledText';\n\nimport s from './InformationRows.module.scss';\n\nexport interface InformationRow {\n    label: string;\n    value: ReactElement;\n    info?: string;\n}\n\ninterface Props {\n    rows: InformationRow[];\n}\n\nexport default function InformationRows({\n    rows,\n}: Props) {\n    return (\n        <div className={s.root}>\n            {rows.map((row) => {\n                return (\n                    <LabeledText key={row.label} className={s.item} label={row.label} info={row.info}>\n                        {row.value}\n                    </LabeledText>\n                );\n            })}\n        </div>\n    );\n}\n","import translations from './lang/translations.eng.json';\n\ninterface Attributes {\n    [key: string]: string;\n}\n\nfunction replaceAttributes(label: string, options: Attributes = {}): string {\n    // Replaces any \":key\" with a value in the options\n    return label.replace(/:(\\w+)/gi, (word) => {\n        const key = word.replace(/^:/, '');\n\n        if (options[key] === undefined || options[key] === null) {\n            return '';\n        }\n\n        return options[key];\n    });\n}\n\nexport function ucFirstLetter(text: string): string {\n    return text.charAt(0).toUpperCase() + text.substring(1);\n}\n\n\nexport default function trans(key: string, attributes?: Attributes, uppercaseFirstLetter?: boolean): string {\n    // @ts-ignore\n    const result: string = translations[key];\n\n    if (!result) {\n        return key;\n    }\n\n    const resultWithAttributes = replaceAttributes(result, attributes);\n    return uppercaseFirstLetter ? ucFirstLetter(resultWithAttributes) : resultWithAttributes;\n}\n\nexport function booleanToYesNo(bool = false): string {\n    return bool ? trans('global.yes') : trans('global.no');\n}\n","import Big from \"big.js\";\n\n/**\n * Converts the smalles unit to a human readable amount\n *\n * @export\n * @param {string} amount\n * @param {number} [decimals=18]\n * @param {number} [dp=2]\n * @return {string}\n */\nexport function formatToken(amount: string, decimals = 18, dp = 2): string {\n    const denominator = new Big(10).pow(decimals);\n    return new Big(amount).div(denominator).round(dp, 0).toFixed(dp);\n}\n\n/**\n * Converts the amount to the smallest unit (default 18)\n *\n * @export\n * @param {string} amount\n * @param {number} [decimals=18]\n * @return {string}\n */\nexport function toToken(amount: string, decimals = 18): string {\n    const denominator = new Big(10).pow(decimals);\n    return new Big(amount).mul(denominator).toFixed(0);\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\nimport InformationRows from '../InformationRows';\nimport trans from '../../translation/trans';\nimport { Account, AccountInfo } from '../../models/Account';\n\nimport s from './AccountDetailsInfoCard.module.scss';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { AppConfig } from '../../models/AppConfig';\n\nexport interface Props {\n    account?: Account;\n    appConfig: AppConfig;\n    accountInfo: AccountInfo;\n}\n\nexport default function AccountDetailsInfoCard({\n    account,\n    appConfig,\n    accountInfo,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('accountDetailsInfoCard.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[\n                        {\n                            label: trans('accountDetailsInfoCard.label.balance'),\n                            value: <span>{formatToken(account?.balance ?? '0')} {trans('global.token.symbol')}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.activeStaking'),\n                            value: <span>{formatToken(accountInfo.activeStaking)} {trans('global.token.symbol')}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.totalStaked'),\n                            value: <span>{formatToken(accountInfo.totalStaked)} {trans('global.token.symbol')}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.totalClaimed'),\n                            value: <span>{formatToken(accountInfo.totalClaimed)} {trans('global.token.symbol')}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.storageUsed'),\n                            info: trans('accountDetailsInfoCard.info.storageUsed', { nativeToken: appConfig.nativeTokenSymbol }),\n                            value: <span>{formatToken(accountInfo.storageUsed, appConfig.nativeTokenDecimals, 4)} {appConfig.nativeTokenSymbol}</span>,\n                        },\n                        {\n                            label: trans('accountDetailsInfoCard.label.storageUnused'),\n                            info: trans('accountDetailsInfoCard.info.storageUnused', { nativeToken: appConfig.nativeTokenSymbol }),\n                            value: <span>{formatToken(accountInfo.storageAvailable, appConfig.nativeTokenDecimals, 4)} {appConfig.nativeTokenSymbol}</span>,\n                        },\n                    ]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport AccountDetailsInfoCard from '../../containers/AccountDetailsInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\nexport default function AccountDetailsInfoCardConnector() {\n    const accountDetail = useSelector((store: Reducers) => store.account.accountDetail);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n\n    return (\n        <AccountDetailsInfoCard\n            account={accountDetail.account}\n            accountInfo={accountDetail.info}\n            appConfig={appConfig}\n        />\n    );\n}\n","import React, { FormEvent, PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nimport s from './FakeLinkButton.module.scss';\n\ninterface Props {\n    className?: string;\n    onClick?: (event: FormEvent) => void;\n}\n\nexport default function FakeLinkButton({\n    children,\n    className,\n    onClick,\n}: PropsWithChildren<Props>) {\n    return (\n        <button onClick={onClick} className={classnames(s.button, className)}>\n            {children}\n        </button>\n    );\n}\n","import React, { FormEvent, useCallback } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SearchIcon from '@material-ui/icons/Search';\n\ninterface Props {\n    label: string;\n    value?: string;\n    className?: string;\n    onChange?: (value: string) => void;\n}\n\nexport default function SearchInput({\n    label,\n    className,\n    value,\n    onChange = () => {},\n}: Props) {\n    const handleChange = useCallback((event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        onChange(event.currentTarget.value);\n    }, [onChange]);\n\n    return (\n        <TextField\n            label={label}\n            className={className}\n            value={value}\n            type=\"search\"\n            onChange={handleChange}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"start\">\n                        <SearchIcon />\n                    </InputAdornment>\n                ),\n            }}\n        />\n    );\n}\n","import React, { FormEvent, useCallback, useState } from 'react';\nimport SearchInput from '../../components/SearchInput';\nimport trans from '../../translation/trans';\n\ninterface Props {\n    onSearch: (query: string) => void;\n    className?: string;\n    inputClassName?: string;\n}\n\nexport default function SearchForm({\n    onSearch,\n    className,\n    inputClassName,\n}: Props) {\n    const [query, setQuery] = useState('');\n    const handleSearchSubmit = useCallback((event: FormEvent) => {\n        event.preventDefault();\n        onSearch(query);\n    }, [query, onSearch]);\n\n    return (\n        <form className={className} onSubmit={handleSearchSubmit}>\n            <SearchInput\n                label={trans('menu.label.search')}\n                onChange={v => setQuery(v)}\n                value={query}\n                className={inputClassName}\n            />\n            <input type=\"submit\" hidden />\n        </form>\n    );\n}\n","import Big from \"big.js\";\nimport trans from \"../translation/trans\";\n\nexport enum OutcomeType {\n    Answer,\n    Invalid\n}\n\nexport interface OutcomeAnswer {\n    answer: string;\n    type: OutcomeType.Answer;\n}\n\nexport interface OutcomeInvalid {\n    type: OutcomeType.Invalid;\n}\n\nexport type Outcome = OutcomeAnswer | OutcomeInvalid;\n\n\nexport interface OutcomeNumber {\n    Number: {\n        value: string;\n        multiplier: string;\n        negative: boolean;\n    }\n}\n\nexport interface OutcomeString {\n    String: string;\n}\n\nexport interface ParsedOutcome {\n    Answer: OutcomeNumber | OutcomeString;\n}\n\nexport function transformToOutcome(outcome: string): Outcome {\n    if (outcome === 'Invalid') {\n        return {\n            type: OutcomeType.Invalid,\n        }\n    }\n\n    const parsedOutcome: ParsedOutcome = JSON.parse(outcome);\n\n    if ('String' in parsedOutcome.Answer) {\n        return {\n            answer: parsedOutcome.Answer.String,\n            type: OutcomeType.Answer,\n        };\n    }\n\n    const number = new Big(parsedOutcome.Answer.Number.value).div(parsedOutcome.Answer.Number.multiplier);\n\n    if (parsedOutcome.Answer.Number.negative) {\n        number.s = -1;\n    }\n\n    return {\n        answer: number.toString(),\n        type: OutcomeType.Answer,\n    };\n}\n\nexport function transfromOutcomeToString(outcome: Outcome): string {\n    if (outcome.type === OutcomeType.Invalid) {\n        return trans('outcome.invalid');\n    }\n\n    return `\"${outcome.answer}\"`;\n}\n\nexport function isSameOutcome(a: Outcome, b: Outcome): boolean {\n    if (a.type === OutcomeType.Invalid && b.type === OutcomeType.Invalid) {\n        return true;\n    }\n\n    return JSON.stringify(a) === JSON.stringify(b);\n}\n","import Big from \"big.js\";\nimport trans from \"../translation/trans\";\nimport { nsToMs } from \"../utils/dateUtils\";\nimport { parseJson } from \"../utils/jsonUtils\";\nimport { ClaimGraphData, ClaimViewModel, transformToClaimViewModel } from \"./Claim\";\nimport { Outcome, transformToOutcome } from \"./DataRequestOutcome\";\nimport { OracleConfig, OracleConfigGraphData, transformToOracleConfig } from \"./OracleConfig\";\nimport { ResolutionWindow, ResolutionWindowGraphData, transformToResolutionWindow } from \"./ResolutionWindow\";\n\nexport interface DataRequestSource {\n    endPoint: string;\n    sourcePath: string;\n}\n\nexport enum DataRequestType {\n    Arbitrator,\n    Api\n}\nexport interface DataRequestListItem {\n    id: string;\n    date: Date;\n    requestor: string;\n    finalized_outcome?: Outcome;\n    type: DataRequestType;\n}\n\nexport interface DataRequestViewModel extends DataRequestListItem {\n    description?: string;\n    config: OracleConfig;\n    sources: DataRequestSource[];\n    outcomes?: string[];\n    resolutionWindows: ResolutionWindow[];\n    claimInfo?: ClaimViewModel;\n    totalStaked: string;\n    fee: string;\n    finalized_outcome?: Outcome;\n    targetContract: string;\n    finalArbitratorTriggered: boolean;\n    settlementTime: Date;\n    tags: string[];\n    number_multiplier?: string;\n    data_type: 'String' | 'Number';\n}\n\nexport interface DataRequestGraphData {\n    id: string;\n    fee: string;\n    claim: ClaimGraphData | null;\n    block_height: string;\n    description: string | null;\n    settlement_time: string;\n    date: string;\n    final_arbitrator_triggered: boolean;\n    global_config_id: string;\n    initial_challenge_period: string;\n    outcomes: string[];\n    requestor: string;\n    target_contract: string;\n    finalized_outcome: string | null;\n    tags: string[] | null;\n    data_type: string;\n    whitelist_item: {\n        active: boolean;\n        code_base_url: string;\n        custom_fee: string;\n        interface_name: string;\n    },\n    sources: {\n        end_point: string;\n        source_path: string;\n    }[];\n    config: OracleConfigGraphData;\n    resolution_windows: ResolutionWindowGraphData[];\n}\n\ninterface NumberDataType {\n    Number: string;\n}\n\nexport function transformToDataRequestListItem(data: DataRequestGraphData): DataRequestListItem {\n    return {\n        id: data.id,\n        date: new Date(Number(data.date)),\n        requestor: data.requestor,\n        finalized_outcome: data.finalized_outcome ? transformToOutcome(data.finalized_outcome) : undefined,\n        type: data.sources.length ? DataRequestType.Api : DataRequestType.Arbitrator,\n    };\n}\n\nexport function transformToDataRequestViewModel(data: DataRequestGraphData): DataRequestViewModel {\n    const resolutionWindows = data.resolution_windows.map(rw => transformToResolutionWindow(rw));\n    const totalStaked = resolutionWindows.reduce((prev, curr) => prev.add(curr.totalStaked), new Big(0));\n    const parsedDataType = parseJson<NumberDataType>(data.data_type);\n\n    return {\n        ...transformToDataRequestListItem(data),\n        claimInfo: data.claim ? transformToClaimViewModel(data.claim) : undefined,\n        config: transformToOracleConfig(data.config),\n        settlementTime: new Date(nsToMs(Number(data.settlement_time))),\n        resolutionWindows,\n        description: data.description ?? undefined,\n        sources: data.sources.map((s) => ({\n            endPoint: s.end_point,\n            sourcePath: s.source_path,\n        })),\n        fee: data.fee ?? '0',\n        outcomes: data.outcomes,\n        totalStaked: totalStaked.toString(),\n        finalized_outcome: data.finalized_outcome ? transformToOutcome(data.finalized_outcome) : undefined,\n        targetContract: data.target_contract,\n        finalArbitratorTriggered: data.final_arbitrator_triggered,\n        tags: data.tags ?? [],\n        data_type: parsedDataType ? \"Number\" : \"String\",\n        number_multiplier: parsedDataType ? parsedDataType.Number : undefined,\n    };\n}\n\nexport function canDataRequestBeFinalized(dataRequest: DataRequestViewModel): boolean {\n    // Already finalized\n    if (dataRequest.finalized_outcome) {\n        return false;\n    }\n\n    const currentResolutionWindow = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1];\n    if (!currentResolutionWindow) return false;\n\n\n    const now = new Date().getTime();\n\n    // Latest resolution window must end\n    if (currentResolutionWindow.endTime.getTime() >= now) {\n        return false;\n    }\n\n    if (!currentResolutionWindow.filled) {\n        // The window has not been filled\n        // If it's the first round we cannot finalize till it's completely filled\n        if (currentResolutionWindow.round === 0) {\n            return false;\n        }\n    }\n\n    // Window has been filled, end time is met and we are not the first round\n    // Meaning that the previous round was filled and ready to be finalized\n    return true;\n}\n\nexport function getDataRequestTypeTranslation(type: DataRequestType) {\n    if (type === DataRequestType.Arbitrator) {\n        return trans('dataRequest.type.arbitrator');\n    }\n\n    return trans('dataRequest.type.api');\n}\n","import format from \"date-fns/format\";\n\nexport function prettyFormatDate(date: Date): string {\n    return format(date, 'MMMM d, yyyy HH:mm:ss');\n}\n\n/**\n * converts nano seconds to milliseconds\n *\n * @export\n * @param {number} nanoSeconds\n * @return {number}\n */\nexport function nsToMs(nanoSeconds: number): number {\n    return nanoSeconds / 1000000;\n}\n\n/**\n * Formats a time number to a human readable format\n *\n * @export\n * @param {number} number\n * @param {('sec' | 'ms')} unit\n */\nexport function formatTimeToReadable(number: number, unit: 'sec' | 'ms' | 'ns') {\n    let s = 0;\n\n    if (unit === 'sec') {\n        s = number\n    } else if (unit === 'ns') {\n        s = Math.floor(number / 1000000000);\n    } else {\n        s = Math.floor(number / 1000)\n    }\n\n    let m = Math.floor(s / 60)\n    s = s % 60\n    let h = Math.floor(m / 60)\n    m = m % 60\n    const d = Math.floor(h / 24)\n    h = h % 24\n\n    return { days: d, hours: h, minutes: m, seconds: s }\n}\n","/**\n * Safely parse json without throwing any errors\n *\n * @export\n * @param {string} str\n * @return {(object | null)}\n */\nexport function parseJson<T>(str: string): T | null {\n    try {\n        return JSON.parse(str);\n    } catch (e) {\n        return null;\n    }\n}\n","export interface ClaimGraphData {\n    payout: string;\n    user_correct_stake: string;\n    total_incorrect_staked: string;\n    total_correct_bonded_staked: string;\n}\n\nexport interface ClaimViewModel {\n    payout: string;\n    userCorrectStake: string;\n}\n\nexport function transformToClaimViewModel(data: ClaimGraphData): ClaimViewModel {\n    return {\n        payout: data.payout,\n        userCorrectStake: data.user_correct_stake,\n    };\n}\n","export interface OracleConfig {\n    blockHeight: string;\n    bondToken: string;\n    date: Date;\n    defaultChallengeWindowDuration: string;\n    finalArbitrator: string;\n    finalArbitratorInvokeAmount: string;\n    gov: string;\n    id: string;\n    maxOutcomes: number;\n    minInitialChallengeWindowDuration: string;\n    resolutionFeePercentage: number;\n    stakeToken: string;\n    validityBond: string;\n}\n\nexport interface OracleConfigGraphData {\n    block_height: string;\n    bond_token: string;\n    date: string;\n    default_challenge_window_duration: string;\n    final_arbitrator: string;\n    final_arbitrator_invoke_amount: string;\n    gov: string;\n    id: string;\n    max_outcomes: number;\n    min_initial_challenge_window_duration: string;\n    resolution_fee_percentage: number;\n    stake_token: string;\n    validity_bond: string;\n}\n\nexport function transformToOracleConfig(data: OracleConfigGraphData): OracleConfig {\n    return {\n        blockHeight: data.block_height,\n        bondToken: data.bond_token,\n        date: new Date(Number(data.date)),\n        defaultChallengeWindowDuration: data.default_challenge_window_duration,\n        finalArbitrator: data.final_arbitrator,\n        finalArbitratorInvokeAmount: data.final_arbitrator_invoke_amount,\n        gov: data.gov,\n        id: data.id,\n        maxOutcomes: data.max_outcomes,\n        minInitialChallengeWindowDuration: data.min_initial_challenge_window_duration,\n        resolutionFeePercentage: data.resolution_fee_percentage,\n        stakeToken: data.stake_token,\n        validityBond: data.validity_bond,\n    };\n}\n","import { transformToOutcome } from \"./DataRequestOutcome\";\nimport { OutcomeStake } from \"./OutcomeStake\";\n\nexport interface UserStakes {\n    [accountId: string]: OutcomeStake[];\n}\n\nexport interface UserStakeGraphData {\n    account_id: string;\n    data_request_id: string;\n    id: string;\n    outcome: string;\n    round: number;\n    total_stake: string;\n    data_request?: {\n        finalized_outcome: string | null;\n    }\n    claim?: {\n        payout: string;\n    }\n}\n\nexport function transformToUserStakes(userStakes: UserStakeGraphData[]) {\n    const result: UserStakes = {};\n\n    userStakes.forEach((userStake) => {\n        const currentOutcomeStakes = result[userStake.account_id] ?? [];\n\n        currentOutcomeStakes.push({\n            outcome: transformToOutcome(userStake.outcome),\n            stake: userStake.total_stake,\n            round: userStake.round,\n            dataRequestId: userStake.data_request_id,\n            accountId: userStake.account_id,\n            finalizedOutcome: userStake.data_request?.finalized_outcome ? transformToOutcome(userStake.data_request.finalized_outcome) : undefined,\n            claimPayout: userStake.claim?.payout,\n        });\n\n        result[userStake.account_id] = currentOutcomeStakes;\n    });\n\n    return result;\n}\n","import Big from \"big.js\";\nimport { Outcome, transformToOutcome } from \"./DataRequestOutcome\";\nimport { OutcomeStake } from \"./OutcomeStake\";\nimport { transformToUserStakes, UserStakeGraphData, UserStakes } from \"./UserStakes\";\n\n\nexport interface ResolutionWindow {\n    round: number;\n    bondedOutcome?: Outcome;\n    outcomeStakes: OutcomeStake[];\n    endTime: Date;\n    bondSize: string;\n    totalStaked: string;\n    filled: boolean;\n    userStakes: UserStakes;\n    winningOutcomeStake?: OutcomeStake;\n}\n\nexport interface ResolutionWindowGraphData {\n    block_height: string;\n    bond_size: string;\n    date: string;\n    dr_id: string;\n    end_time: string;\n    id: string;\n    round: number;\n    bonded_outcome: null | string;\n    outcome_stakes: {\n        data_request_id: string;\n        id: string;\n        round: number;\n        total_stake: string;\n        outcome: string;\n    }[];\n    user_stakes: UserStakeGraphData[];\n}\n\nexport function transformToResolutionWindow(data: ResolutionWindowGraphData): ResolutionWindow {\n    let totalStaked = new Big(0);\n    let highestOutcomeStake: OutcomeStake | undefined;\n\n    const outcomeStakes: OutcomeStake[] = data.outcome_stakes.map((os) => {\n        totalStaked = totalStaked.add(os.total_stake);\n\n        const outcomeStake: OutcomeStake = {\n            outcome: transformToOutcome(os.outcome),\n            stake: os.total_stake,\n            dataRequestId: os.data_request_id,\n            round: os.round,\n        };\n\n        // Find the highest stake\n        if (highestOutcomeStake) {\n            const highestStake = new Big(highestOutcomeStake.stake);\n\n            if (highestStake.lt(outcomeStake.stake)) {\n                highestOutcomeStake = outcomeStake;\n            }\n        } else {\n            highestOutcomeStake = outcomeStake;\n        }\n\n        return outcomeStake;\n    });\n\n    return {\n        bondSize: data.bond_size,\n        endTime: new Date(Number(data.end_time) / 1000000),\n        outcomeStakes,\n        filled: highestOutcomeStake?.stake ? new Big(highestOutcomeStake.stake).eq(data.bond_size) : false,\n        totalStaked: totalStaked.toString(),\n        round: data.round,\n        userStakes: transformToUserStakes(data.user_stakes),\n        bondedOutcome: data.bonded_outcome ? transformToOutcome(data.bonded_outcome) : undefined,\n        winningOutcomeStake: highestOutcomeStake,\n    };\n}\n","import Big from 'big.js';\n\nexport const API_URL = process.env.REACT_APP_API_URL ?? '';\nexport const COINGECKO_API_URL = process.env.REACT_APP_COINGECKO_API_URL || '';\nexport const DEFAULT_PAGINATION_LIMIT = 10;\nexport const COINGECKO_TOKEN_TICKER = 'near';\n\nexport const NEAR_NETWORK = process.env.REACT_APP_NEAR_NETWORK as any ?? 'testnet';\nexport const NEAR_NULL_CONTRACT = process.env.REACT_APP_NEAR_NULL_CONTRACT ?? 'null_address.near';\nexport const NEAR_FLUX_TOKEN_ID = process.env.REACT_APP_NEAR_FLUX_TOKEN_ID ?? '';\nexport const NEAR_ORACLE_CONTRACT_ID = process.env.REACT_APP_NEAR_ORACLE_CONTRACT_ID ?? 'oracle.flux-dev'\nexport const NEAR_MAX_GAS = '200000000000000';\nexport const STORAGE_BASE = '30000000000000000000000';\nexport const HOME_REFRESH_INTERVAL = 2000;\nexport const REQUEST_DETAIL_REFRESH_INTERVAL = 5000;\nexport const REQUEST_LIST_REFRESH_INTERVAL = 5000;\n\nBig.PE = 1000000;\n","import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { API_URL } from '../config';\n\nconst cache = new InMemoryCache();\nconst link = createHttpLink({\n    uri: API_URL,\n});\n\nexport const graphqlClient = new ApolloClient({\n    cache,\n    link,\n\n    defaultOptions: {\n        watchQuery: {\n            fetchPolicy: 'cache-and-network',\n        }\n    }\n});\n","import gql from \"graphql-tag\";\nimport { DataRequestGraphData, DataRequestListItem, transformToDataRequestListItem, transformToDataRequestViewModel } from \"../models/DataRequest\";\nimport { Pagination } from \"../models/Pagination\";\nimport { graphqlClient } from \"./GraphQLService\";\nexport interface DataRequestFilters {\n    onlyArbitratorRequests: boolean;\n    requestor?: string;\n}\n\ninterface DataRequestPagination {\n    limit: number;\n    offset: number;\n}\n\nexport async function getAllDataRequests({\n    limit,\n    offset,\n}: DataRequestPagination, {\n    onlyArbitratorRequests,\n    requestor,\n}: DataRequestFilters): Promise<Pagination<DataRequestListItem>> {\n    try {\n        const response = await graphqlClient.query({\n            fetchPolicy: 'network-only',\n            query: gql`\n                query GetAllDataRequests($limit: Int, $offset: Int, $onlyArbitratorRequests: Boolean, $requestor: String) {\n                    dataRequests: getDataRequests(limit: $limit, offset: $offset, onlyArbitratorRequests: $onlyArbitratorRequests, requestor: $requestor) {\n                        total\n                        items {\n                            id\n                            date\n                            requestor\n                            finalized_outcome\n                            sources {\n                                end_point\n                                source_path\n                            }\n                        }\n                    }\n                }\n            `,\n            variables: {\n                limit,\n                offset,\n                onlyArbitratorRequests,\n                requestor,\n            }\n        });\n\n        const paginatedDataRequests: DataRequestListItem[] = response.data.dataRequests.items.map((dr: DataRequestGraphData) => transformToDataRequestListItem(dr));\n\n        return {\n            total: response.data.dataRequests.total,\n            items: paginatedDataRequests,\n        };\n    } catch (error) {\n        console.error('[getAllDataRequests]', error);\n\n        return {\n            total: 0,\n            items: [],\n        };\n    }\n}\n\nexport async function getDataRequestById(id: string, accountId?: string) {\n    try {\n        const response = await graphqlClient.query({\n            fetchPolicy: 'network-only',\n            query: gql`\n                query GetDataRequest($id: String!, $accountId: String) {\n                    dataRequest: getDataRequest(id: $id) {\n                        block_height\n                        date\n                        final_arbitrator_triggered\n                        global_config_id\n                        id\n                        claim(accountId: $accountId) {\n                            payout\n                            user_correct_stake\n                        }\n                        initial_challenge_period\n                        outcomes\n                        requestor\n                        target_contract\n                        finalized_outcome\n                        description\n                        settlement_time\n                        tags\n                        data_type\n                        fee\n                        whitelist_item {\n                            active\n                            code_base_url\n                            contract_entry\n                            custom_fee\n                            interface_name\n                        }\n                        sources {\n                            end_point\n                            source_path\n                        }\n                        config {\n                            block_height\n                            bond_token\n                            date\n                            default_challenge_window_duration\n                            final_arbitrator\n                            final_arbitrator_invoke_amount\n                            gov\n                            id\n                            max_outcomes\n                            min_initial_challenge_window_duration\n                            resolution_fee_percentage\n                            stake_token\n                            validity_bond\n                        }\n                        resolution_windows {\n                            block_height\n                            bond_size\n                            bonded_outcome\n                            date\n                            dr_id\n                            end_time\n                            id\n                            outcome_stakes {\n                                data_request_id\n                                id\n                                round\n                                total_stake\n                                outcome\n                            }\n                            round\n                            user_stakes {\n                                account_id\n                                data_request_id\n                                id\n                                outcome\n                                round\n                                total_stake\n                            }\n                        }\n                    }\n                }\n            `,\n            variables: {\n                id,\n                accountId,\n            }\n        });\n\n        return transformToDataRequestViewModel(response.data.dataRequest);\n    } catch(error) {\n        console.error('[getDataRequestById]', error);\n        return null;\n    }\n}\n\nexport async function doesDataRequestExists(id: string): Promise<boolean> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                query DataRequestExists($id: String!) {\n                    request: getDataRequest(id: $id) {\n                        id\n                    }\n                }\n            `,\n            variables: {\n                id,\n            }\n        });\n\n        if (!response.data.request || !response.data.request.id) {\n            return false;\n        }\n\n        return true;\n    } catch (error) {\n        console.error('[doesDataRequestExists]', error);\n        return false;\n    }\n}\n\n","import { Pagination } from \"../models/Pagination\";\nimport { routePaths } from \"../routes\";\nimport { doesDataRequestExists } from \"./DataRequestService\";\n\nexport interface SearchResult {\n    url: string;\n}\n\nexport async function search(query: string): Promise<Pagination<SearchResult>> {\n    try {\n        if (isNaN(Number(query))) {\n            return {\n                items: [{\n                    url: routePaths.account('near', query),\n                }],\n                total: 1,\n            };\n        }\n\n        const dataRequest = await doesDataRequestExists(query);\n\n        if (dataRequest) {\n            return {\n                items: [{\n                    url: routePaths.dataRequestDetail('near', query),\n                }],\n                total: 1,\n            };\n        }\n\n        return {\n            items: [],\n            total: 0,\n        };\n    } catch (error) {\n        return {\n            items: [],\n            total: 0,\n        };\n    }\n}\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router';\nimport SearchForm from '../../containers/SearchForm';\nimport { routePaths } from '../../routes';\nimport { search } from '../../services/SearchService';\n\ninterface Props {\n    className?: string;\n    inputClassName?: string;\n}\n\nexport default function SearchConnector({\n    className,\n    inputClassName,\n}: Props) {\n    const history = useHistory();\n    const handleSearch = useCallback(async (query) => {\n        const result = await search(query);\n\n        if (result.total === 0) {\n            history.push(routePaths.search(query));\n            return;\n        }\n\n        history.push(result.items[0].url);\n    }, [history]);\n\n    return (\n        <SearchForm\n            onSearch={handleSearch}\n            className={className}\n            inputClassName={inputClassName}\n        />\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\nimport { default as MuiButton } from '@material-ui/core/Button';\n\nimport s from './Button.module.scss';\n\ninterface Props {\n    className?: string;\n    disabled?: boolean;\n    onClick?: () => void;\n}\n\nexport default function Button({\n    children,\n    className,\n    disabled = false,\n    onClick = () => {},\n}: PropsWithChildren<Props>) {\n    return (\n        <MuiButton\n            className={classnames(className, s.button)}\n            variant=\"contained\"\n            onClick={onClick}\n            disabled={disabled}\n        >\n            {children}\n        </MuiButton>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\nimport { default as MuiDialog } from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport Button from '../../components/Button';\n\nimport s from './Dialog.module.scss';\nimport trans from '../../translation/trans';\n\ninterface Props {\n    title: string;\n    open: boolean;\n    isInfoDialog?: boolean;\n    onRequestClose: () => void;\n    onSubmitClick?: () => void;\n    canSubmit?: boolean;\n    hideButtons?: boolean;\n    paperClassName?: string;\n}\n\nexport default function Dialog({\n    title,\n    children,\n    open,\n    isInfoDialog = false,\n    onRequestClose,\n    onSubmitClick = () => {},\n    canSubmit = true,\n    hideButtons = false,\n    paperClassName = '',\n}: PropsWithChildren<Props>) {\n    return (\n        <MuiDialog open={open} classes={{ paper: classnames(s.paper, paperClassName) }}>\n            <DialogTitle className={s.title}>\n                {title}\n            </DialogTitle>\n            <DialogContent className={s.content}>\n                {children}\n            </DialogContent>\n            {isInfoDialog && (\n                <DialogActions>\n                    <Button className={s.cancelButton} onClick={onRequestClose}>\n                        {trans('global.action.close')}\n                    </Button>\n                </DialogActions>\n            )}\n\n            {!hideButtons && (\n                <DialogActions>\n                    <Button className={s.cancelButton} onClick={onRequestClose}>\n                        {trans('global.action.cancel')}\n                    </Button>\n                    <Button disabled={!canSubmit} className={s.confirmButton} onClick={onSubmitClick}>\n                        {trans('global.action.submit')}\n                    </Button>\n                </DialogActions>\n            )}\n        </MuiDialog>\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport TextField from '@material-ui/core/TextField';\n\nimport s from './Input.module.scss';\n\nexport interface InputProps {\n    label?: string;\n    className?: string;\n    type?: 'text' | 'number';\n    onChange?: (value: string) => void;\n    value?: string;\n    error?: string;\n    endAdornment?: any;\n}\n\nexport default function Input({\n    className,\n    label,\n    type,\n    onChange = () => {},\n    value,\n    error,\n    endAdornment,\n}: InputProps) {\n    return (\n        <TextField\n            label={label}\n            className={classnames(className, s.input)}\n            type={type}\n            onChange={(event) => onChange(event.currentTarget.value)}\n            value={value}\n            error={!!error}\n            helperText={error}\n            InputProps={{\n                endAdornment,\n            }}\n        />\n    );\n}\n","import React from 'react';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport Input, { InputProps } from '../../components/Input/Input';\nimport trans from '../../translation/trans';\n\ninterface Props extends InputProps {\n    showMax?: boolean;\n    onMaxClick?: () => void,\n}\n\nexport default function NumberInput({\n    showMax = false,\n    onMaxClick = () => {},\n    ...props\n}: Props) {\n    return (\n        <Input\n            {...props}\n            type=\"number\"\n            endAdornment={\n                <>\n                    {showMax && (\n                        <InputAdornment position=\"end\">\n                            <Button onClick={onMaxClick}>\n                                {trans('global.max')}\n                            </Button>\n                        </InputAdornment>\n                    )}\n                </>\n            }\n        />\n    );\n}\n","import React, { useCallback, useState } from 'react';\nimport Dialog from '../../compositions/Dialog';\nimport { Account } from '../../models/Account';\nimport trans from '../../translation/trans';\nimport createDefaultStorageManagerFormValues, { StorageManagerFormValues } from './services/createDefaultStorageManagerFormValues';\nimport validateStorageManagerFormValues from './services/validateStorageManagerFormValues';\nimport { formatToken, toToken } from '../../utils/tokenUtils';\n\nimport s from './StorageManagerDialog.module.scss';\nimport NumberInput from '../../compositions/NumberInput';\nimport { AppConfig } from '../../models/AppConfig';\nimport Big from 'big.js';\n\ninterface Props {\n    open: boolean;\n    account: Account;\n    appConfig: AppConfig;\n    onRequestClose: () => void;\n    onSubmit: (formValues: StorageManagerFormValues) => void;\n}\n\nexport default function StorageManagerDialog({\n    open,\n    account,\n    appConfig,\n    onRequestClose,\n    onSubmit,\n}: Props) {\n    const [formValues, setFormValues] = useState(createDefaultStorageManagerFormValues());\n\n    const errors = validateStorageManagerFormValues(formValues, account);\n\n    function handleAmountChange(amount: string) {\n        if (amount && new Big(amount).lt(0)) {\n            return;\n        }\n\n        setFormValues({\n            amount: amount ? toToken(amount, appConfig.nativeTokenDecimals) : '0',\n            amountFormatted: amount ? amount : '',\n        });\n    }\n\n    const handleMaxClick = useCallback(() => {\n        setFormValues({\n            amount: account.storageAvailable,\n            amountFormatted: formatToken(account.storageAvailable, appConfig.nativeTokenDecimals, 4),\n        });\n    }, [account, appConfig]);\n\n    return (\n        <Dialog\n           open={open}\n           onRequestClose={onRequestClose}\n           title={trans('storageManagerDialog.title')}\n           onSubmitClick={() => onSubmit(formValues)}\n           canSubmit={errors.canSubmit}\n        >\n            <form>\n                <p>\n                    {trans('storageManagerDialog.description', { nativeToken: appConfig.nativeTokenSymbol })}\n                </p>\n                <p>\n                    {trans('storageManagerDialog.label.amountAvailable', {\n                        amount: formatToken(account.storageAvailable, appConfig.nativeTokenDecimals, 4),\n                        nativeToken: appConfig.nativeTokenSymbol,\n                    })}\n                </p>\n                <div className={s.formItem}>\n                    <NumberInput\n                        label={trans('storageManagerDialog.label.withdrawAmount', { nativeToken: appConfig.nativeTokenSymbol })}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleAmountChange}\n                        type=\"number\"\n                        error={errors.amount}\n                        showMax\n                        onMaxClick={handleMaxClick}\n                    />\n                </div>\n            </form>\n        </Dialog>\n    );\n}\n","export interface StorageManagerFormValues {\n    amountFormatted: string;\n    amount: string;\n}\n\nexport default function createDefaultStorageManagerFormValues(): StorageManagerFormValues {\n    return {\n        amount: '0',\n        amountFormatted: '0',\n    }\n}\n","import Big from \"big.js\";\nimport { Account } from \"../../../models/Account\";\nimport trans from \"../../../translation/trans\";\nimport { StorageManagerFormValues } from \"./createDefaultStorageManagerFormValues\";\n\ninterface StorageManagerErrors {\n    amount: string;\n    canSubmit: boolean;\n}\n\nexport default function validateStorageManagerFormValues(formValues: StorageManagerFormValues, account: Account): StorageManagerErrors {\n    const errors: StorageManagerErrors = {\n        amount: '',\n        canSubmit: true,\n    }\n\n    if (formValues.amount) {\n        const amountToWithdraw = new Big(formValues.amount);\n\n        if (amountToWithdraw.gt(account.storageAvailable)) {\n            errors.amount = trans('storageManagerDialog.errors.withdrawAmount.notEnoughToWithdraw');\n            errors.canSubmit = false;\n        }\n\n        if (amountToWithdraw.lte(0)) {\n            errors.canSubmit = false;\n        }\n    }\n\n    return errors;\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { DataRequestViewModel } from '../../models/DataRequest';\n\nexport type DialogsState = Readonly<{\n    stakeDialog: {\n        open: boolean;\n        dataRequest?: DataRequestViewModel;\n    },\n    unstakeDialog: {\n        open: boolean;\n        dataRequest?: DataRequestViewModel;\n    },\n    storageManager: {\n        open: boolean;\n    }\n}>;\n\nconst initialState: DialogsState = {\n    stakeDialog: {\n        open: false,\n    },\n    unstakeDialog: {\n        open: false,\n    },\n    storageManager: {\n        open: false,\n    }\n};\n\nconst dialogsSlice = createSlice({\n    initialState,\n    name: 'dialogs',\n    reducers: {\n        setStakeDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['stakeDialog']>): DialogsState {\n            return ({\n                ...state,\n                stakeDialog: action.payload,\n            });\n        },\n\n        setUnstakeDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['unstakeDialog']>): DialogsState {\n            return ({\n                ...state,\n                unstakeDialog: action.payload,\n            });\n        },\n\n        setStorageManagerDialogOpen(state: DialogsState, action: PayloadAction<DialogsState['storageManager']>): DialogsState {\n            return {\n                ...state,\n                storageManager: action.payload,\n            };\n        }\n    },\n});\n\nexport const {\n    setStakeDialogOpen,\n    setUnstakeDialogOpen,\n    setStorageManagerDialogOpen,\n} = dialogsSlice.actions;\n\nexport default dialogsSlice.reducer;\n","import { WalletConnection, utils, transactions } from \"near-api-js\";\nimport BN from 'bn.js';\nimport { NEAR_FLUX_TOKEN_ID } from \"../../../config\";\nimport { OutcomeType } from \"../../../models/DataRequestOutcome\";\nimport { DataRequestViewModel } from \"../../../models/DataRequest\";\nimport Big from \"big.js\";\n\nexport interface TransactionViewOptions {\n    methodName: string;\n    args?: object;\n}\n\nexport interface TransactionCallOptions extends TransactionViewOptions {\n    gas: string;\n    amount: string;\n}\n\nexport interface TransactionOption {\n    receiverId: string;\n    transactionOptions: TransactionCallOptions[];\n}\n\nexport async function batchSendTransactions(walletConnection: WalletConnection, txs: TransactionOption[], callbackUrl?: string) {\n    const accountId = walletConnection.getAccountId();\n    const localKey = await walletConnection._near.connection.signer.getPublicKey(accountId, walletConnection._near.connection.networkId);\n    const block = await walletConnection._near.connection.provider.block({ finality: 'final' });\n    const blockHash = utils.serialize.base_decode(block.header.hash);\n\n    const resultTxs = await Promise.all(txs.map(async ({ receiverId, transactionOptions }, index) => {\n        const actions = transactionOptions.map(tx => transactions.functionCall(tx.methodName, tx.args ?? {}, new BN(tx.gas), new BN(tx.amount)));\n        const accessKey = await walletConnection.account().accessKeyForTransaction(receiverId, actions, localKey);\n\n        if (!accessKey) {\n            throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);\n        }\n\n        const publicKey = utils.PublicKey.from(accessKey.public_key);\n        const nonce = accessKey.access_key.nonce + index + 1;\n\n        return transactions.createTransaction(accountId, publicKey, receiverId, nonce, actions, blockHash);\n    }));\n\n    return walletConnection.requestSignTransactions(resultTxs, callbackUrl);\n}\n\nexport async function getTokenBalance(walletConnection: WalletConnection, accountId: string): Promise<string> {\n    const account = walletConnection.account();\n    return account.viewFunction(NEAR_FLUX_TOKEN_ID, 'ft_balance_of', {\n        account_id: accountId,\n    });\n}\n\nexport function createNearOutcome(dataRequest: DataRequestViewModel, type: OutcomeType, answer: string): any {\n    if (type === OutcomeType.Invalid) {\n        return 'Invalid';\n    }\n\n    if (dataRequest.data_type === 'String') {\n        return {\n            'Answer': {\n                'String': answer,\n            }\n        }\n    }\n\n    let number = new Big(answer);\n    const isNegative = number.lt(0);\n\n    number = number.mul(dataRequest.number_multiplier!);\n\n    // Convert back to positive to store inside a u128\n    if (isNegative) {\n        number = number.mul(-1);\n    }\n\n    return {\n        'Answer': {\n            'Number': {\n                value: number.toFixed(0),\n                negative: isNegative,\n                multiplier: dataRequest.number_multiplier,\n            }\n        }\n    }\n}\n","import { connect, Near, WalletConnection, keyStores } from \"near-api-js\";\nimport { NEAR_NETWORK, NEAR_NULL_CONTRACT } from \"../../../config\";\n\nexport interface ConnectConfig {\n    accountId?: string;\n    nearInstance?: Near;\n    walletInstance?: WalletConnection;\n    customNodeUrl?: string;\n    customWalletUrl?: string;\n}\n\nexport interface NetworkConfig {\n    networkId: string,\n    nodeUrl: string,\n    contractName?: null,\n    walletUrl?: string,\n    initialBalance?: string\n}\n\nexport function createNetworkConfig(connectConfig: ConnectConfig): NetworkConfig {\n    if (NEAR_NETWORK === 'mainnet') {\n        return {\n            networkId: 'mainnet',\n            nodeUrl: 'https://rpc.mainnet.near.org',\n            walletUrl: 'https://wallet.near.org',\n        };\n    }\n\n    return {\n        networkId: 'testnet',\n        nodeUrl: connectConfig.customNodeUrl || 'https://rpc.testnet.near.org',\n        contractName: null,\n        walletUrl: connectConfig.customWalletUrl || 'https://wallet.testnet.near.org',\n        initialBalance: '100000000',\n    };\n}\n\nlet connectedNear: Near | undefined = undefined;\n\n/**\n * Connects with NEAR\n *\n * @export\n * @param {ConnectConfig} connectConfig\n * @param {SdkConfig} sdkConfig\n * @return {Promise<Near>}\n */\nexport async function connectNear(connectConfig: ConnectConfig): Promise<Near> {\n    if (connectConfig.nearInstance) {\n        return connectConfig.nearInstance;\n    }\n\n    if (connectedNear) {\n        return connectedNear;\n    }\n\n    const networkConfig = createNetworkConfig(connectConfig);\n\n    connectedNear = await connect({\n        ...networkConfig,\n        deps: {\n            keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n        },\n    });\n\n    return connectedNear;\n}\n\nlet walletConnection: WalletConnection | undefined = undefined;\n\nexport async function connectWallet() {\n    if (walletConnection) {\n        return walletConnection;\n    }\n\n    const near = await connectNear({});\n    walletConnection = new WalletConnection(near, NEAR_NULL_CONTRACT);\n\n    return walletConnection;\n}\n","const cacheStorage = new Map<string, any>();\nconst creationPromises = new Map<string, Promise<any>>();\n\n/**\n * Caches an item by it's id and returns it if it's requested again.\n * If it does not exist it asks you to create the item\n *\n * @export\n * @template T\n * @param {string} id\n * @param {() => Promise<T>} createCallback\n * @return {Promise<T>}\n */\nexport default async function cache<T>(id: string, createCallback: () => Promise<T>, ttl?: number): Promise<T> {\n    const item = cacheStorage.get(id);\n    if (item) return item;\n\n    // No need to create another item when the request is already going\n    // Instead we just redirect the promise back to this call\n    // Caching will be handled by the iniator\n    const onGoingRequest = creationPromises.get(id);\n    if (onGoingRequest) return onGoingRequest;\n\n    // Keep track of all ongoing promises\n    const createRequest = createCallback();\n    creationPromises.set(id, createRequest);\n\n    try {\n        const createdItem = await createRequest;\n        cacheStorage.set(id, createdItem);\n\n        if (ttl) {\n            setTimeout(() => {\n                cacheStorage.delete(id);\n            }, ttl);\n        }\n\n        return createdItem;\n    } catch (error) {\n        throw error;\n    } finally {\n        creationPromises.delete(id);\n    }\n}\n","import Big from \"big.js\";\nimport { WalletConnection } from \"near-api-js\";\nimport { NEAR_MAX_GAS } from \"../../../config\";\nimport cache from \"../../../utils/cache\";\nimport { TransactionOption } from \"./NearService\";\n\n/**\n * Gets the minimum amount storage required for a oracle transaction\n *\n * @export\n * @param {WalletConnection} walletConnection\n * @return {Promise<Big>}\n */\nexport async function getMinimumStorage(contractId: string, walletConnection: WalletConnection): Promise<Big> {\n    try {\n        const result = await cache(`${contractId}_minimum_storage_balance`, async () => {\n            const account = walletConnection.account();\n            const minimumBalance = await account.viewFunction(contractId, 'storage_balance_bounds', {});\n            return Big(minimumBalance.min);\n        });\n\n        return result;\n    } catch (error) {\n        console.error('[getMinimumStorage]', error);\n        return new Big(0);\n    }\n}\n\n/**\n * Get the current storage balance of the specific account\n *\n * @export\n * @param {WalletConnection} walletConnection\n * @return {Promise<{ total: Big, available: Big }>}\n */\nexport async function getStorageBalance(contractId: string, accountId: string, walletConnection: WalletConnection): Promise<{ total: Big, available: Big }> {\n    try {\n        const account = walletConnection.account();\n        const storage = await account.viewFunction(contractId, 'storage_balance_of', {\n            account_id: accountId,\n        });\n\n        return {\n            total: storage ? new Big(storage.total) : new Big(0),\n            available: storage ? new Big(storage.available) : new Big(0),\n        };\n    } catch (error) {\n        console.error('[getStorageBalance]', error);\n        return {\n            total: new Big(0),\n            available: new Big(0),\n        };\n    }\n}\n\n/**\n * Creates a storage deposit transaction if it's required\n *\n * @export\n * @param {string} contractId\n * @param {string} accountId\n * @param {WalletConnection} walletConnection\n * @param {Big} extraStorage Can be used for calls that require way more than the minimum storage requirements\n * @return {(Promise<TransactionOption | null>)}\n */\nexport async function createStorageTransaction(contractId: string, accountId: string, walletConnection: WalletConnection, extraStorage: Big = new Big(0)): Promise<TransactionOption | null> {\n    const minimumStorageRequired = await getMinimumStorage(contractId, walletConnection);\n    const storageBalance = await getStorageBalance(contractId, accountId, walletConnection);\n    const storageRequired = minimumStorageRequired.add(extraStorage);\n\n    if (storageBalance.available.lt(storageRequired)) {\n        return {\n            receiverId: contractId,\n            transactionOptions: [{\n                amount: storageRequired.sub(storageBalance.available).toString(),\n                gas: NEAR_MAX_GAS,\n                methodName: 'storage_deposit',\n                args: {\n                    accountId,\n                }\n            }],\n        };\n    }\n\n    return null;\n}\n","import { Account } from \"../../models/Account\";\nimport { AppConfig } from \"../../models/AppConfig\";\nimport { DataRequestViewModel } from \"../../models/DataRequest\";\nimport { Outcome } from \"../../models/DataRequestOutcome\";\nimport { IProvider } from \"./IProvider\";\nimport NearProvider from \"./near/NearProvider\";\n\nlet providers: IProvider[] = [];\nlet providerInitPromise: Promise<boolean[]>;\n\nexport async function initProviders() {\n    if (providerInitPromise) {\n        await providerInitPromise;\n        return;\n    }\n\n    providers = [\n        new NearProvider(),\n    ];\n\n    providerInitPromise = Promise.all(providers.map(p => p.init()));\n    await providerInitPromise;\n}\n\nexport function getProviderById(id: string): IProvider | undefined {\n    return providers.find(p => p.id === id);\n}\n\nexport function getLoggedInProvider() {\n    return providers.find(p => p.isLoggedIn());\n}\n\nexport async function loginWithProvider(providerId: string) {\n    const provider = getProviderById(providerId);\n    return provider?.login() ?? false;\n}\n\nexport async function logoutWithProvider(providerId: string) {\n    const provider = getProviderById(providerId);\n    return provider?.logout() ?? false;\n}\n\nexport async function getLoggedInAccountId(): Promise<string | undefined> {\n    const provider = getLoggedInProvider();\n    return provider ? provider.getLoggedInAccountId() : undefined;\n}\n\nexport async function getAccountInfoWithProvider(providerId: string, accountId: string): Promise<Account | undefined> {\n    const provider = getProviderById(providerId);\n    const account = await provider?.getAccountInfo(accountId);\n    if (!account || !provider) return undefined;\n\n    return {\n        accountId: account.accountId,\n        balance: account.balance,\n        providerId: provider.id,\n        storageAvailable: account.storageAvailable,\n        storageTotal: account.storageTotal,\n        storageUsed: account.storageUsed,\n    };\n}\n\nexport async function getLoggedInAccount(): Promise<Account | undefined> {\n    const provider = getLoggedInProvider();\n\n    if (!provider) {\n        return undefined;\n    }\n\n    const loggedInAccountId = await provider.getLoggedInAccountId();\n\n    if (!loggedInAccountId) {\n        return undefined;\n    }\n\n    return getAccountInfoWithProvider(provider.id, loggedInAccountId);\n}\n\nexport async function getAppConfigForProvider(providerId: string): Promise<AppConfig> {\n    const provider = getProviderById(providerId);\n\n    return {\n        nativeTokenDecimals: provider?.nativeTokenDecimals ?? 18,\n        nativeTokenSymbol: provider?.nativeTokenSymbol ?? '?',\n    };\n}\n\nexport async function stakeWithProvider(providerId: string, amount: string, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.stake(amount, dataRequest, outcome) ?? false;\n}\n\nexport async function finalizeWithProvider(providerId: string, dataRequest: DataRequestViewModel): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.finalize(dataRequest) ?? false;\n}\n\nexport async function claimWithProvider(providerId: string, accountId: string, dataRequest: DataRequestViewModel): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.claim(accountId, dataRequest) ?? false;\n}\n\nexport async function unstakeWithProvider(providerId: string, amount: string, round: number, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n    const provider = getProviderById(providerId);\n    return provider?.unstake(amount, round, dataRequest, outcome) ?? false;\n}\n\nexport async function getProviderStorageBalance(providerId: string, accountId: string): Promise<{ total: string, used: string, available: string }> {\n    const provider = getProviderById(providerId);\n    return provider?.getStorageBalance(accountId) ?? { total: '0', available: '0', used: '0' };\n}\n\nexport function withdrawStorage(providerId: string, amount: string) {\n    const provider = getProviderById(providerId);\n    provider?.withdrawStorage(amount);\n}\n","import { IProvider } from \"../IProvider\";\nimport { NEAR_FLUX_TOKEN_ID, NEAR_MAX_GAS, NEAR_NULL_CONTRACT, NEAR_ORACLE_CONTRACT_ID, STORAGE_BASE } from \"../../../config\";\nimport { Outcome, OutcomeType } from \"../../../models/DataRequestOutcome\";\nimport { DataRequestViewModel } from \"../../../models/DataRequest\";\nimport Big from \"big.js\";\nimport { batchSendTransactions, createNearOutcome, getTokenBalance, TransactionOption } from \"./NearService\";\nimport { connectWallet } from \"./NearConnectService\";\nimport { createStorageTransaction } from \"./StorageManagerService\";\nimport { Account } from \"../../../models/Account\";\nexport default class NearProvider implements IProvider {\n    id = 'near';\n    nativeTokenSymbol = 'NEAR';\n    nativeTokenDecimals = 24;\n\n    async init() {\n        return true;\n    }\n\n    async login() {\n        const wallet = await connectWallet();\n        wallet.requestSignIn(NEAR_NULL_CONTRACT, 'oracle');\n        return true;\n    }\n\n    async logout() {\n        const wallet = await connectWallet();\n        wallet.signOut();\n        return true;\n    }\n\n    async isLoggedIn() {\n        const wallet = await connectWallet();\n        return wallet.isSignedIn();\n    }\n\n    async getLoggedInAccountId(): Promise<string> {\n        const wallet = await connectWallet();\n        return wallet.getAccountId();\n    }\n\n    async getAccountInfo(accountId: string): Promise<Omit<Account, 'providerId'>> {\n        try {\n            const wallet = await connectWallet();\n            const balance = await getTokenBalance(wallet, accountId);\n            const storageInfo = await this.getStorageBalance(accountId);\n\n            return {\n                accountId,\n                balance,\n                storageAvailable: storageInfo.available,\n                storageTotal: storageInfo.total,\n                storageUsed: storageInfo.used,\n            };\n        } catch (error) {\n            return {\n                accountId,\n                balance: '0',\n                storageAvailable: '0',\n                storageTotal: '0',\n                storageUsed: '0',\n            }\n        }\n    }\n\n    async stake(amount: string, dataRequest: DataRequestViewModel, outcome: Outcome) {\n        const wallet = await connectWallet();\n\n        const stakeOutcome = outcome.type === OutcomeType.Invalid ? createNearOutcome(dataRequest, outcome.type, '') : createNearOutcome(dataRequest, outcome.type, outcome.answer);\n        const loggedInAccount = await this.getLoggedInAccountId();\n        const storageTransaction = await createStorageTransaction(NEAR_ORACLE_CONTRACT_ID, loggedInAccount, wallet);\n        const transactions: TransactionOption[] = [];\n\n        if (storageTransaction) {\n            transactions.push(storageTransaction);\n        }\n\n        transactions.push({\n            receiverId: NEAR_FLUX_TOKEN_ID,\n            transactionOptions: [{\n                amount: '1',\n                gas: NEAR_MAX_GAS,\n                methodName: 'ft_transfer_call',\n                args: {\n                    receiver_id: NEAR_ORACLE_CONTRACT_ID,\n                    amount,\n                    msg: JSON.stringify({\n                        'StakeDataRequest': {\n                            id: dataRequest.id,\n                            outcome: stakeOutcome,\n                        }\n                    })\n                }\n            }],\n        });\n\n        await batchSendTransactions(wallet, transactions);\n\n        return true;\n    }\n\n    async unstake(amount: string, round: number, dataRequest: DataRequestViewModel, outcome: Outcome): Promise<boolean> {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n        if (!account) return false;\n\n        const stakeOutcome = outcome.type === OutcomeType.Invalid ? createNearOutcome(dataRequest, outcome.type, '') : createNearOutcome(dataRequest, outcome.type, outcome.answer);\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'dr_unstake', {\n            request_id: dataRequest.id,\n            resolution_round: round,\n            outcome: stakeOutcome,\n            amount,\n\n            // @ts-ignore\n        }, NEAR_MAX_GAS, STORAGE_BASE);\n\n        return true;\n    }\n\n    async finalize(dataRequest: DataRequestViewModel) {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n        if (!account) return false;\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'dr_finalize', {\n            request_id: dataRequest.id,\n            // @ts-ignore\n        }, NEAR_MAX_GAS, STORAGE_BASE);\n\n        return true;\n    }\n\n    async claim(accountId: string, dataRequest: DataRequestViewModel) {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n        if (!account) return false;\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'dr_claim', {\n            request_id: dataRequest.id,\n            account_id: accountId,\n            // @ts-ignore\n        }, NEAR_MAX_GAS, STORAGE_BASE);\n\n        return true;\n    }\n\n    async getStorageBalance(accountId: string): Promise<{ total: string, available: string, used: string }> {\n        try {\n            const wallet = await connectWallet();\n            const account = wallet.account();\n            if (!account) {\n                return {\n                    total: '0',\n                    available: '0',\n                    used: '0',\n                };\n            }\n\n            const storageBalance = await account.viewFunction(NEAR_ORACLE_CONTRACT_ID, 'storage_balance_of', {\n                account_id: accountId,\n            });\n\n            const used = new Big(storageBalance.total).sub(storageBalance.available);\n\n            return {\n                total: storageBalance.total,\n                available: storageBalance.available,\n                used: used.toString(),\n            }\n        } catch (error) {\n            console.error('[getStorageBalance -> NEAR]', error);\n            return {\n                total: '0',\n                available: '0',\n                used: '0',\n            }\n        }\n    }\n\n    async withdrawStorage(amount: string): Promise<boolean> {\n        const wallet = await connectWallet();\n        const account = wallet.account();\n\n        await account.functionCall(NEAR_ORACLE_CONTRACT_ID, 'storage_withdraw', {\n            amount,\n            // @ts-ignore\n        }, NEAR_MAX_GAS, '1');\n\n        return true;\n    }\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport StorageManagerDialog from '../../containers/StorageManagerDialog';\nimport { StorageManagerFormValues } from '../../containers/StorageManagerDialog/services/createDefaultStorageManagerFormValues';\nimport { setStorageManagerDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\nimport { withdrawStorage } from '../../services/providers/ProviderRegistry';\n\nexport default function StorageManagerDialogConnector() {\n    const open = useSelector((store: Reducers) => store.dialogs.storageManager.open);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const appConfig = useSelector((store: Reducers) => store.appconfig.appConfig);\n    const dispatch = useDispatch();\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setStorageManagerDialogOpen({\n            open: false,\n        }));\n    }, [dispatch]);\n\n    const handleSumbit = useCallback((formValues: StorageManagerFormValues) => {\n        withdrawStorage('near', formValues.amount);\n    }, []);\n\n    if (!account) return null;\n\n    return (\n        <StorageManagerDialog\n            open={open}\n            appConfig={appConfig}\n            account={account}\n            onRequestClose={handleRequestClose}\n            onSubmit={handleSumbit}\n        />\n    );\n}\n","import React, { FormEvent, useState } from 'react';\nimport MuiMenu from '@material-ui/core/Menu';\nimport MuiMenuItem from '@material-ui/core/MenuItem';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport IconButton from '@material-ui/core/IconButton';\nimport { NavLink, Link, useHistory } from 'react-router-dom';\nimport FakeLinkButton from '../../components/FakeLinkButton';\nimport SearchConnector from '../../connectors/SearchConnector';\nimport { Account } from '../../models/Account';\nimport { routePaths, routes } from '../../routes';\nimport trans from '../../translation/trans';\nimport { formatToken } from '../../utils/tokenUtils';\n\nimport s from './Menu.module.scss';\nimport StorageManagerDialogConnector from '../../connectors/StorageManagerDialogConnector';\ninterface Props {\n    account?: Account;\n    onLoginClick: () => void;\n    onLogoutClick: () => void;\n    onStorageManagerClick: () => void;\n}\n\nexport default function Menu({\n    account,\n    onLoginClick,\n    onLogoutClick,\n    onStorageManagerClick,\n}: Props) {\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element | null>(null);\n    const history = useHistory();\n\n    function handleMenuClick(event: FormEvent) {\n        setMenuAnchorEl(event.currentTarget);\n    }\n\n    function handleMenuClose() {\n        setMenuAnchorEl(null);\n    }\n\n    function handleLogoutClick() {\n        handleMenuClose();\n        onLogoutClick();\n    }\n\n    function handleStorageManagerClick() {\n        handleMenuClose();\n        onStorageManagerClick();\n    }\n\n    function handleAccountClick() {\n        if (!account) return;\n        handleMenuClose();\n\n        history.push(routePaths.account(account.providerId, account.accountId));\n    }\n\n    return (\n        <header className={s.root}>\n            <div className={s.menu}>\n                <div className={s.topBar}>\n                    <div>\n                        <Link to={routePaths.root()} className={s.logoWrapper}>\n                            <div className={s.logo} />\n                        </Link>\n                    </div>\n                    <div>\n                        <SearchConnector />\n                        <StorageManagerDialogConnector />\n                    </div>\n                </div>\n                <div className={s.bottomBar}>\n                    <ul className={s.menuItems}>\n                        {routes.map(route => {\n                            if (!route.inNavigation) {\n                                return null;\n                            }\n\n                            return (\n                                <li className={s.menuItem} key={route.key}>\n                                    <NavLink\n                                        className={s.menuLink}\n                                        activeClassName={s['menuLink--active']}\n                                        exact\n                                        to={route.navPath}\n                                    >\n                                        {route.label}\n                                    </NavLink>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                    <div className={s.rightMenu}>\n                        <ul className={s.accountLinks}>\n                            {account && (\n                                <>\n                                    <li className={s.menuItem}>\n                                        <Link className={s.link} to={routePaths.account(account.providerId, account.accountId)}>{account.accountId}</Link>\n                                    </li>\n                                    <li className={s.menuItem}>\n                                        {formatToken(account.balance)} {trans('global.token.symbol')}\n                                    </li>\n                                </>\n                            )}\n                        </ul>\n                        <div className={s.moreMenu}>\n                            {!account && (\n                                <FakeLinkButton onClick={onLoginClick}>\n                                    {trans('menu.label.login')}\n                                </FakeLinkButton>\n                            )}\n\n                            {account && (\n                                <>\n                                    <IconButton onClick={handleMenuClick} className={s.iconButton}>\n                                        <MoreVertIcon />\n                                    </IconButton>\n                                    <MuiMenu anchorEl={menuAnchorEl} keepMounted open={Boolean(menuAnchorEl)} onClose={handleMenuClose}>\n                                        <MuiMenuItem className={s.mobileOnly} onClick={handleAccountClick}>{account.accountId}</MuiMenuItem>\n                                        <MuiMenuItem className={s.mobileOnly} disabled>{formatToken(account.balance)} {trans('global.token.symbol')}</MuiMenuItem>\n                                        <MuiMenuItem onClick={handleStorageManagerClick}>{trans('menu.label.storageManager')}</MuiMenuItem>\n                                        <MuiMenuItem onClick={handleLogoutClick}>{trans('menu.label.logout')}</MuiMenuItem>\n                                    </MuiMenu>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </header>\n    );\n}\n","import { parseJson } from \"../utils/jsonUtils\"\n\ninterface FixedCustomFee {\n    fee: string;\n    type: 'fixed';\n}\n\ninterface MultiplierCustomFee {\n    multiplier: number;\n    type: 'multiplier';\n}\n\ninterface MultiplierCustomFeeGraphData {\n    Multiplier: number;\n}\n\ninterface FixedCustomFeeGraphData {\n    Fixed: string;\n}\n\nexport interface WhitelistItemGraphData {\n    interface_name: string;\n    contract_entry: string;\n    custom_fee: string;\n    code_base_url: string;\n    active: boolean;\n}\n\nexport interface WhitelistItemViewModel {\n    interfaceName: string;\n    contractEntry: string;\n    codeBaseUrl: string;\n    active: boolean;\n    customFee?: FixedCustomFee | MultiplierCustomFee;\n}\n\nexport function transformToWhitelistItemViewModel(data: WhitelistItemGraphData): WhitelistItemViewModel {\n    const parsedCustomFee = parseJson<FixedCustomFeeGraphData | MultiplierCustomFeeGraphData>(data.custom_fee);\n    let customFee: WhitelistItemViewModel['customFee'];\n\n    if (parsedCustomFee) {\n        if ('Fixed' in parsedCustomFee) {\n            customFee = {\n                fee: parsedCustomFee.Fixed,\n                type: 'fixed',\n            }\n        } else {\n            customFee = {\n                multiplier: parsedCustomFee.Multiplier,\n                type: 'multiplier',\n            }\n        }\n    }\n\n    return {\n        active: data.active,\n        codeBaseUrl: data.code_base_url,\n        contractEntry: data.contract_entry,\n        customFee,\n        interfaceName: data.interface_name,\n    }\n}\n","import gql from \"graphql-tag\";\nimport { AccountInfo } from \"../models/Account\";\nimport { transformToWhitelistItemViewModel } from \"../models/WhitelistItem\";\nimport { graphqlClient } from \"./GraphQLService\";\nimport { getProviderStorageBalance } from \"./providers/ProviderRegistry\";\n\nexport async function getAccountInfo(accountId: string, providerId: string = 'near'): Promise<AccountInfo> {\n    try {\n        const storageBalanceRequest = getProviderStorageBalance(providerId, accountId);\n        const response = await graphqlClient.query({\n            query: gql`\n                    query AccountInfo($accountId: String!) {\n                        accountInfo: getAccountInfo(accountId: $accountId) {\n                            active_staking\n                            total_staked\n                            total_claimed\n                            whitelist_item {\n                                active\n                                code_base_url\n                                contract_entry\n                                custom_fee\n                                interface_name\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n            }\n        });\n\n        const data = response.data.accountInfo;\n        const storageBalance = await storageBalanceRequest;\n\n        return {\n            activeStaking: data.active_staking,\n            totalStaked: data.total_staked,\n            totalClaimed: data.total_claimed,\n            storageAvailable: storageBalance.available,\n            storageTotal: storageBalance.total,\n            storageUsed: storageBalance.used,\n            whitelistItem: data.whitelist_item ? transformToWhitelistItemViewModel(data.whitelist_item) : undefined,\n        }\n    } catch (error) {\n        console.error('[getAccountInfo]', error);\n\n        return {\n            activeStaking: '0',\n            totalStaked: '0',\n            totalClaimed: '0',\n            storageAvailable: '0',\n            storageTotal: '0',\n            storageUsed: '0',\n        }\n    }\n}\n","import Big from \"big.js\";\nimport { Outcome, OutcomeType } from \"./DataRequestOutcome\";\n\nexport interface OutcomeStake {\n    outcome: Outcome;\n    stake: string;\n    round: number;\n    dataRequestId: string;\n    accountId?: string;\n    finalizedOutcome?: Outcome;\n    claimPayout?: string;\n}\n\nexport function combineOutcomeStakes(outcomeStakes: OutcomeStake[] = []): OutcomeStake[] {\n    const result = new Map<string, OutcomeStake>();\n\n    outcomeStakes.forEach((outcomeStake) => {\n        let answer = '';\n\n        if (outcomeStake.outcome.type === OutcomeType.Invalid) {\n            answer = 'Invalid';\n        } else {\n            answer = `Answer(${outcomeStake.outcome.answer})`;\n        }\n\n        const internalId = `${answer}_${outcomeStake.dataRequestId}`;\n        const currentItem = result.get(internalId);\n\n        if (currentItem) {\n            let stake = new Big(currentItem.stake);\n            stake = stake.add(outcomeStake.stake);\n            result.set(internalId, {\n                ...currentItem,\n                stake: stake.toString(),\n            });\n        } else {\n            result.set(internalId, outcomeStake);\n        }\n    });\n\n    return Array.from(result.values());\n}\n","import gql from \"graphql-tag\";\nimport { combineOutcomeStakes, OutcomeStake } from \"../models/OutcomeStake\";\nimport { Pagination } from \"../models/Pagination\";\nimport { transformToUserStakes, UserStakes } from \"../models/UserStakes\";\nimport { graphqlClient } from \"./GraphQLService\";\n\nasync function getUserStakesByRequestIdAndAccountId(requestId: string, accountId: string) {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakesRequestAndAccount($requestId: String!, $accountId: String!) {\n                        stakes: getUserStakesByRequestId(id: $requestId, accountId: $accountId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                        }\n                    }\n                `,\n            variables: {\n                requestId,\n                accountId,\n            }\n        });\n\n        const userStakes = transformToUserStakes(response.data.stakes);\n        return userStakes;\n    } catch (error) {\n        console.error('[getUserStakesByRequestIdAndAccountId]', error);\n        return {};\n    }\n}\n\nexport async function getUserStakesByRequestId(requestId: string, accountId?: string): Promise<UserStakes> {\n    try {\n        if (accountId) {\n            return getUserStakesByRequestIdAndAccountId(requestId, accountId);\n        }\n\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakes($requestId: String!) {\n                        stakes: getUserStakesByRequestId(id: $requestId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                        }\n                    }\n                `,\n            variables: {\n                requestId,\n            }\n        });\n\n        const userStakes = transformToUserStakes(response.data.stakes);\n        return userStakes;\n    } catch(error) {\n        console.error('[getUserStakesByRequestId]', error);\n        return {};\n    }\n}\n\nexport interface UserStakesForAccountFilters {\n    limit: number;\n    offset: number;\n}\n\nexport async function getUserStakesByAccountId(accountId: string, filters: UserStakesForAccountFilters): Promise<Pagination<OutcomeStake>> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUserStakesAccount($accountId: String!, $limit: Int, $offset: Int) {\n                        stakes: getUserStakes(accountId: $accountId, limit: $limit, offset: $offset) {\n                            items {\n                                data_request_id\n                                account_id\n                                id\n                                outcome\n                                round\n                                total_stake\n                                data_request {\n                                    finalized_outcome\n                                }\n                            }\n                            total\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n                limit: filters.limit,\n                offset: filters.offset,\n            }\n        });\n\n        const items = transformToUserStakes(response.data.stakes.items);\n\n        return {\n            items: items[accountId],\n            total: response.data.stakes.total,\n        }\n    } catch (error) {\n        console.error('[getUserStakesByAccountId]', error);\n        return {\n            items: [],\n            total: 0,\n        };\n    }\n}\n\n\nexport async function getUnclaimedStakesByAccountId(accountId: string): Promise<OutcomeStake[]> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                    query GetUnclaimedStakesAccount($accountId: String!) {\n                        stakes: getUnclaimedStakes(accountId: $accountId) {\n                            data_request_id\n                            account_id\n                            id\n                            outcome\n                            round\n                            total_stake\n                            data_request {\n                                finalized_outcome\n                            }\n                        }\n                    }\n                `,\n            variables: {\n                accountId,\n            }\n        });\n\n        const items = transformToUserStakes(response.data.stakes);\n        return combineOutcomeStakes(items[accountId]);\n    } catch (error) {\n        console.error('[getUnclaimedStakesByAccountId]', error);\n        return [];\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Account, AccountInfo } from '../../models/Account';\nimport { DataRequestListItem } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\n\nexport type AccountState = Readonly<{\n    account?: Account;\n    accountDetail: {\n        account?: Account;\n        info: AccountInfo;\n        unclaimedStakes: OutcomeStake[];\n\n        accountRequests: DataRequestListItem[];\n        accountRequestsTotal: number;\n\n        accountStakes: OutcomeStake[];\n        accountStakesTotal: number;\n    };\n    error?: string[];\n    loading: boolean;\n}>;\n\nconst initialState: AccountState = {\n    loading: false,\n    accountDetail: {\n        account: undefined,\n        info: {\n            activeStaking: '0',\n            totalStaked: '0',\n            totalClaimed: '0',\n            storageAvailable: '0',\n            storageTotal: '0',\n            storageUsed: '0',\n        },\n        accountStakes: [],\n        accountStakesTotal: 0,\n        accountRequests: [],\n        accountRequestsTotal: 0,\n        unclaimedStakes: [],\n    }\n};\n\nconst accountSlice = createSlice({\n    initialState,\n    name: 'account',\n    reducers: {\n        setAccountErrors(state: AccountState, action: PayloadAction<string[]>): AccountState {\n            return ({\n                ...state,\n                error: action.payload,\n            });\n        },\n        setAccountLoading(state: AccountState, action: PayloadAction<boolean>): AccountState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n        setAccount(state: AccountState, action: PayloadAction<Account | undefined>): AccountState {\n            return ({\n                ...state,\n                account: action.payload,\n            });\n        },\n        setAccountDetail(state: AccountState, action: PayloadAction<Account>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    account: action.payload,\n                },\n            });\n        },\n        setAccountStakes(state: AccountState, action: PayloadAction<OutcomeStake[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountStakes: action.payload,\n                },\n            });\n        },\n        setAccountStakesTotal(state: AccountState, action: PayloadAction<number>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountStakesTotal: action.payload,\n                },\n            });\n        },\n        setAccountInfo(state: AccountState, action: PayloadAction<AccountInfo>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    info: action.payload,\n                },\n            });\n        },\n        setAccountUnclaimedStakes(state: AccountState, action: PayloadAction<OutcomeStake[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    unclaimedStakes: action.payload,\n                },\n            });\n        },\n        setAccountRequests(state: AccountState, action: PayloadAction<DataRequestListItem[]>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountRequests: action.payload,\n                },\n            });\n        },\n        setAccountRequestsTotal(state: AccountState, action: PayloadAction<number>): AccountState {\n            return ({\n                ...state,\n                accountDetail: {\n                    ...state.accountDetail,\n                    accountRequestsTotal: action.payload,\n                },\n            });\n        },\n    },\n});\n\nexport const {\n    setAccount,\n    setAccountErrors,\n    setAccountLoading,\n    setAccountDetail,\n    setAccountStakes,\n    setAccountStakesTotal,\n    setAccountInfo,\n    setAccountUnclaimedStakes,\n    setAccountRequests,\n    setAccountRequestsTotal,\n} = accountSlice.actions;\n\nexport default accountSlice.reducer;\n","import { DEFAULT_PAGINATION_LIMIT } from \"../../config\";\nimport { getAccountInfo } from \"../../services/AccountService\";\nimport { getAllDataRequests } from \"../../services/DataRequestService\";\nimport { getAccountInfoWithProvider, getLoggedInAccount, loginWithProvider, logoutWithProvider } from \"../../services/providers/ProviderRegistry\";\nimport { getUnclaimedStakesByAccountId, getUserStakesByAccountId } from \"../../services/UserStakeService\";\nimport { setAccount, setAccountDetail, setAccountInfo, setAccountLoading, setAccountRequests, setAccountRequestsTotal, setAccountStakes, setAccountStakesTotal, setAccountUnclaimedStakes } from \"./account\";\n\nexport function loadLoggedInAccount() {\n    return async (dispatch: Function) => {\n        const account = await getLoggedInAccount();\n        if (!account) return;\n\n        dispatch(setAccount(account));\n    };\n}\n\nexport function loadAccount(providerId: string, accountId: string) {\n    return async (dispatch: Function) => {\n        const account = await getAccountInfoWithProvider(providerId, accountId);\n\n        if (!account) {\n            return;\n        }\n\n        const accountInfo = await getAccountInfo(accountId);\n        dispatch(setAccountDetail(account));\n        dispatch(setAccountInfo(accountInfo));\n    };\n}\n\n\nexport function loadAccountStakes(page: number, accountId: string) {\n    return async (dispatch: Function) => {\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const stakes = await getUserStakesByAccountId(accountId, {\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        });\n\n        dispatch(setAccountStakesTotal(stakes.total));\n        dispatch(setAccountStakes(stakes.items));\n    }\n}\n\nexport function loadAccountRequests(page: number, requestor: string) {\n    return async (dispatch: Function) => {\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const requests = await getAllDataRequests({\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        }, { requestor, onlyArbitratorRequests: false });\n\n        dispatch(setAccountRequests(requests.items));\n        dispatch(setAccountRequestsTotal(requests.total));\n    }\n}\n\nexport function loadUnclaimedAccountStakes(accountId: string) {\n    return async (dispatch: Function) => {\n        const stakes = await getUnclaimedStakesByAccountId(accountId);\n        dispatch(setAccountUnclaimedStakes(stakes));\n    }\n}\n\nexport function loginAccount() {\n    return async (dispatch: Function) => {\n        dispatch(setAccountLoading(true));\n\n        await loginWithProvider('near');\n\n        dispatch(setAccountLoading(false));\n    };\n}\n\n\nexport function logoutAccount() {\n    return async (dispatch: Function) => {\n        await logoutWithProvider('near');\n        dispatch(setAccount(undefined));\n    };\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppConfig } from '../../models/AppConfig';\n\nexport type AppConfigState = Readonly<{\n    loading: boolean;\n    appConfig: AppConfig;\n}>;\n\nconst initialState: AppConfigState = {\n    loading: false,\n    appConfig: {\n        nativeTokenDecimals: 18,\n        nativeTokenSymbol: '?',\n    }\n};\n\nconst appConfigSlice = createSlice({\n    initialState,\n    name: 'appconfig',\n    reducers: {\n        setAppConfigLoading(state: AppConfigState, action: PayloadAction<AppConfigState['loading']>): AppConfigState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n\n        setAppConfig(state: AppConfigState, action: PayloadAction<AppConfigState['appConfig']>): AppConfigState {\n            return ({\n                ...state,\n                appConfig: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setAppConfig,\n    setAppConfigLoading,\n} = appConfigSlice.actions;\n\nexport default appConfigSlice.reducer;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Menu from '../../containers/Menu';\nimport { loadLoggedInAccount, loginAccount, logoutAccount } from '../../redux/account/accountActions';\nimport { loadAppConfig } from '../../redux/appconfig/appconfigActions';\nimport { setStorageManagerDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function MenuConnector() {\n    const dispatch = useDispatch();\n    const account = useSelector((store: Reducers) => store.account.account);\n\n    const handleLoginClick = useCallback(() => {\n        dispatch(loginAccount());\n    }, [dispatch]);\n\n    const handleLogoutClick = useCallback(() => {\n        dispatch(logoutAccount());\n    }, [dispatch]);\n\n    const handleStorageManagerClick = useCallback(() => {\n        dispatch(setStorageManagerDialogOpen({\n            open: true,\n        }));\n    }, [dispatch]);\n\n    useEffect(() => {\n        dispatch(loadLoggedInAccount());\n        dispatch(loadAppConfig());\n    }, [dispatch]);\n\n    return (\n        <Menu\n            onLoginClick={handleLoginClick}\n            account={account}\n            onLogoutClick={handleLogoutClick}\n            onStorageManagerClick={handleStorageManagerClick}\n        />\n    );\n}\n","import { getAppConfigForProvider } from \"../../services/providers/ProviderRegistry\";\nimport { setAppConfig, setAppConfigLoading } from \"./appconfig\";\n\nexport function loadAppConfig() {\n    return async (dispatch: Function) => {\n        dispatch(setAppConfigLoading(true));\n\n        const config = await getAppConfigForProvider('near');\n\n        dispatch(setAppConfig(config));\n        dispatch(setAppConfigLoading(false));\n    };\n}\n","import React from 'react';\n\nimport s from './Footer.module.scss';\n\n\nexport default function Footer() {\n    return (\n        <footer className={s.footer}>\n            <div className={s.footerWrapper}>\n                <div className={s.logo} />\n            </div>\n        </footer>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport MenuConnector from '../../connectors/MenuConnector';\nimport Footer from '../Footer';\n\nimport s from './Page.module.scss';\n\ninterface Props {\n    className?: string;\n    bodyClassName?: string;\n    hasNavigation?: boolean;\n}\n\nexport default function Page({\n    className,\n    children,\n    hasNavigation = true,\n}: PropsWithChildren<Props>) {\n    return (\n        <div className={s.page}>\n            <MenuConnector />\n            <main className={s.body}>\n                {children}\n            </main>\n            <Footer />\n        </div>\n    );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport trans from '../../translation/trans';\n\nimport s from './Pagination.module.scss';\n\ninterface Props {\n    total: number;\n    page: number;\n    rowsPerPage: number;\n    onChangePage: (page: number) => void;\n    className?: string;\n}\n\nexport default function Pagination({\n    total,\n    page,\n    onChangePage,\n    rowsPerPage,\n    className\n}: Props) {\n    const handleFirstPageButtonClick = () => {\n        onChangePage(0);\n    };\n\n    const handleBackButtonClick = () => {\n        onChangePage(page - 1);\n    };\n\n    const handleNextButtonClick = () => {\n        onChangePage(page + 1);\n    };\n\n    const handleLastPageButtonClick = () => {\n        onChangePage(total);\n    };\n\n    return (\n        <div className={classnames(s.pagination, className)}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                <FirstPageIcon />\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                <KeyboardArrowLeft />\n            </IconButton>\n            <span>\n                {trans('pagination.pageIndication', {\n                    currentPage: (page + 1).toString(),\n                    totalPages: (total + 1).toString(),\n                })}\n            </span>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page === total || total <= 0}\n                aria-label=\"next page\"\n            >\n                <KeyboardArrowRight />\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page === total || total <= 0}\n                aria-label=\"last page\"\n            >\n                <LastPageIcon />\n            </IconButton>\n        </div>\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\nimport Pagination from '../Pagination/Pagination';\nimport { OutcomeStake } from '../../models/OutcomeStake';\n\nimport s from './OutcomeStakesOverview.module.scss';\nimport { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport trans from '../../translation/trans';\nimport { routePaths } from '../../routes';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport { formatToken } from '../../utils/tokenUtils';\n\ninterface Props {\n    outcomeStakes: OutcomeStake[];\n    page: number;\n    totalItems: number;\n    onRequestPageChange: (page: number) => void;\n    showPagination?: boolean;\n}\n\nexport default function OutcomeStakesOverview({\n    onRequestPageChange,\n    outcomeStakes = [],\n    page,\n    totalItems,\n    showPagination = true,\n}: Props) {\n    return (\n        <div>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.id')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.roud')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.finalizedOutcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakesOverview.table.label.stake')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {outcomeStakes.map((stake) => (\n                            <TableRow key={`${stake.dataRequestId}_${stake.round}_${transfromOutcomeToString(stake.outcome)}`}>\n                                <TableCell className={s.linkCell}>\n                                    <Link to={routePaths.dataRequestDetail('near', stake.dataRequestId)}>\n                                        #{stake.dataRequestId}\n                                    </Link>\n                                </TableCell>\n                                <TableCell>\n                                    {stake.round}\n                                </TableCell>\n                                <TableCell>\n                                    {transfromOutcomeToString(stake.outcome)}\n                                </TableCell>\n                                <TableCell>\n                                    {stake.finalizedOutcome ? transfromOutcomeToString(stake.finalizedOutcome) : null}\n                                </TableCell>\n                                <TableCell>\n                                    {formatToken(stake.stake)} {trans('global.token.symbol')}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {showPagination && (\n                <Pagination\n                    className={s.pagination}\n                    total={Math.ceil(totalItems / DEFAULT_PAGINATION_LIMIT) - 1}\n                    page={page}\n                    rowsPerPage={DEFAULT_PAGINATION_LIMIT}\n                    onChangePage={onRequestPageChange}\n                />\n            )}\n        </div>\n    );\n}\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport OutcomeStakesOverview from '../../containers/OutcomeStakesOverview';\nimport { loadAccountStakes } from '../../redux/account/accountActions';\nimport { Reducers } from '../../redux/reducers';\n\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountOutcomeStakesConnector() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n    const stakes = useSelector((store: Reducers) => store.account.accountDetail.accountStakes);\n    const total = useSelector((store: Reducers) => store.account.accountDetail.accountStakesTotal);\n    const [page, setPage] = useState(0);\n\n    const handleRequestPageChange = useCallback((newPage: number) => {\n        dispatch(loadAccountStakes(newPage, params.accountId));\n        setPage(newPage);\n    }, [dispatch, params]);\n\n    return (\n        <OutcomeStakesOverview\n            onRequestPageChange={handleRequestPageChange}\n            outcomeStakes={stakes}\n            totalItems={total}\n            page={page}\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountOutcomeStakesConnector from '../../../../connectors/AccountOutcomeStakesConnector';\nimport { loadAccountStakes } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountStakesPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadAccountStakes(0, params.accountId));\n    }, [dispatch, params]);\n\n    return (\n        <div>\n            <AccountOutcomeStakesConnector />\n        </div>\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\n\nimport { DataRequestListItem, getDataRequestTypeTranslation } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\nimport { routePaths } from '../../routes';\nimport Pagination from '../Pagination/Pagination';\n\nimport s from './DataRequestsOverview.module.scss';\nimport { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport { prettyFormatDate } from '../../utils/dateUtils';\n\ninterface Props {\n    dataRequests: DataRequestListItem[];\n    page: number;\n    totalItems: number;\n    showPagination?: boolean;\n    onRequestPageChange: (page: number) => void;\n}\n\nexport default function DataRequestsOverview({\n    dataRequests,\n    page,\n    totalItems,\n    showPagination = true,\n    onRequestPageChange,\n}: Props) {\n    return (\n        <div className={s.root}>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('dataRequestsOverview.table.label.id')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.type')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.status')}</TableCell>\n                            <TableCell>{trans('dataRequestsOverview.table.label.timestamp')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {dataRequests.map((request) => (\n                            <TableRow key={request.id}>\n                                <TableCell className={s.linkCell}>\n                                    <Link to={routePaths.dataRequestDetail('near', request.id)}>\n                                        #{request.id}\n                                    </Link>\n                                </TableCell>\n                                <TableCell>\n                                    {getDataRequestTypeTranslation(request.type)}\n                                </TableCell>\n                                <TableCell>\n                                    {request.finalized_outcome && (\n                                        <span>{trans('global.status.completed')}</span>\n                                    )}\n\n                                    {!request.finalized_outcome && (\n                                        <span>{trans('global.status.ongoing')}</span>\n                                    )}\n                                </TableCell>\n                                <TableCell>\n                                    {prettyFormatDate(request.date)}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            {dataRequests.length === 0 && (\n                <div className={s.noRequests}>{trans('global.empty.noRequests')}</div>\n            )}\n            {showPagination && (\n                <Pagination\n                    className={s.pagination}\n                    total={Math.ceil(totalItems / DEFAULT_PAGINATION_LIMIT) - 1}\n                    page={page}\n                    rowsPerPage={DEFAULT_PAGINATION_LIMIT}\n                    onChangePage={onRequestPageChange}\n                />\n            )}\n        </div>\n    );\n}\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { loadAccountRequests } from '../../redux/account/accountActions';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountRequestsConnector() {\n    const [page, setPage] = useState(0);\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n    const dataRequests = useSelector((store: Reducers) => store.account.accountDetail.accountRequests);\n    const dataRequestsTotal = useSelector((store: Reducers) => store.account.accountDetail.accountRequestsTotal);\n\n    const handleRequestPageChange = useCallback((newPage: number) => {\n        dispatch(loadAccountRequests(newPage, params.accountId));\n        setPage(newPage);\n    }, [dispatch, params]);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={dataRequests}\n            onRequestPageChange={handleRequestPageChange}\n            page={page}\n            totalItems={dataRequestsTotal}\n            showPagination\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountRequestsConnector from '../../../../connectors/AccountRequestsConnector';\nimport { loadAccountRequests } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountRequestsPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadAccountRequests(0, params.accountId));\n    }, [dispatch, params.accountId]);\n\n    return (\n        <div>\n            <AccountRequestsConnector />\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OutcomeStakesOverview from '../../containers/OutcomeStakesOverview';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function AccountUnclaimedStakesConnector() {\n    const unclaimedStakes = useSelector((store: Reducers) => store.account.accountDetail.unclaimedStakes);\n\n    return (\n        <OutcomeStakesOverview\n            totalItems={0}\n            page={0}\n            onRequestPageChange={() => {}}\n            outcomeStakes={unclaimedStakes}\n            showPagination={false}\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport AccountUnclaimedStakesConnector from '../../../../connectors/AccountUnclaimedStakesConnector';\nimport { loadUnclaimedAccountStakes } from '../../../../redux/account/accountActions';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountUnclaimedPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadUnclaimedAccountStakes(params.accountId));\n    }, [dispatch, params]);\n\n    return (\n        <div>\n            <AccountUnclaimedStakesConnector />\n        </div>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport { useCallback } from 'react';\n\nimport s from './ExternalLink.module.scss';\n\ninterface Props {\n    href: string;\n}\n\nexport default function ExternalLink({\n    children,\n    href,\n}: PropsWithChildren<Props>) {\n    const onClick = useCallback((event) => {\n        event.preventDefault();\n        window.open(href, '_blank');\n    }, [href]);\n\n    return (\n        <a href={href} className={s.link} onClick={onClick}>{children}</a>\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\n\nimport s from './WhitelistInfoCard.module.scss';\nimport trans, { booleanToYesNo } from '../../translation/trans';\nimport InformationRows from '../InformationRows';\nimport { WhitelistItemViewModel } from '../../models/WhitelistItem';\nimport { InformationRow } from '../InformationRows/InformationRows';\nimport { formatToken } from '../../utils/tokenUtils';\nimport ExternalLink from '../../components/ExternalLink';\n\ninterface Props {\n    whitelist: WhitelistItemViewModel;\n}\n\nexport default function WhitelistInfoCard({\n    whitelist,\n}: Props) {\n    const rows: InformationRow[] = [\n        {\n            label: trans('whitelistInfoCard.label.interfaceName'),\n            value: <span>{whitelist.interfaceName}</span>,\n        },\n        {\n            label: trans('whitelistInfoCard.label.codeBaseUrl'),\n            value: <ExternalLink href={whitelist.codeBaseUrl}>{whitelist.codeBaseUrl}</ExternalLink>,\n        },\n        {\n            label: trans('whitelistInfoCard.label.active'),\n            value: <span>{booleanToYesNo(whitelist.active)}</span>,\n        }\n    ];\n\n    if (whitelist.customFee) {\n        if (whitelist.customFee.type === 'fixed') {\n            rows.push({\n                label: trans('whitelistInfoCard.label.fixedFee'),\n                value: <span>{formatToken(whitelist.customFee.fee)} {trans('global.token.symbol')}</span>\n            });\n        } else if (whitelist.customFee.type === 'multiplier') {\n            rows.push({\n                label: trans('whitelistInfoCard.label.stakeMultiplier'),\n                value: <span>{whitelist.customFee.multiplier}x</span>\n            });\n        }\n    }\n\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('whitelistInfoCard.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={rows}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport WhitelistInfoCard from '../../containers/WhitelistInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function WhitelistInfoCardConnector() {\n    const whitelist = useSelector((store: Reducers) => store.account.accountDetail.info.whitelistItem);\n\n    if (!whitelist) {\n        return null;\n    }\n\n    return (\n        <WhitelistInfoCard whitelist={whitelist} />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport trans from '../../translation/trans';\n\nimport s from './OracleConfigInfoCard.module.scss';\nimport InformationRows from '../InformationRows';\nimport { OracleConfig } from '../../models/OracleConfig';\nimport { formatTimeToReadable, prettyFormatDate } from '../../utils/dateUtils';\nimport { formatToken } from '../../utils/tokenUtils';\n\ninterface Props {\n    oracleConfig: OracleConfig;\n}\n\nexport default function OracleConfigInfoCard({\n    oracleConfig,\n}: Props) {\n    const minInitialChallengeWindowDuration = formatTimeToReadable(Number(oracleConfig.minInitialChallengeWindowDuration), 'ns');\n    const defaultChallengeWindowDuration = formatTimeToReadable(Number(oracleConfig.defaultChallengeWindowDuration), 'ns');\n\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('oracleConfigInfoCard.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[{\n                        label: trans('oracleConfigInfoCard.label.createdAt'),\n                        value: <span>{prettyFormatDate(oracleConfig.date)}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.gov'),\n                        value: <span>{oracleConfig.gov}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.bondToken'),\n                        value: <span>{oracleConfig.bondToken}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.stakeToken'),\n                        value: <span>{oracleConfig.stakeToken}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.finalArbitrator'),\n                        value: <span>{oracleConfig.finalArbitrator}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.finalArbitratorInvokeAmount'),\n                        value: <span>{formatToken(oracleConfig.finalArbitratorInvokeAmount, 18, 2)} {trans('global.token.symbol')}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.resolutionFeePercentage'),\n                        value: <span>{oracleConfig.resolutionFeePercentage / 100}%</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.maxOutcomes'),\n                        value: <span>{oracleConfig.maxOutcomes}</span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.minInitialChallengeWindowDuration'),\n                        value: <span>\n                            {trans('global.date.smallFormat', {\n                                days: minInitialChallengeWindowDuration.days.toString(),\n                                hours: minInitialChallengeWindowDuration.hours.toString(),\n                                minutes: minInitialChallengeWindowDuration.minutes.toString(),\n                                seconds: minInitialChallengeWindowDuration.seconds.toString(),\n                            })} / {oracleConfig.minInitialChallengeWindowDuration} ns\n                        </span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.defaultChallengeWindowDuration'),\n                        value: <span>{\n                            trans('global.date.smallFormat', {\n                                days: defaultChallengeWindowDuration.days.toString(),\n                                hours: defaultChallengeWindowDuration.hours.toString(),\n                                minutes: defaultChallengeWindowDuration.minutes.toString(),\n                                seconds: defaultChallengeWindowDuration.seconds.toString(),\n                            })} / {oracleConfig.defaultChallengeWindowDuration} ns\n                        </span>\n                    }, {\n                        label: trans('oracleConfigInfoCard.label.validityBond'),\n                        value: <span>{formatToken(oracleConfig.validityBond, 18, 2)} {trans('global.token.symbol')}</span>\n                    },]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OracleConfigInfoCard from '../../containers/OracleConfigInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function OracleConfigInfoCardConnector() {\n    const oracleConfig = useSelector((store: Reducers) => store.oracleConfig.detail);\n\n    if (!oracleConfig) {\n        return null;\n    }\n\n    return (\n        <OracleConfigInfoCard\n            oracleConfig={oracleConfig}\n        />\n    );\n}\n","import gql from \"graphql-tag\";\nimport { OracleConfig, transformToOracleConfig } from \"../models/OracleConfig\";\nimport { graphqlClient } from \"./GraphQLService\";\n\nexport async function getOracleConfigById(id: string): Promise<OracleConfig | undefined> {\n    try {\n        const response = await graphqlClient.query({\n            query: gql`\n                query GetOracleConfig($id: String!) {\n                    config: getOracleConfig(id: $id) {\n                        block_height\n                        bond_token\n                        date\n                        default_challenge_window_duration\n                        final_arbitrator\n                        final_arbitrator_invoke_amount\n                        gov\n                        id\n                        max_outcomes\n                        min_initial_challenge_window_duration\n                        resolution_fee_percentage\n                        stake_token\n                        validity_bond\n                    }\n                }\n            `,\n            variables: {\n                id,\n            }\n        });\n\n        return transformToOracleConfig(response.data.config);\n    } catch (error) {\n        console.error('[getOracleConfig]', error);\n        return undefined;\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { OracleConfig } from '../../models/OracleConfig';\n\nexport type OracleConfigState = Readonly<{\n    detail?: OracleConfig;\n    loading: boolean;\n}>;\n\nconst initialState: OracleConfigState = {\n    loading: false,\n};\n\nconst oracleConfigSlice = createSlice({\n    initialState,\n    name: 'oracleConfig',\n    reducers: {\n        setOracleConfigDetail(state: OracleConfigState, action: PayloadAction<OracleConfig | undefined>): OracleConfigState {\n            return ({\n                ...state,\n                detail: action.payload,\n            });\n        },\n\n        setOracleConfigLoading(state: OracleConfigState, action: PayloadAction<boolean>): OracleConfigState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setOracleConfigDetail,\n    setOracleConfigLoading,\n} = oracleConfigSlice.actions;\n\nexport default oracleConfigSlice.reducer;\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { OutcomeStake } from '../../../../models/OutcomeStake';\n\nimport s from './OutcomeStakeInfo.module.scss';\nimport trans from '../../../../translation/trans';\nimport { formatToken } from '../../../../utils/tokenUtils';\nimport { isSameOutcome, Outcome, OutcomeType } from '../../../../models/DataRequestOutcome';\n\nexport interface Props {\n    outcomeStakes: OutcomeStake[];\n    tableComponent?: any;\n    finalizedOutcome?: Outcome;\n    finalizedRound?: number;\n}\n\nexport default function OutcomeStakeInfo({\n    outcomeStakes,\n    tableComponent = Paper,\n    finalizedOutcome,\n    finalizedRound,\n}: Props) {\n    return (\n        <div>\n            <TableContainer className={s.container} component={tableComponent}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('outcomeStakeInfo.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('outcomeStakeInfo.table.label.stake')}</TableCell>\n                            {finalizedOutcome && <TableCell>{trans('outcomeStakeInfo.table.label.correcltyStaked')}</TableCell>}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {outcomeStakes.map((outcomeInfo, index) => {\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell>\n                                        {outcomeInfo.outcome.type === OutcomeType.Answer && (\n                                            <span>\"{outcomeInfo.outcome.answer}\"</span>\n                                        )}\n\n                                        {outcomeInfo.outcome.type === OutcomeType.Invalid && (\n                                            <span>{trans('outcomeStakeInfo.label.invalid')}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {formatToken(outcomeInfo.stake, 18)} {trans('global.token.symbol')}\n                                    </TableCell>\n\n                                    {finalizedOutcome && typeof finalizedRound !== 'undefined' && (\n                                        <TableCell>\n                                            {outcomeInfo.round <= finalizedRound && isSameOutcome(finalizedOutcome, outcomeInfo.outcome) && trans('outcomeStakeInfo.label.correct')}\n                                            {outcomeInfo.round <= finalizedRound && !isSameOutcome(finalizedOutcome, outcomeInfo.outcome) && trans('outcomeStakeInfo.label.incorrect')}\n                                            {outcomeInfo.round > finalizedRound && trans('outcomeStakeInfo.label.unbonded')}\n                                        </TableCell>\n                                    )}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    );\n}\n","import React, { PropsWithChildren } from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport trans from '../../translation/trans';\nimport OutcomeStakeInfo from '../ResolutionWindowAccordion/components/OutcomeStakeInfo/OutcomeStakeInfo';\n\nimport s from './AccountStakesInfoCard.module.scss';\nimport { ClaimViewModel } from '../../models/Claim';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { Outcome } from '../../models/DataRequestOutcome';\n\ninterface Props {\n    claim?: ClaimViewModel;\n    accountStakes: OutcomeStake[];\n    finalizedOutcome?: Outcome;\n    finalizedRound?: number;\n}\n\nfunction EmptyDiv(props: PropsWithChildren<{}>) {\n    return <div>{props.children}</div>\n}\n\nexport default function AccountStakesInfoCard({\n    claim,\n    accountStakes,\n    finalizedRound,\n    finalizedOutcome,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('accountStakesInfoCard.title')}</h2>\n                </div>\n\n                {claim && (\n                    <div className={s.claim}>\n                        {trans('dataRequestDetail.label.claimed', {\n                            payout: formatToken(claim.payout),\n                            userCorrectStake: formatToken(claim.userCorrectStake),\n                            tokenSymbol: trans('global.token.symbol'),\n                        })}\n                    </div>\n                )}\n\n                {accountStakes.length > 0 && (\n                    <OutcomeStakeInfo\n                        outcomeStakes={accountStakes}\n                        tableComponent={EmptyDiv}\n                        finalizedOutcome={finalizedOutcome}\n                        finalizedRound={finalizedRound}\n                    />\n                )}\n\n                {accountStakes.length === 0 && (\n                    <div className={s.noStakes}>\n                        {trans('accountStakesInfoCard.noStakes')}\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport AccountStakesInfoCard from '../../containers/AccountStakesInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function AccountStakesInfoCardConnector() {\n    const accountStakes = useSelector((store: Reducers) => store.dataRequest.accountStakes);\n    const claim = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail?.claimInfo);\n    const finalizedOutcome = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail?.finalized_outcome);\n    const resolutionWindows = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail?.resolutionWindows) ?? [];\n    let finalizedRound: number | undefined = undefined;\n\n    if (finalizedOutcome) {\n        // -2 because the last round is always an open window\n        finalizedRound = resolutionWindows[resolutionWindows.length - 2].round;\n    }\n\n    return (\n        <AccountStakesInfoCard\n            accountStakes={accountStakes}\n            claim={claim}\n            finalizedOutcome={finalizedOutcome}\n            finalizedRound={finalizedRound}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\n\nimport s from './CallDataInfoCard.module.scss';\nimport LabeledText from '../../compositions/LabeledText';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function CallDataInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('callDataInfo.title')}</h2>\n                </div>\n\n                {dataRequest.description && (\n                    <LabeledText label={trans('callDataInfo.description')} className={s.label}>{dataRequest.description}</LabeledText>\n                )}\n\n                {dataRequest.sources.length > 0 && (\n                    <table className={s.table}>\n                        <thead>\n                            <tr className={s.tableHeadRow}>\n                                <th>{trans('callDataInfo.label.endPoint')}</th>\n                                <th>{trans('callDataInfo.label.sourcePath')}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {dataRequest.sources.map(source => (\n                                <tr key={`${source.endPoint}_${source.sourcePath}`}>\n                                    <td className={s.tableItem}>\n                                        <span className={s.tableItemInner}>{source.endPoint}</span>\n                                    </td>\n                                    <td className={s.tableItem}><pre>{source.sourcePath}</pre></td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n\n                {dataRequest.outcomes?.length && (\n                    <>\n                        <LabeledText label={trans('callDataInfo.outcomes.title')} />\n                        <pre className={s.possibleOutcomes}>\n                            {JSON.stringify(dataRequest.outcomes, null, 4)}\n                        </pre>\n                    </>\n                )}\n\n                <LabeledText label={trans('callDataInfo.dataType')} className={s.label}>{dataRequest.data_type}</LabeledText>\n\n                {dataRequest.data_type === \"Number\" && (\n                    <LabeledText label={trans('callDataInfo.numberMultiplier')} className={s.label}>{dataRequest.number_multiplier}</LabeledText>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport CallDataInfoCard from '../../containers/CallDataInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function CallDataInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <CallDataInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import React from 'react';\nimport { default as ReactCountdown } from 'react-countdown';\n\ninterface Props {\n    date: Date;\n    onComplete: () => void;\n}\n\nexport default function Countdown({\n    date,\n    onComplete,\n}: Props) {\n    return (\n        <ReactCountdown date={date} onComplete={onComplete} />\n    );\n}\n","import Big from 'big.js';\nimport React, { useCallback, useState } from 'react';\nimport Button from '../../components/Button';\nimport Countdown from '../../compositions/Countdown';\nimport { Account } from '../../models/Account';\nimport { canDataRequestBeFinalized, DataRequestViewModel } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport { ResolutionWindow } from '../../models/ResolutionWindow';\nimport trans from '../../translation/trans';\nimport { sumBigs } from '../../utils/bigUtils';\n\nimport s from './DataRequestDetailHeader.module.scss';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    onStakeClick: () => void;\n    onUnstakeClick: () => void;\n    onClaimClick: () => void;\n    onFinalizeClick: () => void;\n    account?: Account;\n    accountStakes: OutcomeStake[];\n}\n\nexport default function DataRequestDetailHeader({\n    dataRequest,\n    onStakeClick,\n    onClaimClick,\n    onUnstakeClick,\n    onFinalizeClick,\n    account,\n    accountStakes,\n}: Props) {\n    const now = new Date();\n    const [canInteract, setInteract] = useState(dataRequest.settlementTime.getTime() <= now.getTime());\n    const currentResolutionWindow: ResolutionWindow | undefined = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1] ?? undefined;\n    const isFinalized = typeof dataRequest.finalized_outcome !== 'undefined';\n    const canFinalize = canDataRequestBeFinalized(dataRequest);\n\n    const hasClaimed = Boolean(dataRequest.claimInfo?.payout);\n    const roundStakes = accountStakes.filter(stake => stake.round === currentResolutionWindow?.round);\n    const stakedOnRound = sumBigs(roundStakes.map(roundStake => new Big(roundStake.stake)));\n\n    const onCountdownComplete = useCallback(() => {\n        setInteract(true);\n    }, []);\n\n    return (\n        <header className={s.header}>\n            <h1>{trans('dataRequestDetail.title', { id: dataRequest.id })}</h1>\n            <div className={s.actions}>\n                {!canInteract && (\n                    <span>\n                        {trans('dataRequestDetail.canBeResolvedIn')}\n                        <Countdown\n                            date={dataRequest.settlementTime}\n                            onComplete={onCountdownComplete}\n                        />\n                    </span>\n                )}\n\n                {canInteract && account && !isFinalized && (\n                    <Button className={s.button} onClick={onStakeClick}>\n                        {trans('dataRequestDetail.label.stake')}\n                    </Button>\n                )}\n\n                {canInteract && account && stakedOnRound.gt(0) && (\n                    <Button className={s.button} onClick={onUnstakeClick}>\n                        {trans('dataRequestDetail.label.unstake')}\n                    </Button>\n                )}\n\n                {canInteract && account && canFinalize && (\n                    <Button className={s.button} onClick={onFinalizeClick}>\n                        {trans('dataRequestDetail.label.finalize')}\n                    </Button>\n                )}\n\n                {canInteract && account && !hasClaimed && accountStakes.length > 0 && isFinalized && (\n                    <Button className={s.button} onClick={onClaimClick}>\n                        {trans('dataRequestDetail.label.claim')}\n                    </Button>\n                )}\n            </div>\n        </header>\n    );\n}\n","import Big from \"big.js\";\n\nexport function sumBigs(bigs: Big[]) {\n    return bigs.reduce((prev, curr) => prev.add(curr), new Big(0));\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { DataRequestListItem, DataRequestViewModel } from '../../models/DataRequest';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\nexport type DataRequestsState = Readonly<{\n    dataRequests: DataRequestListItem[];\n    dataRequestFilters: DataRequestFilters;\n    totalDataRequests: number;\n    error?: string[];\n    detailLoading: boolean;\n    loading: boolean;\n    dataRequestDetail?: DataRequestViewModel;\n    accountStakes: OutcomeStake[];\n}>;\n\nconst initialState: DataRequestsState = {\n    detailLoading: false,\n    loading: false,\n    dataRequests: [],\n    totalDataRequests: 0,\n    accountStakes: [],\n    dataRequestFilters: {\n        onlyArbitratorRequests: false,\n    }\n};\n\nconst dataRequestsSlice = createSlice({\n    initialState,\n    name: 'dataRequests',\n    reducers: {\n        setDataRequestsErrors(state: DataRequestsState, action: PayloadAction<string[]>): DataRequestsState {\n            return ({\n                ...state,\n                error: action.payload,\n            });\n        },\n        setDataRequestsLoading(state: DataRequestsState, action: PayloadAction<boolean>): DataRequestsState {\n            return ({\n                ...state,\n                loading: action.payload,\n            });\n        },\n        setDataRequestDetailLoading(state: DataRequestsState, action: PayloadAction<boolean>): DataRequestsState {\n            return ({\n                ...state,\n                detailLoading: action.payload,\n            });\n        },\n        setDataRequests(state: DataRequestsState, action: PayloadAction<DataRequestListItem[]>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequests: action.payload,\n            });\n        },\n        setDataRequestDetail(state: DataRequestsState, action: PayloadAction<DataRequestViewModel | undefined>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequestDetail: action.payload,\n            });\n        },\n        setTotalDataRequest(state: DataRequestsState, action: PayloadAction<number>): DataRequestsState {\n            return ({\n                ...state,\n                totalDataRequests: action.payload,\n            });\n        },\n        setDataRequestAccountStakes(state: DataRequestsState, action: PayloadAction<OutcomeStake[]>): DataRequestsState {\n            return ({\n                ...state,\n                accountStakes: action.payload,\n            });\n        },\n        setDataRequestFilters(state: DataRequestsState, action: PayloadAction<DataRequestFilters>): DataRequestsState {\n            return ({\n                ...state,\n                dataRequestFilters: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setDataRequests,\n    setDataRequestsErrors,\n    setDataRequestsLoading,\n    setDataRequestDetail,\n    setDataRequestDetailLoading,\n    setTotalDataRequest,\n    setDataRequestAccountStakes,\n    setDataRequestFilters,\n} = dataRequestsSlice.actions;\n\nexport default dataRequestsSlice.reducer;\n","import { DEFAULT_PAGINATION_LIMIT } from '../../config';\nimport { StakeFormValues } from '../../containers/StakeDialog/services/createDefaultStakeFormValues';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport { Outcome, OutcomeType } from '../../models/DataRequestOutcome';\nimport { combineOutcomeStakes, OutcomeStake } from '../../models/OutcomeStake';\nimport { ResolutionWindow } from '../../models/ResolutionWindow';\nimport { getAllDataRequests, getDataRequestById } from '../../services/DataRequestService';\nimport { claimWithProvider, finalizeWithProvider, getLoggedInAccountId, stakeWithProvider, unstakeWithProvider } from '../../services/providers/ProviderRegistry';\nimport { getUserStakesByRequestId } from '../../services/UserStakeService';\nimport { Reducers } from '../reducers';\nimport { setDataRequestDetailLoading, setDataRequestDetail, setDataRequestsLoading, setDataRequests, setTotalDataRequest, setDataRequestsErrors, setDataRequestAccountStakes } from './dataRequest';\n\nexport function loadDataRequests(page: number) {\n    return async (dispatch: Function, getState: () => Reducers) => {\n        const store = getState();\n        dispatch(setDataRequestsLoading(true));\n\n        const offset = DEFAULT_PAGINATION_LIMIT * page;\n        const result = await getAllDataRequests({\n            limit: DEFAULT_PAGINATION_LIMIT,\n            offset,\n        }, store.dataRequest.dataRequestFilters);\n\n        dispatch(setDataRequests(result.items));\n        dispatch(setTotalDataRequest(result.total));\n        dispatch(setDataRequestsLoading(false));\n    }\n}\n\nexport function unloadDataRequest() {\n    return (dispatch: Function) => {\n        dispatch(setDataRequestDetail(undefined));\n        dispatch(setDataRequestAccountStakes([]));\n    }\n}\n\nexport function loadDataRequestById(id: string) {\n    return async (dispatch: Function) => {\n        dispatch(setDataRequestDetailLoading(true));\n        const accountId = await getLoggedInAccountId();\n        const accountStakesRequest = getUserStakesByRequestId(id, accountId);\n        const dataRequest = await getDataRequestById(id, accountId);\n\n        if (!dataRequest) {\n            setDataRequestsErrors(['404']);\n            return;\n        }\n\n        const accountStakes = await accountStakesRequest;\n        let accountOutcomeStakes: OutcomeStake[] = [];\n\n        if (accountId && accountStakes[accountId]) {\n            accountOutcomeStakes = combineOutcomeStakes(accountStakes[accountId]);\n        }\n\n        dispatch(setDataRequestAccountStakes(accountOutcomeStakes));\n        dispatch(setDataRequestDetail(dataRequest));\n        dispatch(setDataRequestDetailLoading(false));\n    }\n}\n\nexport function stakeDataRequest(dataRequest: DataRequestViewModel, stakeFormValues: StakeFormValues) {\n    return async (dispatch: Function) => {\n        let outcome: Outcome = {\n            type: OutcomeType.Invalid,\n        };\n\n        if (!stakeFormValues.isInvalid) {\n            outcome = {\n                answer: stakeFormValues.answer,\n                type: OutcomeType.Answer,\n            };\n        }\n\n        await stakeWithProvider('near', stakeFormValues.amount, dataRequest, outcome);\n    }\n}\n\nexport function finalizeDataRequest(dataRequest: DataRequestViewModel) {\n    return async (dispatch: Function) => {\n        await finalizeWithProvider('near', dataRequest);\n    }\n}\n\nexport function claimDataRequest(accountId: string, dataRequest: DataRequestViewModel) {\n    return async (dispatch: Function) => {\n        await claimWithProvider('near', accountId, dataRequest);\n    }\n}\n\n//request_id: U64, resolution_round: u16, outcome: Outcome, amount: Balance\nexport function unstakeDataRequest(amount: string, dataRequest: DataRequestViewModel, outcome: Outcome) {\n    return async (dispatch: Function) => {\n        const currentResolutionWindow: ResolutionWindow | undefined = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1] ?? undefined;\n        if (!currentResolutionWindow) return;\n\n        await unstakeWithProvider('near', amount, currentResolutionWindow.round, dataRequest, outcome);\n    }\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport DataRequestDetailHeader from '../../containers/DataRequestDetailHeader';\nimport { claimDataRequest, finalizeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setStakeDialogOpen, setUnstakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function DataRequestDetailHeaderConnector() {\n    const dispatch = useDispatch();\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const accountStakes = useSelector((store: Reducers) => store.dataRequest.accountStakes);\n\n    const handleStakeClick = useCallback(() => {\n        dispatch(setStakeDialogOpen({\n            open: true,\n            dataRequest,\n        }));\n    }, [dispatch, dataRequest]);\n\n    const handleUnstakeClick = useCallback(() => {\n        dispatch(setUnstakeDialogOpen({\n            open: true,\n            dataRequest\n        }));\n    }, [dispatch, dataRequest]);\n\n    const handleFinalizeClick = useCallback(() => {\n        if (!dataRequest) return;\n        dispatch(finalizeDataRequest(dataRequest));\n    }, [dispatch, dataRequest]);\n\n    const handleClaimClick = useCallback(() => {\n        if (!dataRequest || !account) return;\n        dispatch(claimDataRequest(account.accountId, dataRequest));\n    }, [dispatch, dataRequest, account]);\n\n    if (!dataRequest) return null;\n\n    return (\n        <DataRequestDetailHeader\n            dataRequest={dataRequest}\n            onStakeClick={handleStakeClick}\n            onFinalizeClick={handleFinalizeClick}\n            onClaimClick={handleClaimClick}\n            onUnstakeClick={handleUnstakeClick}\n            account={account}\n            accountStakes={accountStakes}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../components/Card';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\n\nimport s from './RequestInfoCard.module.scss';\nimport InformationRows from '../InformationRows';\nimport { formatToken } from '../../utils/tokenUtils';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport { Link } from 'react-router-dom';\nimport { routePaths } from '../../routes';\nimport { prettyFormatDate } from '../../utils/dateUtils';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function RequestInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('requestInfo.title')}</h2>\n                </div>\n                <InformationRows\n                    rows={[{\n                        label: trans('requestInfo.label.requestor'),\n                        value: <Link className={s.link} to={routePaths.account('near', dataRequest.requestor)}>{dataRequest.requestor}</Link>,\n                    }, {\n                        label: trans('requestInfo.label.targetContract'),\n                        value: <Link className={s.link} to={routePaths.account('near', dataRequest.targetContract)}>{dataRequest.requestor}</Link>,\n                    }, {\n                        label: trans('requestInfo.label.dateCreated'),\n                        value: <span>{prettyFormatDate(dataRequest.date)}</span>,\n                    }, {\n                        label: trans('requestInfo.label.settlementTime'),\n                        value: <span>{prettyFormatDate(dataRequest.settlementTime)}</span>,\n                    }, {\n                        label: trans('requestInfo.label.config'),\n                        value: <Link className={s.link} to={routePaths.config('near', dataRequest.config.id)}>{dataRequest.config.id}</Link>,\n                    }, {\n                        label: trans('requestInfo.label.finalArbitratorTriggered'),\n                        value: <span>{dataRequest.finalArbitratorTriggered + ''}</span>,\n                    }, {\n                        label: trans('requestInfo.label.feeReward'),\n                        value: <span>{formatToken(dataRequest.fee)} {trans('global.token.symbol')}</span>,\n                    }, {\n                        label: trans('requestInfo.label.totalStaked'),\n                        value: <span>{`${formatToken(dataRequest.totalStaked)} ${trans('global.token.symbol')}`}</span>,\n                    }, {\n                        label: trans('requestInfo.label.tags'),\n                        value: <span>{dataRequest.tags.length ? dataRequest.tags.map(t => `\"${t}\"`).join(', ') : trans('requestInfo.label.noTags')}</span>\n                    }, {\n                        label: trans('requestInfo.label.finalizedOutcome'),\n                        value: <span>{dataRequest.finalized_outcome ? transfromOutcomeToString(dataRequest.finalized_outcome) : 'null'}</span>,\n                    }]}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport RequestInfoCard from '../../containers/RequestInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function RequestInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <RequestInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import React, { ReactElement } from 'react';\nimport classnames from 'classnames';\nimport Switch from '@material-ui/core/Switch';\n\nimport s from './OptionSwitch.module.scss';\n\ninterface Props {\n    className?: string;\n    label: string,\n    labelA: string;\n    labelB: string;\n    onChange?: (checked: boolean) => void;\n    value?: boolean;\n}\n\nexport default function OptionSwitch({\n    label,\n    labelA,\n    labelB,\n    onChange = () => {},\n    value,\n    className = '',\n}: Props): ReactElement {\n    return (\n        <span className={classnames(s.root, className)}>\n            <span>{label}</span>\n            <div className={s.options}>\n                <span>{labelA}</span>\n                <Switch\n                    value={value}\n                    classes={{\n                        thumb: s.thumb,\n                        track: s.track,\n                        switchBase: s.switchBase,\n                    }}\n                    onChange={(_, checked) => onChange(checked)}\n                />\n                <span>{labelB}</span>\n            </div>\n        </span>\n    );\n}\n","import React, { ChangeEvent } from 'react';\nimport { default as MuiSelect } from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport s from './Select.module.scss';\n\n\nexport interface SelectItem {\n    name: string;\n    value: string;\n}\n\ninterface Props {\n    id: string;\n    items: SelectItem[];\n    value: string;\n    label?: string;\n    onChange?: (value: string) => void;\n}\n\nexport default function Select({\n    items,\n    value,\n    label,\n    id,\n    onChange = () => {},\n}: Props) {\n    function handleChange(event: ChangeEvent<{ name?: string, value: unknown }>) {\n        onChange(event.target.value as string);\n    }\n\n    return (\n        <div>\n            <InputLabel id={id}>{label}</InputLabel>\n            <MuiSelect\n                value={value}\n                labelId={id}\n                className={s.select}\n                onChange={handleChange}\n            >\n                {items.map(item => (\n                    <MenuItem key={item.value} value={item.value}>{item.name}</MenuItem>\n                ))}\n            </MuiSelect>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport Input from '../../components/Input';\nimport OptionSwitch from '../../components/OptionSwitch/OptionSwitch';\nimport Select from '../../components/Select';\nimport Dialog from '../../compositions/Dialog';\nimport { Account } from '../../models/Account';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport trans from '../../translation/trans';\nimport { toToken } from '../../utils/tokenUtils';\nimport createDefaultStakeFormValues, { StakeFormValues } from './services/createDefaultStakeFormValues';\nimport validateStakeFormValues from './services/validateStakeFormValues';\n\nimport s from './StakeDialog.module.scss';\n\ninterface Props {\n    onRequestClose: () => void;\n    onSubmit: (formValues: StakeFormValues) => void;\n    open: boolean;\n    account: Account;\n    dataRequest: DataRequestViewModel;\n}\n\nexport default function StakeDialog({\n    onRequestClose,\n    onSubmit,\n    open,\n    account,\n    dataRequest,\n}: Props) {\n    const [formValues, setFormValues] = useState(createDefaultStakeFormValues(dataRequest));\n\n    function handleValidityChange(isInvalid: boolean) {\n        setFormValues({\n            ...formValues,\n            isInvalid,\n        });\n    }\n\n    function handleAnswerChange(answer: string) {\n        setFormValues({\n            ...formValues,\n            answer,\n        });\n    }\n\n    function handleStakeChange(amount: string) {\n        setFormValues({\n            ...formValues,\n            amount: amount ? toToken(amount) : '0',\n            amountFormatted: amount ? amount : '',\n        });\n    }\n\n    const errors = validateStakeFormValues(formValues, account, dataRequest);\n\n    return (\n        <Dialog\n            open={open}\n            onRequestClose={onRequestClose}\n            onSubmitClick={() => onSubmit(formValues)}\n            title={trans('stakeDialog.title')}\n            canSubmit={errors.canSubmit}\n        >\n            <form className={s.form}>\n                <div className={s.formItem}>\n                    <OptionSwitch\n                        label={trans('stakeDialog.label.validity')}\n                        labelA={trans('stakeDialog.label.valid')}\n                        labelB={trans('stakeDialog.label.invalid')}\n                        className={s.formInput}\n                        value={formValues.isInvalid}\n                        onChange={handleValidityChange}\n                    />\n                </div>\n\n                {!formValues.isInvalid && dataRequest.outcomes && (\n                    <div className={s.formItem}>\n                        <Select\n                            id=\"stake_dialog_outcome\"\n                            value={formValues.answer}\n                            label={trans('stakeDialog.label.answer')}\n                            onChange={handleAnswerChange}\n                            items={dataRequest.outcomes.map(outcome => ({\n                                name: outcome,\n                                value: outcome,\n                            }))}\n                        />\n                    </div>\n                )}\n\n                {!formValues.isInvalid && !dataRequest.outcomes && (\n                    <div className={s.formItem}>\n                        <Input\n                            label={trans('stakeDialog.label.answer')}\n                            className={s.formInput}\n                            value={formValues.answer}\n                            error={errors.answer}\n                            onChange={handleAnswerChange}\n                            type={dataRequest.data_type === 'Number' ? 'number' : 'text'}\n                        />\n                    </div>\n                )}\n                <div className={s.formItem}>\n                    <Input\n                        label={trans('stakeDialog.label.stakeAmount', { tokenSymbol: trans('global.token.symbol') })}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleStakeChange}\n                        type=\"number\"\n                        error={errors.amount}\n                    />\n                </div>\n                {errors.message && (<div className={s.error}>{errors.message}</div>)}\n            </form>\n        </Dialog>\n    );\n}\n","import { DataRequestViewModel } from \"../../../models/DataRequest\";\n\nexport interface StakeFormValues {\n    amount: string;\n    amountFormatted: string;\n    isInvalid: boolean;\n    answer: string;\n}\n\nexport default function createDefaultStakeFormValues(dataRequest: DataRequestViewModel): StakeFormValues {\n    return {\n        amount: '0',\n        amountFormatted: '0',\n        isInvalid: false,\n        answer: dataRequest.outcomes ? dataRequest.outcomes[0] : '',\n    };\n}\n","import Big from 'big.js';\nimport { Account } from '../../../models/Account';\nimport { DataRequestViewModel } from '../../../models/DataRequest';\nimport { OutcomeType } from '../../../models/DataRequestOutcome';\nimport trans from '../../../translation/trans';\nimport { StakeFormValues } from './createDefaultStakeFormValues';\n\ninterface StakeFormErrors {\n    amount: string;\n    answer: string;\n    message: string;\n    canSubmit: boolean;\n}\n\nexport default function validateStakeFormValues(formValues: StakeFormValues, account: Account, dataRequest: DataRequestViewModel): StakeFormErrors {\n    const errors: StakeFormErrors = {\n        amount: '',\n        answer: '',\n        message: '',\n        canSubmit: true,\n    };\n\n    const accountBalance = new Big(account.balance);\n\n    if (!formValues.isInvalid) {\n        if (!formValues.answer) {\n            errors.canSubmit = false;\n        }\n\n        if (dataRequest.outcomes && dataRequest.outcomes.length) {\n            if (!dataRequest.outcomes.includes(formValues.answer)) {\n                errors.answer = trans('stakeDialog.errors.mustBeAnOutcome');\n                errors.canSubmit = false;\n            }\n        }\n    }\n\n    if (accountBalance.lt(formValues.amount)) {\n        errors.amount = trans('stakeDialog.errors.notEnoughBalance')\n        errors.canSubmit = false;\n    }\n\n    if (new Big(formValues.amount).lte(0)) {\n        errors.canSubmit = false;\n    }\n\n    // You cannot stake on the same bonded outcome as the previous outcome\n    const currentRound = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1];\n    if (currentRound && currentRound.round !== 0) {\n        const previousRound = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 2];\n\n        if (previousRound?.bondedOutcome?.type === OutcomeType.Invalid && formValues.isInvalid) {\n            errors.canSubmit = false;\n            errors.message = trans('stakeDialog.errors.sameAnswerAsPreviousRound');\n        }\n\n        if (previousRound?.bondedOutcome?.type === OutcomeType.Answer && previousRound.bondedOutcome.answer === formValues.answer) {\n            errors.canSubmit = false;\n            errors.message = trans('stakeDialog.errors.sameAnswerAsPreviousRound');\n        }\n    }\n\n    return errors;\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport StakeDialog from '../../containers/StakeDialog';\nimport { StakeFormValues } from '../../containers/StakeDialog/services/createDefaultStakeFormValues';\nimport { stakeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setStakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\nexport default function StakeDialogConnector() {\n    const dispatch = useDispatch();\n    const open = useSelector((store: Reducers) => store.dialogs.stakeDialog.open);\n    const account = useSelector((store: Reducers) => store.account.account);\n    const dataRequest = useSelector((store: Reducers) => store.dialogs.stakeDialog.dataRequest);\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setStakeDialogOpen({\n            open: false,\n            dataRequest: undefined,\n        }));\n    }, [dispatch]);\n\n    const handleSubmit = useCallback((formValues: StakeFormValues) => {\n        if (!dataRequest) return;\n\n        dispatch(stakeDataRequest(dataRequest, formValues))\n    }, [dispatch, dataRequest]);\n\n    if (!account || !dataRequest) return null;\n\n    return (\n        <StakeDialog\n            open={open}\n            onRequestClose={handleRequestClose}\n            onSubmit={handleSubmit}\n            account={account}\n            dataRequest={dataRequest}\n        />\n    );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { ResolutionWindow } from '../../../../models/ResolutionWindow';\nimport trans from '../../../../translation/trans';\nimport { formatToken } from '../../../../utils/tokenUtils';\n\nimport s from './StakerReport.module.scss';\nimport { OutcomeType } from '../../../../models/DataRequestOutcome';\nimport { Link } from 'react-router-dom';\nimport { routePaths } from '../../../../routes';\n\nexport interface Props {\n    userStakes: ResolutionWindow['userStakes'];\n}\n\nexport default function StakerReport({\n    userStakes\n}: Props) {\n    return (\n        <div className={s.stakerReport}>\n            <TableContainer className={s.container} component={Paper}>\n                <Table className={s.table}>\n                    <TableHead className={s.tableHead}>\n                        <TableRow>\n                            <TableCell>{trans('stakeReport.table.label.accountId')}</TableCell>\n                            <TableCell>{trans('stakeReport.table.label.outcome')}</TableCell>\n                            <TableCell>{trans('stakeReport.table.label.stake')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {Object.keys(userStakes).map((accountId, index) => {\n                            const outcomeInfo = userStakes[accountId][0];\n\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell>\n                                        <Link className={s.link} to={routePaths.account('near', accountId)}>{accountId}</Link>\n                                    </TableCell>\n                                    <TableCell>\n                                        {outcomeInfo.outcome.type === OutcomeType.Answer && (\n                                            <span>\"{outcomeInfo.outcome.answer}\"</span>\n                                        )}\n\n                                        {outcomeInfo.outcome.type === OutcomeType.Invalid && (\n                                            <span>{trans('stakerReport.label.invalid')}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {formatToken(outcomeInfo.stake, 18)} {trans('global.token.symbol')}\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    );\n}\n","import React from 'react';\nimport Accordion from '@material-ui/core/Accordion';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Big from 'big.js';\n\nimport { ResolutionWindow } from '../../models/ResolutionWindow';\nimport trans from '../../translation/trans';\nimport StakerReport from './components/StakerReport/StakerReport';\nimport InformationRows from '../InformationRows';\nimport { prettyFormatDate } from '../../utils/dateUtils';\nimport { formatToken } from '../../utils/tokenUtils';\nimport OutcomeStakeInfo from './components/OutcomeStakeInfo/OutcomeStakeInfo';\n\nimport s from './ResolutionWindowAccordion.module.scss';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport Countdown from '../../compositions/Countdown';\nimport { useState } from 'react';\n\ninterface Props {\n    resolutionWindow: ResolutionWindow;\n    defaultExpanded?: boolean;\n}\n\nexport default function ResolutionWindowAccordion({\n    resolutionWindow,\n    defaultExpanded,\n}: Props) {\n    const now = new Date();\n    const [isWindowClosed, setWindowClosed] = useState(resolutionWindow.endTime.getTime() <= now.getTime());\n    const percentageFilled = resolutionWindow.winningOutcomeStake ? new Big(resolutionWindow.winningOutcomeStake.stake).div(resolutionWindow.bondSize).mul(100).toString() : '0';\n\n    return (\n        <Accordion className={s.accordion} defaultExpanded={defaultExpanded}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <span className={s.roundTitle}>{trans('resolutionWindow.round', { round: resolutionWindow.round.toString() })}</span>\n                <span>{resolutionWindow.bondedOutcome ? transfromOutcomeToString(resolutionWindow.bondedOutcome) : ''}</span>\n\n                {!isWindowClosed && (\n                    <span>\n                        {trans('resolutionWindow.label.closesIn')}\n                        <Countdown\n                            date={resolutionWindow.endTime}\n                            onComplete={() => setWindowClosed(true)}\n                        />\n                    </span>\n                )}\n            </AccordionSummary>\n            <AccordionDetails className={s.details}>\n                <InformationRows\n                    rows={[\n                        {\n                            label: trans('resolutionWindowAccordion.label.endTime'),\n                            value: <span>{prettyFormatDate(resolutionWindow.endTime)}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.bondSize'),\n                            value: <span>{`${formatToken(resolutionWindow.bondSize)} ${trans('global.token.symbol')}`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.totalStaked'),\n                            value: <span>{`${formatToken(resolutionWindow.totalStaked)} ${trans('global.token.symbol')}`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.percentageFilled'),\n                            value: <span>{`${percentageFilled}%`}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.winningOutcome'),\n                            value: <span>{resolutionWindow.winningOutcomeStake ? transfromOutcomeToString(resolutionWindow.winningOutcomeStake.outcome) : ''}</span>,\n                        },\n                        {\n                            label: trans('resolutionWindowAccordion.label.bondedOutcome'),\n                            value: <span>{resolutionWindow.bondedOutcome ? transfromOutcomeToString(resolutionWindow.bondedOutcome) : ''}</span>,\n                        }\n                    ]}\n                />\n                <h3>{trans('resolutionWindowAccordion.outcomeStakes.title')}</h3>\n                <OutcomeStakeInfo outcomeStakes={resolutionWindow.outcomeStakes} />\n                <h3>{trans('resolutionWindowAccordion.stakerReports.title')}</h3>\n                <StakerReport userStakes={resolutionWindow.userStakes} />\n            </AccordionDetails>\n        </Accordion>\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport Card from '../../components/Card';\nimport trans from '../../translation/trans';\n\nimport s from './ResolutionWindowInfoCard.module.scss';\nimport ResolutionWindowAccordion from '../ResolutionWindowAccordion';\n\ninterface Props {\n    dataRequest: DataRequestViewModel;\n    className?: string;\n}\n\nexport default function ResolutionWindowInfoCard({\n    dataRequest,\n    className,\n}: Props) {\n    const resolutionWindows = dataRequest.resolutionWindows.slice().reverse();\n\n    return (\n        <Card className={className}>\n            <CardContent>\n                <div className={s.titleWrapper}>\n                    <h2 className={s.title}>{trans('stakerReportsInfo.title')}</h2>\n                </div>\n                <div>\n                    {resolutionWindows.map((resolutionWindow, index) => {\n                        return (\n                            <ResolutionWindowAccordion\n                                resolutionWindow={resolutionWindow}\n                                defaultExpanded={index === 0}\n                                key={resolutionWindow.round}\n                            />\n                        );\n                    })}\n                </div>\n                {resolutionWindows.length === 0 && (\n                    <div className={s.noWindows}>\n                        {trans('stakerReportsInfo.noWindows')}\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport StakerAnswersInfoCard from '../../containers/StakersReportInfoCard';\nimport { Reducers } from '../../redux/reducers';\n\ninterface Props {\n    className?: string;\n}\n\nexport default function ResolutionWindowsInfoConnector({\n    className,\n}: Props) {\n    const dataRequest = useSelector((store: Reducers) => store.dataRequest.dataRequestDetail);\n\n    if (!dataRequest) {\n        return null;\n    }\n\n    return (\n        <StakerAnswersInfoCard\n            dataRequest={dataRequest}\n            className={className}\n        />\n    );\n}\n","import React, { useState } from 'react';\nimport Select from '../../components/Select';\nimport Dialog from '../../compositions/Dialog';\nimport NumberInput from '../../compositions/NumberInput';\nimport { DataRequestViewModel } from '../../models/DataRequest';\nimport { transfromOutcomeToString } from '../../models/DataRequestOutcome';\nimport { OutcomeStake } from '../../models/OutcomeStake';\nimport { ResolutionWindow } from '../../models/ResolutionWindow';\nimport trans from '../../translation/trans';\nimport { formatToken, toToken } from '../../utils/tokenUtils';\nimport { UnstakeFormValues, createDefaultUnstakeFormValues } from './services/createDefaultUnstakeFormValues';\nimport validateUnstakeFormValues from './services/validateUnstakeFormValues';\n\nimport s from './UnstakeDialog.module.scss';\n\ninterface Props {\n    onRequestClose: () => void;\n    onSubmit: (formValues: UnstakeFormValues) => void;\n    open: boolean;\n    accountStakes: OutcomeStake[];\n    dataRequest: DataRequestViewModel;\n}\n\n\nexport default function UnstakeDialog({\n    accountStakes,\n    dataRequest,\n    onRequestClose,\n    onSubmit,\n    open,\n}: Props) {\n    const currentResolutionWindow: ResolutionWindow | undefined = dataRequest.resolutionWindows[dataRequest.resolutionWindows.length - 1] ?? undefined;\n    const roundStakes = accountStakes.filter(stake => stake.round === currentResolutionWindow.round);\n\n    const [formValues, setFormValues] = useState(createDefaultUnstakeFormValues());\n\n    function handleStakeChange(amount: string) {\n        setFormValues({\n            ...formValues,\n            amount: amount ? toToken(amount) : '0',\n            amountFormatted: amount ? amount : '',\n        });\n    }\n\n    function handleMaxClick() {\n        const selectedOutcomeStake = roundStakes[formValues.outcomeIndex];\n\n        setFormValues({\n            ...formValues,\n            amount: selectedOutcomeStake.stake,\n            amountFormatted: formatToken(selectedOutcomeStake.stake),\n        });\n    }\n\n    function handleOutcomeChange(outcomeIndex: string) {\n        setFormValues({\n            ...formValues,\n            outcomeIndex: Number(outcomeIndex),\n        });\n    }\n\n    const errors = validateUnstakeFormValues(formValues, roundStakes);\n\n    return (\n        <Dialog\n            open={open}\n            onRequestClose={onRequestClose}\n            onSubmitClick={() => onSubmit({\n                ...formValues,\n                outcome: roundStakes[formValues.outcomeIndex].outcome,\n            })}\n            title={trans('unstakeDialog.title')}\n            canSubmit={errors.canSubmit}\n        >\n            <form>\n                <div className={s.formItem}>\n                    <Select\n                        id=\"unstake_dialog_outcome\"\n                        value={formValues.outcomeIndex.toString()}\n                        label={trans('unstakeDialog.label.answer')}\n                        onChange={handleOutcomeChange}\n                        items={roundStakes.map((stake, index) => ({\n                            name: transfromOutcomeToString(stake.outcome),\n                            value: index.toString(),\n                        }))}\n                    />\n                </div>\n                <div className={s.formItem}>\n                    {trans('unstakeDialog.label.staked', {\n                        stake: formatToken(roundStakes[formValues.outcomeIndex].stake),\n                        tokenSymbol: trans('global.token.symbol'),\n                    })}\n                </div>\n                <div className={s.formItem}>\n                    <NumberInput\n                        label={trans('unstakeDialog.label.stakeAmount', { tokenSymbol: trans('global.token.symbol') })}\n                        className={s.formInput}\n                        value={formValues.amountFormatted}\n                        onChange={handleStakeChange}\n                        onMaxClick={handleMaxClick}\n                        showMax\n                        error={errors.amount}\n                    />\n                </div>\n            </form>\n        </Dialog>\n    );\n}\n","import { Outcome, OutcomeType } from \"../../../models/DataRequestOutcome\";\n\nexport interface UnstakeFormValues {\n    outcome: Outcome;\n    outcomeIndex: number;\n    amount: string;\n    amountFormatted: string;\n}\n\nexport function createDefaultUnstakeFormValues(): UnstakeFormValues {\n    return {\n        outcome: {\n            type: OutcomeType.Invalid,\n        },\n        amount: '',\n        amountFormatted: '',\n        outcomeIndex: 0,\n    };\n}\n","import Big from \"big.js\";\nimport { OutcomeStake } from \"../../../models/OutcomeStake\";\nimport trans from \"../../../translation/trans\";\nimport { UnstakeFormValues } from \"./createDefaultUnstakeFormValues\";\n\ninterface UnstakeFormErrors {\n    canSubmit: boolean;\n    amount: string;\n}\n\nexport default function validateUnstakeFormValues(formValues: UnstakeFormValues, roundStakes: OutcomeStake[]): UnstakeFormErrors {\n    const errors: UnstakeFormErrors = {\n        canSubmit: true,\n        amount: '',\n    };\n\n    const roundStake = roundStakes[formValues.outcomeIndex];\n\n    if (formValues.amount) {\n        const amount = new Big(formValues.amount);\n\n        if (amount.lte(0)) {\n            errors.canSubmit = false;\n        }\n\n        if (amount.gt(roundStake.stake)) {\n            errors.canSubmit = false;\n            errors.amount = trans('unstakeDialog.errors.notEnoughStaked');\n        }\n    } else {\n        errors.canSubmit = false;\n    }\n\n    return errors;\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport UnstakeDialog from '../../containers/UnstakeDialog';\nimport { UnstakeFormValues } from '../../containers/UnstakeDialog/services/createDefaultUnstakeFormValues';\nimport { unstakeDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { setUnstakeDialogOpen } from '../../redux/dialogs/dialogs';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function UnstakeDialogConnector() {\n    const dispatch = useDispatch();\n    const open = useSelector((store: Reducers) => store.dialogs.unstakeDialog.open);\n    const accountStakes = useSelector((store: Reducers) => store.dataRequest.accountStakes);\n    const dataRequest = useSelector((store: Reducers) => store.dialogs.unstakeDialog.dataRequest);\n\n    const handleRequestClose = useCallback(() => {\n        dispatch(setUnstakeDialogOpen({\n            open: false,\n            dataRequest: undefined,\n        }));\n    }, [dispatch]);\n\n    const handleSubmit = useCallback((formValues: UnstakeFormValues) => {\n        if (!dataRequest) return;\n\n        dispatch(unstakeDataRequest(formValues.amount, dataRequest, formValues.outcome));\n    }, [dispatch, dataRequest]);\n\n    if (!dataRequest) return null;\n\n    return (\n        <UnstakeDialog\n            onRequestClose={handleRequestClose}\n            open={open}\n            dataRequest={dataRequest}\n            accountStakes={accountStakes}\n            onSubmit={handleSubmit}\n        />\n    );\n}\n","import React, { useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { Reducers } from '../../redux/reducers';\nimport { routePaths } from '../../routes';\n\ninterface Props {\n    page: number;\n}\n\nexport default function DataRequestsOverviewConnector({\n    page,\n}: Props) {\n    const history = useHistory();\n    const dataRequests = useSelector((store: Reducers) => store.dataRequest.dataRequests);\n    const totalItems = useSelector((store: Reducers) => store.dataRequest.totalDataRequests);\n\n    const handleRequestPageChange = useCallback((page: number) => {\n        history.push({\n            pathname: routePaths.dataRequests(page.toString()),\n            search: history.location.search,\n        });\n    }, [history]);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={dataRequests}\n            page={page}\n            totalItems={totalItems}\n            onRequestPageChange={handleRequestPageChange}\n        />\n    );\n}\n","import React from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { default as MuiCheckbox } from '@material-ui/core/Checkbox';\n\nimport s from './Checkbox.module.scss';\n\ninterface Props {\n    checked: boolean;\n    onChange: (checked: boolean) => void;\n    label: string;\n}\n\nexport default function Checkbox({\n    checked,\n    label,\n    onChange,\n}: Props) {\n    return (\n        <FormControlLabel\n            control={\n                <MuiCheckbox\n                    checked={checked}\n                    onChange={(e) => onChange(e.target.checked)}\n                    classes={{\n                        checked: s.checked\n                    }}\n                />\n            }\n            label={label}\n        />\n    );\n}\n","import React from 'react';\nimport Checkbox from '../../components/Checkbox';\nimport trans from '../../translation/trans';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\nimport s from './DataRequestsOverviewFilters.module.scss';\ninterface Props {\n    totalRequests: string;\n    filters: DataRequestFilters;\n    onFilterChange: (filters: DataRequestFilters) => void;\n}\n\nexport default function DataRequestsOverviewFilters({\n    totalRequests,\n    filters,\n    onFilterChange,\n}: Props) {\n\n    function handleArbitratorCheckboxClick(checked: boolean) {\n        onFilterChange({\n            ...filters,\n            onlyArbitratorRequests: checked,\n        });\n    }\n\n    return (\n        <div>\n            <h1>{trans('dataRequests.title')}</h1>\n            <div className={s.wrapper}>\n                <span className={s.subtitle}>{trans('dataRequest.subtitle', { total: totalRequests })}</span>\n                <Checkbox\n                    label={trans('dataRequestFilters.label.arbitrator')}\n                    checked={filters.onlyArbitratorRequests}\n                    onChange={handleArbitratorCheckboxClick}\n                />\n            </div>\n        </div>\n    );\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router';\nimport DataRequestsOverviewFilters from '../../containers/DataRequestsOverviewFilters';\nimport { setDataRequestFilters } from '../../redux/dataRequest/dataRequest';\nimport { loadDataRequests } from '../../redux/dataRequest/dataRequestAction';\nimport { Reducers } from '../../redux/reducers';\nimport { routePaths } from '../../routes';\nimport { DataRequestFilters } from '../../services/DataRequestService';\n\ninterface Params {\n    page: string;\n}\n\nexport default function DataRequestsOverviewFiltersConnector() {\n    const dispatch = useDispatch();\n    const totalRequests = useSelector((store: Reducers) => store.dataRequest.totalDataRequests);\n    const params = useParams<Params>();\n    const history = useHistory();\n    const urlParams = new URLSearchParams(history.location.search);\n    const filters: DataRequestFilters = {\n        onlyArbitratorRequests: urlParams.get('onlyArbitratorRequests') === 'true',\n    };\n\n    function onFilterChange(filters: DataRequestFilters) {\n        const url = new URLSearchParams();\n        url.append('onlyArbitratorRequests', '' + filters.onlyArbitratorRequests);\n\n        history.replace({\n            pathname: routePaths.dataRequests(params.page),\n            search: url.toString(),\n        });\n    }\n\n    useEffect(() => {\n        dispatch(setDataRequestFilters(filters));\n        dispatch(loadDataRequests(Number(params.page)));\n    }, [urlParams.toString(), dispatch, params]);\n\n    return (\n        <DataRequestsOverviewFilters\n            totalRequests={totalRequests.toString()}\n            filters={filters}\n            onFilterChange={onFilterChange}\n        />\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport DataRequestsOverview from '../../containers/DataRequestsOverview';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function HomeDataRequestsConnector() {\n    const latestRequests = useSelector((store: Reducers) => store.stats.latestRequests);\n\n    return (\n        <DataRequestsOverview\n            dataRequests={latestRequests}\n            page={0}\n            totalItems={latestRequests.length}\n            onRequestPageChange={() => {}}\n            showPagination={false}\n        />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '../../components/Card';\nimport SearchConnector from '../../connectors/SearchConnector';\nimport trans from '../../translation/trans';\n\nimport s from './HomeHeader.module.scss';\n\nexport default function HomeHeader() {\n    return (\n        <Card>\n            <CardContent>\n                <h1 className={s.title}>{trans('homeHeader.title')}</h1>\n                <SearchConnector inputClassName={s.searchInput} className={s.search} />\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport HomeHeader from '../../containers/HomeHeader';\n\n\nexport default function HomeHeaderConnector() {\n    return (\n        <HomeHeader />\n    );\n}\n","import React from 'react';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Card from '../../../../components/Card';\n\nimport s from './StatCard.module.scss';\n\ninterface Props {\n    label: string;\n    value: string;\n}\n\nexport default function StatCard({\n    label,\n    value,\n}: Props) {\n    return (\n        <Card className={s.card}>\n            <CardContent>\n                <h2 className={s.statLabel}>{label}</h2>\n                <span className={s.statValue}>{value}</span>\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport millify from 'millify';\n\nimport s from './OracleStats.module.scss';\nimport trans from '../../translation/trans';\nimport StatCard from './components/StatCard/StatCard';\n\ninterface Props {\n    totalRequests: string;\n    tokenPrice: number;\n    tokenMarketCap: number;\n}\n\nexport default function OracleStats({\n    totalRequests,\n    tokenMarketCap,\n    tokenPrice,\n}: Props) {\n    const marketCapFormatted = millify(tokenMarketCap);\n\n    return (\n        <div className={s.root}>\n            <StatCard\n                label={trans('oracleStats.label.totalRequests')}\n                value={totalRequests}\n            />\n            <StatCard\n                label={trans('oracleStats.label.tokenPrice', { tokenSymbol: trans('global.token.symbol') })}\n                value={`$${tokenPrice}`}\n            />\n            <StatCard\n                label={trans('oracleStats.label.tokenMarketCap')}\n                value={`$${marketCapFormatted}`}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport OracleStats from '../../containers/OracleStats';\nimport { Reducers } from '../../redux/reducers';\n\n\nexport default function OracleStatsConnector() {\n    const totalRequests = useSelector((store: Reducers) => store.stats.totalRequests);\n    const tokenPrice = useSelector((store: Reducers) => store.stats.tokenPrice);\n    const tokenMarketCap = useSelector((store: Reducers) => store.stats.tokenMarketCap);\n\n    return (\n        <OracleStats\n            totalRequests={totalRequests}\n            tokenMarketCap={tokenMarketCap}\n            tokenPrice={tokenPrice}\n        />\n    );\n}\n","import { COINGECKO_API_URL } from '../config';\n\nexport interface TokenMarketInfoResponse {\n    price: number;\n    marketCap: number;\n}\n\nexport async function getTokenMarketInfoByTicker(ticker: string, currency = 'usd'): Promise<TokenMarketInfoResponse> {\n    try {\n        const response = await fetch(`${COINGECKO_API_URL}/coins/${ticker}?localization=false`);\n        const data = await response.json();\n\n        return {\n            price: data.market_data.current_price[currency],\n            marketCap: data.market_data.market_cap[currency],\n        };\n    } catch (error) {\n        console.error('[getTokenMarketInfoByTicker]', error);\n\n        return {\n            marketCap: 0,\n            price: 0,\n        };\n    }\n}\n\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { DataRequestListItem } from '../../models/DataRequest';\n\nexport type StatsState = Readonly<{\n    totalRequests: string;\n    tokenPrice: number;\n    tokenMarketCap: number;\n    latestRequests: DataRequestListItem[];\n}>;\n\nconst initialState: StatsState = {\n    totalRequests: '0',\n    tokenPrice: 0,\n    tokenMarketCap: 0,\n    latestRequests: [],\n};\n\nconst statsSlice = createSlice({\n    initialState,\n    name: 'stats',\n    reducers: {\n        setTotalRequestsStat(state: StatsState, action: PayloadAction<string>): StatsState {\n            return ({\n                ...state,\n                totalRequests: action.payload,\n            });\n        },\n\n        setTokenPriceStat(state: StatsState, action: PayloadAction<number>): StatsState {\n            return ({\n                ...state,\n                tokenPrice: action.payload,\n            });\n        },\n\n        setTokenMarketCapStat(state: StatsState, action: PayloadAction<number>): StatsState {\n            return ({\n                ...state,\n                tokenMarketCap: action.payload,\n            });\n        },\n\n        setLatestRequestsStat(state: StatsState, action: PayloadAction<DataRequestListItem[]>): StatsState {\n            return ({\n                ...state,\n                latestRequests: action.payload,\n            });\n        },\n    },\n});\n\nexport const {\n    setTokenMarketCapStat,\n    setTokenPriceStat,\n    setTotalRequestsStat,\n    setLatestRequestsStat,\n} = statsSlice.actions;\n\nexport default statsSlice.reducer;\n","import { COINGECKO_TOKEN_TICKER } from \"../../config\";\nimport { getTokenMarketInfoByTicker } from \"../../services/DashboardService\";\nimport { getAllDataRequests } from \"../../services/DataRequestService\"\nimport cache from \"../../utils/cache\";\nimport { setLatestRequestsStat, setTokenMarketCapStat, setTokenPriceStat, setTotalRequestsStat } from \"./stats\";\n\nexport function loadStats() {\n    return async (dispatch: Function) => {\n        getAllDataRequests({\n            limit: 10,\n            offset: 0,\n        }, { onlyArbitratorRequests: false }).then((result) => {\n            dispatch(setTotalRequestsStat(result.total.toString()));\n            dispatch(setLatestRequestsStat(result.items));\n        });\n\n        cache('flx_token_price', async () => {\n            return getTokenMarketInfoByTicker(COINGECKO_TOKEN_TICKER);\n        }, 10000).then((result) => {\n            dispatch(setTokenPriceStat(result.price));\n            dispatch(setTokenMarketCapStat(result.marketCap));\n        });\n    }\n}\n","import { ComponentType } from 'react';\nimport AccountPage from './pages/AccountPage';\nimport ConfigPage from './pages/ConfigPage';\nimport DataRequestDetailPage from './pages/DataRequestDetailPage';\nimport DataRequestsPage from './pages/DataRequestsPage';\nimport HomePage from './pages/HomePage';\nimport SearchResultPage from './pages/SearchResultPage';\nimport trans from './translation/trans';\n\ninterface RouteProps {\n    component: ComponentType;\n    exact: boolean;\n    path: string;\n    navPath: string;\n    inNavigation: boolean;\n    key: string;\n    label: string;\n    icon?: string;\n}\n\nexport const routePaths = {\n    root: () => '/',\n\n    account: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}`,\n    accountRequests: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}/requests`,\n    accountUnclaimed: (provider = ':provider', accountId = ':accountId') => `/account/${provider}/${accountId}/unclaimed`,\n\n    config: (provider = ':provider', id = ':id') => `/config/${provider}/${id}`,\n\n    search: (query = ':query') => `/search/${query}`,\n\n    dataRequests: (page = ':page') => `/requests/${page}`,\n    dataRequestDetail: (provider = ':provider', id = ':id') => `/request/${provider}/${id}`,\n}\n\nexport const routes: RouteProps[] = [\n    {\n        component: HomePage,\n        exact: true,\n        inNavigation: true,\n        key: 'home',\n        label: trans('routes.label.home'),\n        path: routePaths.root(),\n        navPath: routePaths.root(),\n    },\n    {\n        component: SearchResultPage,\n        exact: true,\n        inNavigation: false,\n        key: 'search',\n        label: trans('routes.label.search'),\n        path: routePaths.search(),\n        navPath: routePaths.search(),\n    },\n    {\n        component: AccountPage,\n        exact: false,\n        inNavigation: false,\n        key: 'account',\n        label: trans('routes.label.account'),\n        path: routePaths.account(),\n        navPath: routePaths.account(),\n    },\n    {\n        component: DataRequestDetailPage,\n        exact: false,\n        inNavigation: false,\n        key: 'data-request-detail',\n        label: 'Data request detail',\n        path: routePaths.dataRequestDetail(),\n        navPath: routePaths.dataRequestDetail(),\n    },\n    {\n        component: DataRequestsPage,\n        exact: true,\n        inNavigation: true,\n        key: 'data-requests',\n        label: trans('routes.label.dataRequests'),\n        path: routePaths.dataRequests(),\n        navPath: routePaths.dataRequests('0'),\n    },\n    {\n        component: ConfigPage,\n        exact: true,\n        inNavigation: false,\n        key: 'config-detail',\n        label: trans('routes.label.config'),\n        path: routePaths.config(),\n        navPath: routePaths.config(),\n    },\n];\n","import useInterval from '@use-it/interval';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HOME_REFRESH_INTERVAL } from '../../config';\nimport HomeDataRequestsConnector from '../../connectors/HomeDataRequestsConnector';\nimport HomeHeaderConnector from '../../connectors/HomeHeaderConnector';\nimport OracleStatsConnector from '../../connectors/OracleStatsConnector';\n\nimport Page from '../../containers/Page';\nimport { loadStats } from '../../redux/stats/statsActions';\nimport trans from '../../translation/trans';\n\n\nexport default function HomePage() {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(loadStats());\n    }, [dispatch]);\n\n    useInterval(() => {\n        dispatch(loadStats());\n    }, HOME_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <HomeHeaderConnector />\n            <OracleStatsConnector />\n            <h2>{trans('homePage.title.latestRequests')}</h2>\n            <HomeDataRequestsConnector />\n        </Page>\n    );\n}\n","import React from 'react';\nimport { useParams } from 'react-router';\n\nimport Page from '../../containers/Page';\nimport trans from '../../translation/trans';\n\nimport s from './SearchResultPage.module.scss';\n\ninterface Params {\n    query: string;\n}\n\nexport default function SearchResultPage() {\n    const params = useParams<Params>();\n\n    return (\n        <Page>\n            <div>\n                <h1 className={s.title}>{trans('searchResultPage.title', { query: params.query })}</h1>\n            </div>\n            <div>\n                {trans('searchResultPage.noResults')}\n            </div>\n        </Page>\n    );\n}\n","import CardContent from '@material-ui/core/CardContent';\nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Route, Switch, useHistory, useLocation, useParams } from 'react-router';\nimport Card from '../../components/Card';\nimport TabBar from '../../compositions/TabBar';\nimport { TabBarItem } from '../../compositions/TabBar/TabBar';\nimport AccountDetailsInfoCardConnector from '../../connectors/AccountDetailsInfoCardConnector';\nimport Page from '../../containers/Page';\nimport { loadAccount } from '../../redux/account/accountActions';\nimport { routePaths } from '../../routes';\nimport trans from '../../translation/trans';\nimport AccountStakesPage from './sub-pages/AccountStakesPage';\nimport AccountRequestsPage from './sub-pages/AccountRequestsPage';\n\nimport s from './AccountPage.module.scss';\nimport AccountUnclaimedPage from './sub-pages/AccountUnclaimedPage';\nimport WhitelistInfoCardConnector from '../../connectors/WhitelistInfoCardConnector';\n\ninterface Params {\n    provider: string;\n    accountId: string;\n}\n\nexport default function AccountPage() {\n    const params = useParams<Params>();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const location = useLocation();\n\n    useEffect(() => {\n        dispatch(loadAccount(params.provider, params.accountId));\n    }, [dispatch, params]);\n\n    const onTabClick = useCallback((item: TabBarItem) => {\n        history.push(item.id);\n    }, [history]);\n\n    return (\n        <Page>\n            <div>\n                <h1 className={s.title}>{params.accountId}</h1>\n            </div>\n            <AccountDetailsInfoCardConnector />\n            <WhitelistInfoCardConnector />\n            <Card className={s.card}>\n                <CardContent>\n                    <TabBar\n                        activeId={location.pathname}\n                        className={s.tabBar}\n                        onTabClick={onTabClick}\n                        items={[{\n                            id: routePaths.account(params.provider, params.accountId),\n                            label: trans('accountPage.label.stakes'),\n                            show: true,\n                        }, {\n                            id: routePaths.accountUnclaimed(params.provider, params.accountId),\n                            label: trans('accountPage.label.unclaimed'),\n                            show: true,\n                        }, {\n                            id: routePaths.accountRequests(params.provider, params.accountId),\n                            label: trans('accountPage.label.requests'),\n                            show: true,\n                        }]}\n                    />\n                    <Switch>\n                        <Route exact path={routePaths.account()} component={AccountStakesPage} />\n                        <Route exact path={routePaths.accountRequests()} component={AccountRequestsPage} />\n                        <Route exact path={routePaths.accountUnclaimed()} component={AccountUnclaimedPage} />\n                    </Switch>\n                </CardContent>\n            </Card>\n        </Page>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport useInterval from '@use-it/interval';\nimport classnames from 'classnames';\n\nimport AccountStakesInfoCardConnector from '../../connectors/AccountStakesInfoCardConnector';\nimport CallDataInfoConnector from '../../connectors/CallDataInfoConnector';\nimport DataRequestDetailHeaderConnector from '../../connectors/DataRequestDetailHeaderConnector';\nimport RequestInfoConnector from '../../connectors/RequestInfoConnector';\nimport StakeDialogConnector from '../../connectors/StakeDialogConnector';\nimport ResolutionWindowsInfoConnector from '../../connectors/ResolutionWindowsInfoConnector';\nimport Page from '../../containers/Page';\nimport { loadDataRequestById, unloadDataRequest } from '../../redux/dataRequest/dataRequestAction';\nimport { Reducers } from '../../redux/reducers';\nimport { REQUEST_DETAIL_REFRESH_INTERVAL } from '../../config';\nimport UnstakeDialogConnector from '../../connectors/UnstakeDialogConnector';\n\nimport s from './DataRequestDetailPage.module.scss';\n\ninterface RouterParams {\n    id: string;\n}\n\nexport default function DataRequestDetailPage() {\n    const dispatch = useDispatch();\n    const { id } = useParams<RouterParams>();\n    const account = useSelector((store: Reducers) => store.account.account);\n\n    useEffect(() => {\n        dispatch(loadDataRequestById(id));\n\n        return () => {\n            dispatch(unloadDataRequest());\n        }\n    }, [dispatch, id]);\n\n    useInterval(() => {\n        dispatch(loadDataRequestById(id));\n    }, REQUEST_DETAIL_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <DataRequestDetailHeaderConnector />\n            <StakeDialogConnector />\n            <UnstakeDialogConnector />\n            <RequestInfoConnector className={s.card} />\n            {account && <AccountStakesInfoCardConnector />}\n            <CallDataInfoConnector className={s.card} />\n            <ResolutionWindowsInfoConnector className={classnames(s.card, s.lastCard)} />\n        </Page>\n    );\n}\n","import useInterval from '@use-it/interval';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport DataRequestsOverviewConnector from '../../connectors/DataRequestsOverviewConnector';\nimport Page from '../../containers/Page';\nimport { loadDataRequests } from '../../redux/dataRequest/dataRequestAction';\nimport { REQUEST_LIST_REFRESH_INTERVAL } from '../../config';\nimport DataRequestsOverviewFiltersConnector from '../../connectors/DataRequestsOverviewFiltersConnector';\n\ninterface Params {\n    page: string;\n}\n\nexport default function DataRequestsPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useInterval(() => {\n        dispatch(loadDataRequests(Number(params.page)));\n    }, REQUEST_LIST_REFRESH_INTERVAL);\n\n    return (\n        <Page>\n            <DataRequestsOverviewFiltersConnector />\n            <DataRequestsOverviewConnector page={Number(params.page)} />\n        </Page>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport OracleConfigInfoCardConnector from '../../connectors/OracleConfigInfoCardConnector';\nimport Page from '../../containers/Page';\nimport { loadOracleConfig } from '../../redux/oracleConfig/oracleConfigActions';\nimport trans from '../../translation/trans';\n\ninterface Params {\n    id: string;\n    provider: string;\n}\n\nexport default function ConfigPage() {\n    const dispatch = useDispatch();\n    const params = useParams<Params>();\n\n    useEffect(() => {\n        dispatch(loadOracleConfig(params.id));\n    }, [dispatch, params.id]);\n\n    return (\n        <Page>\n            <h1>{trans('oracleConfig.title', { id: params.id })}</h1>\n            <OracleConfigInfoCardConnector />\n        </Page>\n    );\n}\n","import { getOracleConfigById } from '../../services/OracleConfigService';\nimport { setOracleConfigDetail, setOracleConfigLoading } from './oracleConfig';\n\nexport function loadOracleConfig(id: string) {\n    return async (dispatch: Function) => {\n        dispatch(setOracleConfigLoading(true));\n        const config = await getOracleConfigById(id);\n        dispatch(setOracleConfigDetail(config));\n        dispatch(setOracleConfigLoading(false));\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport dataRequest, { DataRequestsState } from './dataRequest/dataRequest';\nimport account, { AccountState } from './account/account';\nimport dialogs, { DialogsState } from './dialogs/dialogs';\nimport stats, { StatsState } from './stats/stats';\nimport oracleConfig, { OracleConfigState } from './oracleConfig/oracleConfig';\nimport appconfig, { AppConfigState } from './appconfig/appconfig';\n\nexport interface Reducers {\n    dataRequest: DataRequestsState;\n    account: AccountState;\n    dialogs: DialogsState;\n    stats: StatsState;\n    oracleConfig: OracleConfigState;\n    appconfig: AppConfigState;\n}\n\nexport default combineReducers<Reducers>({\n    account,\n    appconfig,\n    dataRequest,\n    dialogs,\n    stats,\n    oracleConfig,\n});\n","import {\n    applyMiddleware,\n    CombinedState,\n    createStore,\n    Store,\n    StoreEnhancer,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport reducers, { Reducers } from './reducers';\n\nconst createEnhancer = (): StoreEnhancer => (process.env.REACT_APP_APP_ENV !== 'production'\n    ? composeWithDevTools(applyMiddleware(thunk))\n    : applyMiddleware(thunk)\n);\n\nexport default function configureStore(preloadedState: Record<string, any> = {}): Store<CombinedState<Reducers>> {\n    const enhancer = createEnhancer();\n    return createStore(reducers, preloadedState, enhancer);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { StylesProvider } from '@material-ui/core/styles';\n\nimport { routes } from './routes';\nimport configureStore from './redux/store';\nimport { initProviders } from './services/providers/ProviderRegistry';\n\nimport './styles/global.module.scss';\n\nconst store = configureStore({});\ninitProviders();\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter basename=\"/\" hashType=\"hashbang\">\n            <StylesProvider injectFirst>\n                <Switch>\n                    {routes.map(route => <Route {...route} key={route.key} />)}\n                </Switch>\n            </StylesProvider>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleWrapper\":\"CallDataInfoCard_titleWrapper__27iZZ\",\"title\":\"CallDataInfoCard_title__y9qga\",\"label\":\"CallDataInfoCard_label__KSOgB\",\"table\":\"CallDataInfoCard_table__2FKa3\",\"tableHeadRow\":\"CallDataInfoCard_tableHeadRow__RWXv0\",\"tableItem\":\"CallDataInfoCard_tableItem__3hv8p\",\"tableItemInner\":\"CallDataInfoCard_tableItemInner__1JjPs\",\"possibleOutcomes\":\"CallDataInfoCard_possibleOutcomes__2zyN7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"StakeDialog_form__2Jewc\",\"formItem\":\"StakeDialog_formItem__11Oc1\",\"formInput\":\"StakeDialog_formInput__1nO1v\",\"error\":\"StakeDialog_error__3U3jC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"DataRequestsOverview_root__1C_f3\",\"container\":\"DataRequestsOverview_container__gtVbk\",\"tableHead\":\"DataRequestsOverview_tableHead__1UCIA\",\"linkCell\":\"DataRequestsOverview_linkCell__v_ecT\",\"pagination\":\"DataRequestsOverview_pagination__3VSEr\",\"noRequests\":\"DataRequestsOverview_noRequests__2MHyM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"Dialog_paper__XrzDE\",\"title\":\"Dialog_title__2o5jO\",\"content\":\"Dialog_content__2Ebv9\",\"cancelButton\":\"Dialog_cancelButton__3SRaV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"DataRequestDetailHeader_header__22oVK\",\"button\":\"DataRequestDetailHeader_button__zUMJ0\"};"],"sourceRoot":""}